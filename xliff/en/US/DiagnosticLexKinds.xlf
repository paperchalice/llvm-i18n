<?xml version='1.0' encoding='UTF-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://docs.oasis-open.org/xliff/xliff-core/v2.1/os/schemas/xliff_core_2.0.xsd" trgLang="en-US">
  <!--This file is automatically generated. Do not update this file directly by hand! Use `update-xliff.py`.-->
  <file id="DiagnosticLex" original="clang/Basic/DiagnosticLexKinds.td">
    <group id="TextSubstitution"></group>
    <group id="Diagnostic">
      <unit id="backslash_newline_space">
        <segment>
          <source>backslash and newline separated by space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err__Pragma_malformed">
        <segment>
          <source>_Pragma takes a parenthesized string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_bad_character_encoding">
        <segment>
          <source>illegal character encoding in character literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_bad_string_encoding">
        <segment>
          <source>illegal character encoding in string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_character_not_allowed">
        <segment>
          <source>unexpected character &lt;U+%0&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_character_not_allowed_identifier">
        <segment>
          <source>character &lt;U+%0&gt; not allowed %select{in|at the start of}1 an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_character_too_large">
        <segment>
          <source>character too large for enclosing character literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_conflict_marker">
        <segment>
          <source>version control conflict marker in file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_defined_in_pp_embed">
        <segment>
          <source>'defined' cannot appear within this context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_defined_macro_name">
        <segment>
          <source>'defined' cannot be used as a macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_delimited_escape_empty">
        <segment>
          <source>delimited escape sequence cannot be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_delimited_escape_invalid">
        <segment>
          <source>invalid digit '%0' in escape sequence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_delimited_escape_missing_brace">
        <segment>
          <source>expected '{' after '\%0' escape sequence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_dep_source_scanner_missing_semi_after_at_import">
        <segment>
          <source>could not find ';' after @import</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_dep_source_scanner_unexpected_tokens_at_import">
        <segment>
          <source>unexpected extra tokens at end of @import declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_digit_separator_not_between_digits">
        <segment>
          <source>digit separator cannot appear at %select{start|end}0 of digit sequence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_embedded_directive">
        <segment>
          <source>embedding a #%0 directive within macro arguments is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_escape_too_large">
        <segment>
          <source>%select{hex|octal}0 escape sequence out of range</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_id_building_module">
        <segment>
          <source>expected a module name in '__building_module' expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_exponent_has_no_digits">
        <segment>
          <source>exponent has no digits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_feature_check_malformed">
        <segment>
          <source>builtin feature check macro requires a parenthesized identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_header_import_not_header_unit">
        <segment>
          <source>header file %0 (aka '%1') cannot be imported because it is not known to be a header unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_header_import_semi_in_macro">
        <segment>
          <source>semicolon terminating header import declaration cannot be produced by a macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hex_constant_requires">
        <segment>
          <source>hexadecimal floating %select{constant|literal}0 requires %select{an exponent|a significand}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hex_escape_no_digits">
        <segment>
          <source>\%0 used with no following hex digits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_illegal_use_of_flt_eval_macro">
        <segment>
          <source>'__FLT_EVAL_METHOD__' cannot be expanded inside a scope containing '#pragma clang fp eval_method'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_char_raw_delim">
        <segment>
          <source>invalid character '%0' in raw string delimiter; use PREFIX( )PREFIX to delimit raw string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_character_to_charify">
        <segment>
          <source>invalid argument to convert to character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_digit">
        <segment>
          <source>invalid digit '%0' in %select{decimal|octal|binary}1 constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_newline_raw_delim">
        <segment>
          <source>invalid newline character in raw string delimiter; use PREFIX( )PREFIX to delimit raw string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_suffix_constant">
        <segment>
          <source>invalid suffix '%0' on %select{integer|floating|fixed-point}1 constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_ucn_name">
        <segment>
          <source>'%0' is not a valid Unicode character name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_utf8">
        <segment>
          <source>source file is not valid UTF-8</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lexing_char">
        <segment>
          <source>failure when lexing a character literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lexing_numeric">
        <segment>
          <source>failure when lexing a numeric literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lexing_string">
        <segment>
          <source>failure when lexing a string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_config_macro_submodule">
        <segment>
          <source>configuration macros are only allowed in top-level modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_conflicting_export_as">
        <segment>
          <source>conflicting re-export of module '%0' as '%1' or '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_duplicate_header_attribute">
        <segment>
          <source>header attribute '%0' specified multiple times</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_attribute">
        <segment>
          <source>expected an attribute name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_config_macro">
        <segment>
          <source>expected configuration macro name after ','</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_conflicts_comma">
        <segment>
          <source>expected ',' after conflicting module name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_conflicts_message">
        <segment>
          <source>expected a message describing the conflict with '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_export_wildcard">
        <segment>
          <source>only '*' can be exported from an inferred submodule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_feature">
        <segment>
          <source>expected a feature name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_header">
        <segment>
          <source>expected a header name after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_header_attribute">
        <segment>
          <source>expected a header attribute name ('size' or 'mtime')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_inferred_member">
        <segment>
          <source>expected %select{module exclusion with 'exclude'|'export *'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_lbrace">
        <segment>
          <source>expected '{' to start module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_lbrace_wildcard">
        <segment>
          <source>expected '{' to start inferred submodule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_library_name">
        <segment>
          <source>expected %select{library|framework}0 name as a string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_member">
        <segment>
          <source>expected umbrella, header, submodule, or module export</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_mmap_file">
        <segment>
          <source>expected a module map file name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_module">
        <segment>
          <source>expected module declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_module_name">
        <segment>
          <source>expected module name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_rbrace">
        <segment>
          <source>expected '}'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_expected_rsquare">
        <segment>
          <source>expected ']' to close attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_explicit_inferred_framework">
        <segment>
          <source>inferred framework modules cannot be 'explicit'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_explicit_top_level">
        <segment>
          <source>'explicit' is not permitted on top-level modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_inferred_framework_submodule">
        <segment>
          <source>inferred submodule cannot be a framework submodule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_inferred_no_umbrella">
        <segment>
          <source>inferred submodules require a module with an umbrella</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_inferred_redef">
        <segment>
          <source>redefinition of inferred submodule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_invalid_header_attribute_value">
        <segment>
          <source>expected integer literal as value for header attribute '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_missing_exclude_name">
        <segment>
          <source>expected excluded module name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_missing_module_qualified">
        <segment>
          <source>no module named '%0' in '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_missing_module_unqualified">
        <segment>
          <source>no module named '%0' visible from '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_missing_parent_module">
        <segment>
          <source>no module named '%0' %select{found|in '%2'}1, parent module must be defined before the submodule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_module_id">
        <segment>
          <source>expected a module name or '*'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_module_redefinition">
        <segment>
          <source>redefinition of module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_nested_submodule_id">
        <segment>
          <source>qualified module name can only be used to define modules at the top level</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_qualified_export_as">
        <segment>
          <source>a module can only be re-exported as another top-level module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_submodule_export_as">
        <segment>
          <source>only top-level modules can be re-exported as public</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_top_level_inferred_submodule">
        <segment>
          <source>only submodules and framework modules may be inferred with wildcard syntax</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_umbrella_clash">
        <segment>
          <source>umbrella for module '%0' already covers this directory</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_unknown_token">
        <segment>
          <source>skipping stray token</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_mmap_use_decl_submodule">
        <segment>
          <source>use declarations are only allowed in top-level modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_multichar_character_literal">
        <segment>
          <source>%select{wide|Unicode}0 character literals may not contain multiple characters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_opencl_logical_exclusive_or">
        <segment>
          <source>^^ is a reserved operator in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pascal_string_too_long">
        <segment>
          <source>Pascal string is too long</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_paste_at_end">
        <segment>
          <source>'##' cannot appear at end of macro expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_paste_at_start">
        <segment>
          <source>'##' cannot appear at start of macro expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_placeholder_in_source">
        <segment>
          <source>editor placeholder in source file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_arc_cf_code_audited_syntax">
        <segment>
          <source>expected 'begin' or 'end'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_assume_nonnull_syntax">
        <segment>
          <source>expected 'begin' or 'end'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_bad_paste">
        <segment>
          <source>pasting formed '%0', an invalid preprocessing token</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_colon_without_question">
        <segment>
          <source>':' without preceding '?'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_directive_required">
        <segment>
          <source>%0 must be used within a preprocessing directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_division_by_zero">
        <segment>
          <source>division by zero in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_double_begin_of_arc_cf_code_audited">
        <segment>
          <source>already inside '#pragma clang arc_cf_code_audited'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_double_begin_of_assume_nonnull">
        <segment>
          <source>already inside '#pragma clang assume_nonnull'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_double_begin_pragma_unsafe_buffer_usage">
        <segment>
          <source>already inside '#pragma unsafe_buffer_usage'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_duplicate_name_in_arg_list">
        <segment>
          <source>duplicate macro parameter name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_embed_device_file">
        <segment>
          <source>device files are not yet supported by '#embed' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_embed_dup_params">
        <segment>
          <source>cannot specify parameter '%0' twice in the same '#embed' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_empty_filename">
        <segment>
          <source>empty filename</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_endif_without_if">
        <segment>
          <source>#endif without #if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_eof_in_arc_cf_code_audited">
        <segment>
          <source>'#pragma clang arc_cf_code_audited' was not ended within this file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_eof_in_assume_nonnull">
        <segment>
          <source>'#pragma clang assume_nonnull' was not ended within this file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_error_opening_file">
        <segment>
          <source>error opening file '%0': %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_after">
        <segment>
          <source>missing %1 after %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_comma_in_arg_list">
        <segment>
          <source>expected comma in macro parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_eol">
        <segment>
          <source>expected end of line in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_ident_in_arg_list">
        <segment>
          <source>expected identifier in macro parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_module_name">
        <segment>
          <source>expected %select{identifier after '.' in |}0module name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_rparen">
        <segment>
          <source>expected ')' in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expected_value_in_expr">
        <segment>
          <source>expected value in expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expects_filename">
        <segment>
          <source>expected "FILENAME" or &lt;FILENAME&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expr_bad_token_binop">
        <segment>
          <source>token is not a valid binary operator in a preprocessor subexpression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expr_bad_token_lparen">
        <segment>
          <source>function-like macro %0 is not defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_expr_bad_token_start_expr">
        <segment>
          <source>invalid token at start of a preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_file_not_found">
        <segment>
          <source>'%0' file not found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_file_not_found_angled_include_not_fatal">
        <segment>
          <source>'%0' file not found with &lt;angled&gt; %select{include|import}1; use "quotes" instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_file_not_found_typo_not_fatal">
        <segment>
          <source>'%0' file not found, did you mean '%1'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_hash_error">
        <segment>
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_identifier_arg_not_identifier">
        <segment>
          <source>cannot convert %0 token to an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_illegal_floating_literal">
        <segment>
          <source>floating point literal in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_import_directive_ms">
        <segment>
          <source>#import of type library is an unsupported Microsoft feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_include_in_arc_cf_code_audited">
        <segment>
          <source>cannot %select{#include files|import headers}0 inside '#pragma clang arc_cf_code_audited'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_include_in_assume_nonnull">
        <segment>
          <source>cannot %select{#include files|import headers}0 inside '#pragma clang assume_nonnull'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_include_too_deep">
        <segment>
          <source>#include nested too deeply</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_including_mainfile_in_preamble">
        <segment>
          <source>main file cannot be included recursively when building a preamble</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_invalid_directive">
        <segment>
          <source>invalid preprocessing directive%select{|, did you mean '#%1'?}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_invalid_poison">
        <segment>
          <source>can only poison identifier tokens</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_invalid_tok_in_arg_list">
        <segment>
          <source>invalid token in macro parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_invalid_udl">
        <segment>
          <source>%select{character|integer}0 literal with user-defined suffix cannot be used in preprocessor constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_line_digit_sequence">
        <segment>
          <source>%select{#line|GNU line marker}0 directive requires a simple digit sequence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_line_invalid_filename">
        <segment>
          <source>invalid filename for #line directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_line_requires_integer">
        <segment>
          <source>#line directive requires a positive integer argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_linemarker_invalid_filename">
        <segment>
          <source>invalid filename for line marker directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_linemarker_invalid_flag">
        <segment>
          <source>invalid flag line marker directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_linemarker_invalid_pop">
        <segment>
          <source>invalid line marker flag '2': cannot pop empty include stack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_linemarker_requires_integer">
        <segment>
          <source>line marker directive requires a positive integer argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_macro_not_identifier">
        <segment>
          <source>macro name must be an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_malformed_ident">
        <segment>
          <source>invalid #ident directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_missing_lparen_in_vaopt_use">
        <segment>
          <source>missing '(' following __VA_OPT__</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_missing_macro_name">
        <segment>
          <source>macro name missing</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_missing_rparen_in_macro_def">
        <segment>
          <source>missing ')' in macro parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_begin_no_module_map">
        <segment>
          <source>no module map available for module %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_begin_no_submodule">
        <segment>
          <source>submodule %0.%1 not declared in module map</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_begin_without_module_end">
        <segment>
          <source>no matching '#pragma clang module end' for this '#pragma clang module begin'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_begin_wrong_module">
        <segment>
          <source>must specify '-fmodule-name=%0' to enter %select{|submodule of }1this module%select{ (current module is %3)|}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_build_missing_end">
        <segment>
          <source>no matching '#pragma clang module endbuild' for this '#pragma clang module build'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_module_end_without_module_begin">
        <segment>
          <source>no matching '#pragma clang module begin' for this '#pragma clang module end'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_nested_paren">
        <segment>
          <source>nested parentheses not permitted in %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_operator_used_as_macro_name">
        <segment>
          <source>C++ operator %0 (aka %1) used as a macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_pragma_hdrstop_not_seen">
        <segment>
          <source>#pragma hdrstop not seen while attempting to use precompiled header</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_pragma_unsafe_buffer_usage_syntax">
        <segment>
          <source>expected 'begin' or 'end'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_remainder_by_zero">
        <segment>
          <source>remainder by zero in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_stringize_not_parameter">
        <segment>
          <source>'%select{#|#@}0' is not followed by a macro parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_through_header_not_found">
        <segment>
          <source>'%0' required for precompiled header not found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_through_header_not_seen">
        <segment>
          <source>#include of '%0' not seen while attempting to %select{create|use}1 precompiled header</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unclosed_pragma_unsafe_buffer_usage">
        <segment>
          <source>'#pragma unsafe_buffer_usage' was not ended</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unknown_parameter">
        <segment>
          <source>unknown%select{ | embed}0 preprocessor parameter '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unmatched_end_begin_pragma_unsafe_buffer_usage">
        <segment>
          <source>not currently inside '#pragma unsafe_buffer_usage'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unmatched_end_of_arc_cf_code_audited">
        <segment>
          <source>not currently inside '#pragma clang arc_cf_code_audited'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unmatched_end_of_assume_nonnull">
        <segment>
          <source>not currently inside '#pragma clang assume_nonnull'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_unterminated_conditional">
        <segment>
          <source>unterminated conditional directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_used_poisoned_id">
        <segment>
          <source>attempt to use a poisoned identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_vaopt_nested_use">
        <segment>
          <source>__VA_OPT__ cannot be nested within its own replacement tokens</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pp_visibility_non_macro">
        <segment>
          <source>no macro named %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_message">
        <segment>
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_message_malformed">
        <segment>
          <source>pragma %select{message|warning|error}0 requires parenthesized string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_push_pop_macro_malformed">
        <segment>
          <source>pragma %0 requires a parenthesized string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_raw_delim_too_long">
        <segment>
          <source>raw string delimiter longer than 16 characters; use PREFIX( )PREFIX to delimit raw string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_string_concat_mixed_suffix">
        <segment>
          <source>differing user-defined suffixes ('%0' and '%1') in string literal concatenation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_too_few_args_in_macro_invoc">
        <segment>
          <source>too few arguments provided to function-like macro invocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_too_many_args_in_macro_invoc">
        <segment>
          <source>too many arguments provided to function-like macro invocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ucn_control_character">
        <segment>
          <source>universal character name refers to a control character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ucn_escape_basic_scs">
        <segment>
          <source>character '%0' cannot be specified by a universal character name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ucn_escape_incomplete">
        <segment>
          <source>incomplete universal character name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ucn_escape_invalid">
        <segment>
          <source>invalid universal character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_undeclared_use_of_module">
        <segment>
          <source>module %0 does not depend on a module exporting '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_undeclared_use_of_module_indirect">
        <segment>
          <source>module %0 does not directly depend on a module exporting '%1', which is part of indirectly-used module %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unevaluated_string_invalid_escape_sequence">
        <segment>
          <source>invalid escape sequence '%0' in an unevaluated string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unevaluated_string_prefix">
        <segment>
          <source>an unevaluated string literal cannot have an encoding prefix</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unevaluated_string_udl">
        <segment>
          <source>an unevaluated string literal cannot be a user-defined literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unsupported_string_concat">
        <segment>
          <source>unsupported non-standard concatenation of string literals</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unterm_macro_invoc">
        <segment>
          <source>unterminated function-like macro invocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unterminated___pragma">
        <segment>
          <source>missing terminating ')' character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unterminated_block_comment">
        <segment>
          <source>unterminated /* comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unterminated_raw_string">
        <segment>
          <source>raw string missing terminating delimiter )%0"</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_vaopt_paste_at_end">
        <segment>
          <source>'##' cannot appear at end of __VA_OPT__ argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_vaopt_paste_at_start">
        <segment>
          <source>'##' cannot appear at start of __VA_OPT__ argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="escaped_newline_block_comment_end">
        <segment>
          <source>escaped newline between */ characters at block comment end</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_binary_literal">
        <segment>
          <source>binary integer literals are a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_binary_literal_cxx14">
        <segment>
          <source>binary integer literals are a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c23_pp_directive">
        <segment>
          <source>use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c99_whitespace_required_after_macro_name">
        <segment>
          <source>ISO C99 requires whitespace after the macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c_missing_varargs_arg">
        <segment>
          <source>passing no argument for the '...' parameter of a variadic macro is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_charize_microsoft">
        <segment>
          <source>charizing operator #@ is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_comment_paste_microsoft">
        <segment>
          <source>pasting two '/' tokens into a '//' comment is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cpp_octal_literal">
        <segment>
          <source>octal integer literals are a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ctrl_z_eof_microsoft">
        <segment>
          <source>treating Ctrl-Z as end-of-file is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx23_pp_directive">
        <segment>
          <source>use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx26_raw_string_literal_character_set">
        <segment>
          <source> '%0' in a raw string literal delimiter is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx_missing_varargs_arg">
        <segment>
          <source>passing no argument for the '...' parameter of a variadic macro is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_delimited_escape_sequence">
        <segment>
          <source>%select{delimited|named}0 escape sequences are a %select{C++23|C2y|Clang}1 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_dollar_in_identifier">
        <segment>
          <source>'$' in identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_embedded_directive">
        <segment>
          <source>embedding a directive within macro arguments has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_empty_character">
        <segment>
          <source>empty character constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_empty_fnmacro_arg">
        <segment>
          <source>empty macro arguments are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_hex_constant_invalid">
        <segment>
          <source>hexadecimal floating constants are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_hex_literal_invalid">
        <segment>
          <source>hexadecimal floating literals are a C++17 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_line_comment">
        <segment>
          <source>// comments are not allowed in this language</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_mathematical_notation">
        <segment>
          <source>mathematical notation character &lt;U+%0&gt; in an identifier is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_missing_whitespace_after_macro_name">
        <segment>
          <source>whitespace required after macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ms_reserved_user_defined_literal">
        <segment>
          <source>invalid suffix on literal; C++11 requires a space between literal and identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_multi_line_line_comment">
        <segment>
          <source>multi-line // comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_named_variadic_macro">
        <segment>
          <source>named variadic macros are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_nonstandard_escape">
        <segment>
          <source>use of non-standard escape character '\%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_octal_literal">
        <segment>
          <source>octal integer literals are a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_on_off_switch_syntax">
        <segment>
          <source>expected 'ON' or 'OFF' or 'DEFAULT' in pragma</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_paste_comma">
        <segment>
          <source>token pasting of ',' and __VA_ARGS__ is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_bad_paste_ms">
        <segment>
          <source>pasting formed '%0', an invalid preprocessing token</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_bad_vaargs_use">
        <segment>
          <source>__VA_ARGS__ can only appear in the expansion of a C99 variadic macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_bad_vaopt_use">
        <segment>
          <source>__VA_OPT__ can only appear in the expansion of a variadic macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_comma_expr">
        <segment>
          <source>comma operator in operand of #if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_embed_directive">
        <segment>
          <source>#embed is a %select{C23|Clang}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_extra_tokens_at_eol">
        <segment>
          <source>extra tokens at end of #%0 directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_gnu_line_directive">
        <segment>
          <source>this style of line directive is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_ident_directive">
        <segment>
          <source>#ident is a language extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_import_directive">
        <segment>
          <source>#import is a language extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_include_next_directive">
        <segment>
          <source>#include_next is a language extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_include_search_ms">
        <segment>
          <source>#include resolved using non-portable Microsoft search rules as: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_line_too_big">
        <segment>
          <source>C requires #line number to be less than %0, allowed as extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_line_zero">
        <segment>
          <source>#line directive with zero argument is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_macro_redef">
        <segment>
          <source>%0 macro redefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_opencl_variadic_macros">
        <segment>
          <source>variadic macros are a Clang extension in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_operator_used_as_macro_name">
        <segment>
          <source>C++ operator %0 (aka %1) used as a macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_redef_builtin_macro">
        <segment>
          <source>redefining builtin macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_undef_builtin_macro">
        <segment>
          <source>undefining builtin macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pp_warning_directive">
        <segment>
          <source>#warning is a %select{C23|C++23}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_pragma_syntax_eod">
        <segment>
          <source>expected end of directive in pragma</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_reserved_user_defined_literal">
        <segment>
          <source>invalid suffix on literal; C++11 requires a space between literal and identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_string_too_long">
        <segment>
          <source>string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_token_used">
        <segment>
          <source>extension used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_unicode_whitespace">
        <segment>
          <source>treating Unicode character as whitespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_unknown_escape">
        <segment>
          <source>unknown escape sequence '\%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_unterminated_char_or_string">
        <segment>
          <source>missing terminating %select{'|'"'}0 character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_variadic_macro">
        <segment>
          <source>variadic macros are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_header_guard">
        <segment>
          <source>%0 is defined here; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_implicit_top_level_module_import_here">
        <segment>
          <source>submodule of top-level module '%0' implicitly imported here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_init_list_at_beginning_of_macro_argument">
        <segment>
          <source>cannot use initializer list at the beginning of a macro argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_invalid_ucn_name_candidate">
        <segment>
          <source>did you mean %0 ('%2' U+%1)?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_invalid_ucn_name_loose_matching">
        <segment>
          <source>characters names in Unicode escape sequences are sensitive to case and whitespaces</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_macro_expansion_here">
        <segment>
          <source>expansion of macro %0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_macro_here">
        <segment>
          <source>macro %0 defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_mmap_add_framework_keyword">
        <segment>
          <source>use 'framework module' to declare module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_mmap_lbrace_match">
        <segment>
          <source>to match this '{'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_mmap_lsquare_match">
        <segment>
          <source>to match this ']'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_mmap_prev_definition">
        <segment>
          <source>previously defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_mmap_rename_top_level_private_module">
        <segment>
          <source>rename '%0' to ensure it can be found by name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pp_ambiguous_macro_chosen">
        <segment>
          <source>expanding this definition of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pp_ambiguous_macro_other">
        <segment>
          <source>other definition of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pp_framework_without_header">
        <segment>
          <source>did not find header '%0' in framework '%1' (loaded from '%2')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pp_macro_annotation">
        <segment>
          <source>macro marked '%select{deprecated|restrict_expansion|final}0' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pp_module_begin_here">
        <segment>
          <source>entering module '%0' due to this pragma</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_suggest_parens_for_macro">
        <segment>
          <source>parentheses are required around macro argument containing braced initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_ucn_four_not_eight">
        <segment>
          <source>did you mean to use '\u'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="null_in_char_or_string">
        <segment>
          <source>null character(s) preserved in %select{char|string}0 literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="null_in_file">
        <segment>
          <source>null character ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_disabled_macro_expansion">
        <segment>
          <source>disabled expansion of recursive macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_err_elif_after_else">
        <segment>
          <source>%select{#elif|#elifdef|#elifndef}0 after #else</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_err_elif_without_if">
        <segment>
          <source>%select{#elif|#elifdef|#elifndef}0 without #if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_err_else_after_else">
        <segment>
          <source>#else after #else</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_err_else_without_if">
        <segment>
          <source>#else without #if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_hash_warning">
        <segment>
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_include_macros_out_of_predefines">
        <segment>
          <source>the #__include_macros directive is only for internal use by -imacros</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_include_next_absolute_path">
        <segment>
          <source>#include_next in file found relative to primary source file or found by absolute path; will search from start of include path</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_include_next_in_primary">
        <segment>
          <source>#include_next in primary source file; will search from start of include path</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_invalid_string_literal">
        <segment>
          <source>invalid string literal, ignoring final '\'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_macro_not_used">
        <segment>
          <source>macro is not used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_nonportable_path">
        <segment>
          <source>non-portable path to file '%0'; specified path differs in case from file name on disk</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_nonportable_system_path">
        <segment>
          <source>non-portable path to file '%0'; specified path differs in case from file name on disk</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_out_of_date_dependency">
        <segment>
          <source>current file is older than dependency %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_poisoning_existing_macro">
        <segment>
          <source>poisoning existing macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_pragma_once_in_main_file">
        <segment>
          <source>#pragma once in main file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="pp_pragma_sysheader_in_main_file">
        <segment>
          <source>#pragma system_header ignored in main file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="remark_mmap_load">
        <segment>
          <source>loading modulemap '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="remark_mmap_load_module">
        <segment>
          <source>loading parsed module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="remark_mmap_parse">
        <segment>
          <source>parsing modulemap '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="remark_pp_include_directive_modular_translation">
        <segment>
          <source>treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="remark_pp_search_path_usage">
        <segment>
          <source>search path used: '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="trigraph_converted">
        <segment>
          <source>trigraph converted to '%0' character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="trigraph_ends_block_comment">
        <segment>
          <source>trigraph ends block comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="trigraph_ignored">
        <segment>
          <source>trigraph ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="trigraph_ignored_block_comment">
        <segment>
          <source>ignored trigraph would end block comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_bad_character_encoding">
        <segment>
          <source>illegal character encoding in character literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_bad_string_encoding">
        <segment>
          <source>illegal character encoding in string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c2y_compat_octal_literal">
        <segment>
          <source>octal integer literals are incompatible with standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c2y_delimited_escape_sequence">
        <segment>
          <source>delimited escape sequences are incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c17_compat_missing_varargs_arg">
        <segment>
          <source>passing no argument for the '...' parameter of a variadic macro is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c17_compat_u8_character_literal">
        <segment>
          <source>unicode literals are incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_binary_literal">
        <segment>
          <source>binary integer literals are incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_digit_separator">
        <segment>
          <source>digit separators are incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_literal_ucn_control_character">
        <segment>
          <source>universal character name referring to a control character is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_literal_ucn_escape_basic_scs">
        <segment>
          <source>specifying character '%0' with a universal character name is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_pp_directive">
        <segment>
          <source>use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_warning_directive">
        <segment>
          <source>#warning is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_keyword">
        <segment>
          <source>'%0' is a keyword in C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c99_compat_unicode_id">
        <segment>
          <source>%select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c99_compat_unicode_literal">
        <segment>
          <source>unicode literals are incompatible with C99</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c99_keyword">
        <segment>
          <source>'%0' is a keyword in C99</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_char_constant_too_large">
        <segment>
          <source>character constant too long for its type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_compat_pp_embed_directive">
        <segment>
          <source>#embed is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_compat_binary_literal">
        <segment>
          <source>binary integer literals are incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_compat_digit_separator">
        <segment>
          <source>digit separators are incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_compat_reserved_user_defined_literal">
        <segment>
          <source>identifier after literal will be treated as a reserved user-defined literal suffix in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_compat_user_defined_literal">
        <segment>
          <source>identifier after literal will be treated as a user-defined literal suffix in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_keyword">
        <segment>
          <source>'%0' is a keyword in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_u8_character_literal">
        <segment>
          <source>unicode literals are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_missing_varargs_arg">
        <segment>
          <source>passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_spaceship">
        <segment>
          <source>'&lt;=&gt;' operator is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_hex_literal">
        <segment>
          <source>hexadecimal floating literals are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_spaceship">
        <segment>
          <source>'&lt;=&gt;' is a single token in C++20; add a space to avoid a change in behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_keyword">
        <segment>
          <source>'%0' is a keyword in C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_compat_pp_directive">
        <segment>
          <source>use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_compat_warning_directive">
        <segment>
          <source>#warning is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_delimited_escape_sequence">
        <segment>
          <source>%select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx26_compat_raw_string_literal_character_set">
        <segment>
          <source> '%0' in a raw string literal delimiter is incompatible with standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_empty_fnmacro_arg">
        <segment>
          <source>empty macro arguments are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_less_colon_colon">
        <segment>
          <source>'&lt;::' is treated as digraph '&lt;:' (aka '[') followed by ':' in C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_literal_ucn_control_character">
        <segment>
          <source>universal character name referring to a control character is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_literal_ucn_escape_basic_scs">
        <segment>
          <source>specifying character '%0' with a universal character name is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_pp_line_too_big">
        <segment>
          <source>#line number greater than 32767 is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_raw_string_literal">
        <segment>
          <source>raw string literals are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_unicode_literal">
        <segment>
          <source>unicode literals are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_variadic_macro">
        <segment>
          <source>variadic macros are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_defined_in_function_type_macro">
        <segment>
          <source>macro expansion producing 'defined' has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_defined_in_object_type_macro">
        <segment>
          <source>macro expansion producing 'defined' has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_delimited_ucn_empty">
        <segment>
          <source>empty delimited universal character name; treating as '\' '%0' '{' '}'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_delimited_ucn_incomplete">
        <segment>
          <source>incomplete delimited universal character name; treating as '\' '%0' '{' identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_deprecated_module_dot_map">
        <segment>
          <source>'%0' as a module map name is deprecated, rename it to %select{module.modulemap|module.private.modulemap}1%select{| in the 'Modules' directory of the framework}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_four_char_character_literal">
        <segment>
          <source>multi-character character constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_framework_include_private_from_public">
        <segment>
          <source>public framework header includes private framework header '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_has_warning_invalid_option">
        <segment>
          <source>__has_warning expected option name (e.g. "-Wundef")</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_header_guard">
        <segment>
          <source>%0 is used as a header guard here, followed by #define of a different macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_invalid_utf8_in_comment">
        <segment>
          <source>invalid UTF-8 in comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_missing_whitespace_after_macro_name">
        <segment>
          <source>whitespace recommended after macro name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_incomplete_framework_module_declaration">
        <segment>
          <source>skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_mismatched_private_module_name">
        <segment>
          <source>expected canonical name for private module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_mismatched_private_submodule">
        <segment>
          <source>private submodule '%0' in private module map, expected top-level module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_redundant_export_as">
        <segment>
          <source>module '%0' already re-exported as '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_umbrella_dir_not_found">
        <segment>
          <source>umbrella directory '%0' not found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_mmap_unknown_attribute">
        <segment>
          <source>unknown attribute '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_module_conflict">
        <segment>
          <source>module '%0' conflicts with already-imported module '%1': %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_multichar_character_literal">
        <segment>
          <source>multi-character character constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_nested_block_comment">
        <segment>
          <source>'/*' within block comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_no_newline_eof">
        <segment>
          <source>no newline at end of file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_non_modular_include_in_framework_module">
        <segment>
          <source>include of non-modular header inside framework module '%0': '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_non_modular_include_in_module">
        <segment>
          <source>include of non-modular header inside module '%0': '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_ambiguous_macro">
        <segment>
          <source>ambiguous expansion of macro %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_convert_to_positive">
        <segment>
          <source>%select{left|right}0 side of operator converted from negative value to unsigned: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_date_time">
        <segment>
          <source>expansion of date or time macro is not reproducible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_expr_overflow">
        <segment>
          <source>integer overflow in preprocessor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_hdrstop_filename_ignored">
        <segment>
          <source>#pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_identifier_is_cpp_keyword">
        <segment>
          <source>identifier %0 conflicts with a C++ keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_include_angled_in_module_purview">
        <segment>
          <source>'#include &lt;filename&gt;' attaches the declarations to the named module '%0', which is not usually intended; consider moving that directive before the module declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_invalid_directive">
        <segment>
          <source>invalid preprocessing directive%select{|, did you mean '#%1'?}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_line_decimal">
        <segment>
          <source>%select{#line|GNU line marker}0 directive interprets number as decimal, not octal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_macro_def_mismatch_with_pch">
        <segment>
          <source>definition of macro %0 does not match definition in precompiled header</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_macro_hides_keyword">
        <segment>
          <source>keyword is hidden by macro definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_macro_is_reserved_attribute_id">
        <segment>
          <source>%0 is a reserved attribute identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_macro_is_reserved_id">
        <segment>
          <source>macro name is a reserved identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_objc_macro_redef_ignored">
        <segment>
          <source>ignoring redefinition of Objective-C qualifier macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_undef_identifier">
        <segment>
          <source>%0 is not defined, evaluates to 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_undef_prefix">
        <segment>
          <source>%0 is not defined, evaluates to 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pp_undef_true_identifier">
        <segment>
          <source>'true' is not defined, evaluates to 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_debug_missing_command">
        <segment>
          <source>missing debug command</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_debug_unable_to_find_module">
        <segment>
          <source>unable to find module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_debug_unexpected_command">
        <segment>
          <source>unexpected debug command '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_debug_unknown_module">
        <segment>
          <source>unknown module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_deprecated_macro_use">
        <segment>
          <source>macro %0 has been marked as deprecated%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_diagnostic_cannot_pop">
        <segment>
          <source>pragma diagnostic pop could not pop, no matching push</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_diagnostic_invalid">
        <segment>
          <source>pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_diagnostic_invalid_option">
        <segment>
          <source>pragma diagnostic expected option name (e.g. "-Wundef")</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_diagnostic_invalid_token">
        <segment>
          <source>unexpected token in pragma diagnostic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_diagnostic_unknown_warning">
        <segment>
          <source>unknown warning group '%0', ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_exec_charset_expected">
        <segment>
          <source>#pragma execution_character_set expected '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_exec_charset_push_invalid">
        <segment>
          <source>#pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_exec_charset_spec_invalid">
        <segment>
          <source>#pragma execution_character_set expected 'push' or 'pop'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_final_macro">
        <segment>
          <source>macro %0 has been marked as final and should not be %select{undefined|redefined}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_ignored">
        <segment>
          <source>unknown pragma ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_include_alias_expected">
        <segment>
          <source>pragma include_alias expected '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_include_alias_expected_filename">
        <segment>
          <source>pragma include_alias expected include filename</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_include_alias_mismatch_angle">
        <segment>
          <source>angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_include_alias_mismatch_quote">
        <segment>
          <source>double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_message">
        <segment>
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_pop_macro_no_push">
        <segment>
          <source>pragma pop_macro could not pop '%0', no matching push_macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_restrict_expansion_macro_use">
        <segment>
          <source>macro %0 has been marked as unsafe for use in headers%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_warning_expected">
        <segment>
          <source>#pragma warning expected '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_warning_expected_number">
        <segment>
          <source>#pragma warning expected a warning number</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_warning_push_level">
        <segment>
          <source>#pragma warning(push, level) requires a level between 0 and 4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_warning_spec_invalid">
        <segment>
          <source>#pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_quoted_include_in_framework_header">
        <segment>
          <source>double-quoted include "%0" in framework header, expected angle-bracketed instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ucn_escape_incomplete">
        <segment>
          <source>incomplete universal character name; treating as '\' followed by identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ucn_escape_no_digits">
        <segment>
          <source>\%0 used with no following hex digits; treating as '\' followed by identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ucn_escape_surrogate">
        <segment>
          <source>universal character name refers to a surrogate character</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ucn_not_valid_in_c89">
        <segment>
          <source>universal character names are only valid in C99 or C++; treating as '\' followed by identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ucn_not_valid_in_c89_literal">
        <segment>
          <source>universal character names are only valid in C99 or C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_uncovered_module_header">
        <segment>
          <source>umbrella header for module '%0' does not include header '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_unevaluated_string_prefix">
        <segment>
          <source>encoding prefix '%0' on an unevaluated string literal has no effect%select{| and is incompatible with c++2c}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_unprefixed_octal_deprecated">
        <segment>
          <source>octal literals without a '0o' prefix are deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_use_of_private_header_outside_module">
        <segment>
          <source>use of private header from outside its module: '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_utf8_symbol_homoglyph">
        <segment>
          <source>treating Unicode character &lt;U+%0&gt; as an identifier character rather than as '%1' symbol</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_utf8_symbol_zero_width">
        <segment>
          <source>identifier contains Unicode character &lt;U+%0&gt; that is invisible in some environments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_zero_size_struct_union_in_extern_c">
        <segment>
          <source>%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</source>
          <target></target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>