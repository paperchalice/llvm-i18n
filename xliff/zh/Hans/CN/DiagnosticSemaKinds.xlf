<?xml version='1.0' encoding='UTF-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:2.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.2" srcLang="en-US" trgLang="zh-Hans-CN" xsi:schemaLocation="https://docs.oasis-open.org/xliff/xliff-core/v2.2/schemas/xliff_core_2.2.xsd">
  <file id="DiagnosticSema" original="clang/Basic/DiagnosticSemaKinds.inc">
    <notes>
      <note appliesTo="source">Automatically generated file, do not edit directly!</note>
    </notes>
    <group id="Sema">
      <unit id="2821" name="compat_cxx11_nonclass_type_friend">
        <segment state="initial">
          <source>non-class friend type %0 is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2822" name="compat_cxx11_static_data_member_in_union">
        <segment state="initial">
          <source>static data member %0 in union is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2823" name="compat_cxx11_templ_default_in_function_templ">
        <segment state="initial">
          <source>default template arguments for a function template are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2824" name="compat_cxx11_template_arg_extra_parens">
        <segment state="initial">
          <source>parentheses around address non-type template argument are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2825" name="compat_cxx11_typename_outside_of_template">
        <segment state="initial">
          <source>'typename' outside of a template is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2826" name="compat_cxx14_constexpr_body_multiple_return">
        <segment state="initial">
          <source>multiple return statements in constexpr function is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2827" name="compat_cxx14_constexpr_local_var">
        <segment state="initial">
          <source>variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2828" name="compat_cxx14_constexpr_type_definition">
        <segment state="initial">
          <source>type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2829" name="compat_cxx14_cxx14_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2830" name="compat_cxx14_variable_template">
        <segment state="initial">
          <source>variable templates are incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2831" name="compat_cxx17_decomp_decl">
        <segment state="initial">
          <source>decomposition declarations are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2832" name="compat_cxx17_inline_variable">
        <segment state="initial">
          <source>inline variables are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2833" name="compat_cxx20_adl_only_template_id">
        <segment state="initial">
          <source>use of function template name with no prior declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2834" name="compat_cxx20_constexpr_ctor_missing_init">
        <segment state="initial">
          <source>constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2835" name="compat_cxx20_constexpr_function_try_block">
        <segment state="initial">
          <source>function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2836" name="compat_cxx20_constexpr_local_var_no_init">
        <segment state="initial">
          <source>uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2837" name="compat_cxx20_constexpr_union_ctor_no_init">
        <segment state="initial">
          <source>constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2838" name="compat_cxx20_ctad_for_alias_templates">
        <segment state="initial">
          <source>class template argument deduction for alias templates is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2839" name="compat_cxx20_cxx20_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2840" name="compat_cxx20_decomp_decl_spec">
        <segment state="initial">
          <source>decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2841" name="compat_cxx20_implicit_typename">
        <segment state="initial">
          <source>missing 'typename' prior to dependent type name %0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2842" name="compat_cxx23_constexpr_static_var">
        <segment state="initial">
          <source>definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2843" name="compat_cxx23_cxx23_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2844" name="compat_cxx26_decomp_decl_cond">
        <segment state="initial">
          <source>structured binding declaration in a condition is incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2845" name="compat_pre_cxx11_nonclass_type_friend">
        <segment state="initial">
          <source>non-class friend type %0 is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2846" name="compat_pre_cxx11_static_data_member_in_union">
        <segment state="initial">
          <source>static data member %0 in union is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2847" name="compat_pre_cxx11_templ_default_in_function_templ">
        <segment state="initial">
          <source>default template arguments for a function template are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2848" name="compat_pre_cxx11_template_arg_extra_parens">
        <segment state="initial">
          <source>parentheses around address non-type template argument are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2849" name="compat_pre_cxx11_typename_outside_of_template">
        <segment state="initial">
          <source>'typename' outside of a template is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2850" name="compat_pre_cxx14_constexpr_body_multiple_return">
        <segment state="initial">
          <source>multiple return statements in constexpr function is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2851" name="compat_pre_cxx14_constexpr_local_var">
        <segment state="initial">
          <source>variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2852" name="compat_pre_cxx14_constexpr_type_definition">
        <segment state="initial">
          <source>type definition in a constexpr %select{function|constructor}0 is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2853" name="compat_pre_cxx14_cxx14_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2854" name="compat_pre_cxx14_variable_template">
        <segment state="initial">
          <source>variable templates are a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2855" name="compat_pre_cxx17_decomp_decl">
        <segment state="initial">
          <source>decomposition declarations are a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2856" name="compat_pre_cxx17_inline_variable">
        <segment state="initial">
          <source>inline variables are a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2857" name="compat_pre_cxx20_adl_only_template_id">
        <segment state="initial">
          <source>use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2858" name="compat_pre_cxx20_constexpr_ctor_missing_init">
        <segment state="initial">
          <source>constexpr constructor that does not initialize all members is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2859" name="compat_pre_cxx20_constexpr_function_try_block">
        <segment state="initial">
          <source>function try block in constexpr %select{function|constructor}0 is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2860" name="compat_pre_cxx20_constexpr_local_var_no_init">
        <segment state="initial">
          <source>uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2861" name="compat_pre_cxx20_constexpr_union_ctor_no_init">
        <segment state="initial">
          <source>constexpr union constructor that does not initialize any member is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2862" name="compat_pre_cxx20_ctad_for_alias_templates">
        <segment state="initial">
          <source>class template argument deduction for alias templates is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2863" name="compat_pre_cxx20_cxx20_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2864" name="compat_pre_cxx20_decomp_decl_spec">
        <segment state="initial">
          <source>decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2865" name="compat_pre_cxx20_implicit_typename">
        <segment state="initial">
          <source>missing 'typename' prior to dependent type name %0 is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2866" name="compat_pre_cxx23_constexpr_static_var">
        <segment state="initial">
          <source>definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2867" name="compat_pre_cxx23_cxx23_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2868" name="compat_pre_cxx26_decomp_decl_cond">
        <segment state="initial">
          <source>structured binding declaration in a condition is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2869" name="err_32_bit_builtin_64_bit_tgt">
        <segment state="initial">
          <source>this builtin is only available on 32-bit targets</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2870" name="err_64_bit_builtin_32_bit_tgt">
        <segment state="initial">
          <source>this builtin is only available on 64-bit targets</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2871" name="err_abi_tag_on_redeclaration">
        <segment state="initial">
          <source>cannot add 'abi_tag' attribute in a redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2872" name="err_abstract_type_in_decl">
        <segment state="initial">
          <source>%select{return|parameter|variable|field|instance variable|synthesized instance variable}0 type %1 is an abstract class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2873" name="err_acc_branch_in_out_compute_construct">
        <segment state="initial">
          <source>invalid %select{branch|return|throw}0 %select{out of|into}1 OpenACC Compute/Combined Construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2874" name="err_acc_clause_after_device_type">
        <segment state="initial">
          <source>OpenACC clause '%0' may not follow a '%1' clause in a '%2' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2875" name="err_acc_clause_appertainment">
        <segment state="initial">
          <source>OpenACC '%1' clause is not valid on '%0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2876" name="err_acc_clause_cannot_combine">
        <segment state="initial">
          <source>OpenACC clause '%0' may not appear on the same construct as a '%1' clause on a '%2' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2877" name="err_acc_clause_conflicts_prev_dev_type">
        <segment state="initial">
          <source>OpenACC '%0' clause applies to 'device_type' '%1', which conflicts with previous '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2878" name="err_acc_clause_in_clause_region">
        <segment state="initial">
          <source>loop with a '%0' clause may not exist in the region of a '%1' clause%select{| on a '%3' construct}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2879" name="err_acc_clause_multiple_loops">
        <segment state="initial">
          <source>more than one for-loop in a loop associated with OpenACC '%0' construct with a '%1' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2880" name="err_acc_clause_routine_cannot_combine_before_device_type">
        <segment state="initial">
          <source>OpenACC clause '%0' after 'device_type' clause on a 'routine' conflicts with the '%1' clause before the first 'device_type'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2881" name="err_acc_clause_routine_cannot_combine_same_device_type">
        <segment state="initial">
          <source>OpenACC clause '%0' on a 'routine' directive conflicts with the '%1' clause applying to the same 'device_type'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2882" name="err_acc_clause_routine_one_of_in_region">
        <segment state="initial">
          <source>OpenACC 'routine' construct must have at least one 'gang', 'seq', 'vector', or 'worker' clause that applies to each 'device_type'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2883" name="err_acc_clause_since_last_device_type">
        <segment state="initial">
          <source>OpenACC '%0' clause cannot appear more than once%select{| in a 'device_type' region}2 on a '%1' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2884" name="err_acc_collapse_loop_count">
        <segment state="initial">
          <source>OpenACC 'collapse' clause loop count must be a %select{constant expression|positive integer value, evaluated to %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2885" name="err_acc_construct_appertainment">
        <segment state="initial">
          <source>OpenACC construct '%0' cannot be used here; it can only be used in a statement context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2886" name="err_acc_construct_one_clause_of">
        <segment state="initial">
          <source>OpenACC '%0' construct must have at least one %1 clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2887" name="err_acc_decl_for_routine">
        <segment state="initial">
          <source>expected function or lambda declaration for 'routine' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2888" name="err_acc_declare_clause_at_global">
        <segment state="initial">
          <source>OpenACC '%0' clause on a 'declare' directive is not allowed at global or namespace scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2889" name="err_acc_declare_extern">
        <segment state="initial">
          <source>'extern' variable may not be referenced by '%0' clause on an OpenACC 'declare' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2890" name="err_acc_declare_required_clauses">
        <segment state="initial">
          <source>no valid clauses specified in OpenACC 'declare' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2891" name="err_acc_declare_same_scope">
        <segment state="initial">
          <source>variable appearing in '%0' clause of OpenACC 'declare' directive must be in the same scope as the directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2892" name="err_acc_device_type_multiple_archs">
        <segment state="initial">
          <source>OpenACC 'device_type' clause on a 'set' construct only permits one architecture</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2893" name="err_acc_duplicate_bind">
        <segment state="initial">
          <source>multiple 'routine' directives with 'bind' clauses are not permitted to refer to the same function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2894" name="err_acc_duplicate_clause_disallowed">
        <segment state="initial">
          <source>OpenACC '%1' clause cannot appear more than once on a '%0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2895" name="err_acc_duplicate_unnamed_bind">
        <segment state="initial">
          <source>OpenACC 'bind' clause on a declaration must bind to the same name as previous 'bind' clauses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2896" name="err_acc_gang_dim_value">
        <segment state="initial">
          <source>argument to 'gang' clause dimension must be %select{a constant expression|1, 2, or 3: evaluated to %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2897" name="err_acc_gang_multiple_elt">
        <segment state="initial">
          <source>OpenACC 'gang' clause may have at most one %select{unnamed or 'num'|'dim'|'static'}0 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2898" name="err_acc_gang_reduction_conflict">
        <segment state="initial">
          <source>%select{OpenACC 'gang' clause with a 'dim' value greater than 1|OpenACC 'reduction' clause}0 cannot appear on the same '%1' construct as a %select{'reduction' clause|'gang' clause with a 'dim' value greater than 1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2899" name="err_acc_gang_reduction_numgangs_conflict">
        <segment state="initial">
          <source>OpenACC '%0' clause cannot appear on the same '%2' construct as a '%1' clause %select{inside a compute construct with a|and a}3 'num_gangs' clause with more than one argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2900" name="err_acc_insufficient_loops">
        <segment state="initial">
          <source>'%0' clause specifies a loop count greater than the number of available loops</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2901" name="err_acc_int_arg_invalid">
        <segment state="initial">
          <source>'%0' argument on '%1' clause is not permitted on a%select{|n orphaned}2 '%3' construct%select{| associated with a '%5' compute construct}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2902" name="err_acc_int_expr_explicit_conversion">
        <segment state="initial">
          <source>OpenACC integer expression requires explicit conversion from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2903" name="err_acc_int_expr_incomplete_class_type">
        <segment state="initial">
          <source>OpenACC integer expression has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2904" name="err_acc_int_expr_multiple_conversions">
        <segment state="initial">
          <source>multiple conversions from expression type %0 to an integral type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2905" name="err_acc_int_expr_requires_integer">
        <segment state="initial">
          <source>OpenACC %select{clause '%1'|directive '%2'|sub-array bound}0 requires expression of integer type (%3 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2906" name="err_acc_intervening_code">
        <segment state="initial">
          <source>inner loops must be tightly nested inside a '%0' clause on a '%1' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2907" name="err_acc_invalid_atomic">
        <segment state="initial">
          <source>statement associated with OpenACC 'atomic%select{| %1}0' directive is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2908" name="err_acc_invalid_default_type">
        <segment state="initial">
          <source>invalid value %0 in '%1' clause; valid values are %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2909" name="err_acc_invalid_in_loop">
        <segment state="initial">
          <source>%select{OpenACC '%3' construct|while loop|do loop}0 cannot appear in intervening code of a '%1' with a '%2' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2910" name="err_acc_invalid_modifier">
        <segment state="initial">
          <source>OpenACC '%0' modifier not valid on '%1' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2911" name="err_acc_link_not_extern">
        <segment state="initial">
          <source>variable referenced by 'link' clause not in global or namespace scope must be marked 'extern'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2912" name="err_acc_loop_not_for_loop">
        <segment state="initial">
          <source>OpenACC '%0' construct can only be applied to a 'for' loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2913" name="err_acc_loop_not_monotonic">
        <segment state="initial">
          <source>OpenACC '%0' variable must monotonically increase or decrease ('++', '--', or compound assignment)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2914" name="err_acc_loop_terminating_condition">
        <segment state="initial">
          <source>OpenACC '%0' construct must have a terminating condition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2915" name="err_acc_loop_variable">
        <segment state="initial">
          <source>OpenACC '%0' construct must have initialization clause in canonical form ('var = init' or 'T var = init')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2916" name="err_acc_loop_variable_type">
        <segment state="initial">
          <source>loop variable of loop associated with an OpenACC '%0' construct must be of integer, pointer, or random-access-iterator type (is %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2917" name="err_acc_magic_static_in_routine">
        <segment state="initial">
          <source>function static variables are not permitted in functions to which an OpenACC 'routine' directive applies</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2918" name="err_acc_multiple_references">
        <segment state="initial">
          <source>variable referenced in '%0' clause of OpenACC 'declare' directive was already referenced</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2919" name="err_acc_not_a_var_ref">
        <segment state="initial">
          <source>OpenACC variable is not a valid variable name, sub-array, array element,%select{| member of a composite variable,}0 or composite variable member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2920" name="err_acc_not_a_var_ref_cache">
        <segment state="initial">
          <source>OpenACC variable in cache directive is not a valid sub-array or array element</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2921" name="err_acc_not_a_var_ref_use_device_declare">
        <segment state="initial">
          <source>OpenACC variable %select{in 'use_device' clause|on 'declare' construct}0 is not a valid variable name or array name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2922" name="err_acc_num_arg_conflict">
        <segment state="initial">
          <source>'%0' argument to '%1' clause not allowed on a '%2' construct%select{| associated with a '%4' construct}3 that has a '%5' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2923" name="err_acc_num_arg_conflict_reverse">
        <segment state="initial">
          <source>'%0' clause not allowed on a 'kernels loop' construct that has a '%1' clause with a%select{n| 'num'}2 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2924" name="err_acc_num_gangs_num_args">
        <segment state="initial">
          <source>%select{no|too many}0 integer expression arguments provided to OpenACC 'num_gangs' %select{|clause: '%1' directive expects maximum of %2, %3 were provided}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2925" name="err_acc_reduction_composite_member_type">
        <segment state="initial">
          <source>OpenACC 'reduction' composite variable must not have non-scalar field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2926" name="err_acc_reduction_composite_type">
        <segment state="initial">
          <source>OpenACC 'reduction' variable must be a composite of scalar types; %1 %select{is not a class or struct|is incomplete|is not an aggregate}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2927" name="err_acc_reduction_num_gangs_conflict">
        <segment state="initial">
          <source>OpenACC '%1' clause %select{|with more than 1 argument }0may not appear on a '%2' construct with a '%3' clause%select{ with more than 1 argument|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2928" name="err_acc_reduction_type">
        <segment state="initial">
          <source>OpenACC 'reduction' variable must be of scalar type, sub-array, or a composite of scalar types;%select{| sub-array base}1 type is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2929" name="err_acc_routine_not_func">
        <segment state="initial">
          <source>OpenACC routine name %0 does not name a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2930" name="err_acc_routine_overload_set">
        <segment state="initial">
          <source>OpenACC routine name %0 names a set of overloads</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2931" name="err_acc_size_expr_value">
        <segment state="initial">
          <source>OpenACC 'tile' clause size expression must be %select{an asterisk or a constant expression|positive integer value, evaluated to %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2932" name="err_acc_subarray_base_plus_length_out_of_range">
        <segment state="initial">
          <source>OpenACC sub-array specified range [%0:%1] would be out of the range of the subscripted array size of %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2933" name="err_acc_subarray_function_type">
        <segment state="initial">
          <source>OpenACC sub-array cannot be of function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2934" name="err_acc_subarray_incomplete_type">
        <segment state="initial">
          <source>OpenACC sub-array base is of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2935" name="err_acc_subarray_negative">
        <segment state="initial">
          <source>OpenACC sub-array %select{lower bound|length}0 evaluated to negative value %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2936" name="err_acc_subarray_no_length">
        <segment state="initial">
          <source>OpenACC sub-array length is unspecified and cannot be inferred because the subscripted value is %select{not an array|an array of unknown bound}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2937" name="err_acc_subarray_out_of_range">
        <segment state="initial">
          <source>OpenACC sub-array %select{lower bound|length}0 evaluated to a value (%1) that would be out of the range of the subscripted array size of %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2938" name="err_acc_typecheck_subarray_value">
        <segment state="initial">
          <source>OpenACC sub-array subscripted value is not an array or pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2939" name="err_acc_update_as_body">
        <segment state="initial">
          <source>OpenACC 'update' construct may not appear in place of the statement following a%select{n if statement| while statement| do statement| switch statement| label statement}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2940" name="err_acc_var_not_pointer_type">
        <segment state="initial">
          <source>expected pointer in '%0' clause, type is %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2941" name="err_access">
        <segment state="initial">
          <source>%1 is a %select{private|protected}0 member of %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2942" name="err_access_base_ctor">
        <segment state="initial">
          <source>%select{base class|inherited virtual base class}0 %1 has %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR*|}2constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2943" name="err_access_ctor">
        <segment state="initial">
          <source>calling a %select{private|protected}0 constructor of class %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2944" name="err_access_decl">
        <segment state="initial">
          <source>ISO C++11 does not allow access declarations; use using declarations instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2945" name="err_access_dtor">
        <segment state="initial">
          <source>calling a %select{private|protected}1 destructor of class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2946" name="err_access_dtor_base">
        <segment state="initial">
          <source>base class %0 has %select{private|protected}1 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2947" name="err_access_dtor_exception">
        <segment state="initial">
          <source>exception object of type %0 has %select{private|protected}1 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2948" name="err_access_dtor_field">
        <segment state="initial">
          <source>field of type %1 has %select{private|protected}2 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2949" name="err_access_dtor_ivar">
        <segment state="initial">
          <source>instance variable of type %0 has %select{private|protected}1 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2950" name="err_access_dtor_temp">
        <segment state="initial">
          <source>temporary of type %0 has %select{private|protected}1 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2951" name="err_access_dtor_var">
        <segment state="initial">
          <source>variable of type %1 has %select{private|protected}2 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2952" name="err_access_dtor_vbase">
        <segment state="initial">
          <source>inherited virtual base class %1 has %select{private|protected}2 destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2953" name="err_access_field_ctor">
        <segment state="initial">
          <source>field of type %0 has %select{private|protected}2 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}1constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2954" name="err_access_friend_function">
        <segment state="initial">
          <source>friend function %1 is a %select{private|protected}0 member of %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2955" name="err_access_lambda_capture">
        <segment state="initial">
          <source>capture of variable '%0' as type %1 calls %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}2constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2956" name="err_addr_ovl_ambiguous">
        <segment state="initial">
          <source>address of overloaded function %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2957" name="err_addr_ovl_no_qualifier">
        <segment state="initial">
          <source>cannot form member pointer of type %0 without '&amp;' and class name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2958" name="err_addr_ovl_no_viable">
        <segment state="initial">
          <source>address of overloaded function %0 does not match required type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2959" name="err_addr_ovl_not_func_ptrref">
        <segment state="initial">
          <source>address of overloaded function %0 cannot be converted to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2960" name="err_address_of_function_with_pass_object_size_params">
        <segment state="initial">
          <source>cannot take address of function %0 because parameter %1 has pass_object_size attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2961" name="err_address_space_mismatch_templ_inst">
        <segment state="initial">
          <source>conflicting address space qualifiers are provided between types %0 and %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2962" name="err_address_space_qualified_delete">
        <segment state="initial">
          <source>'delete' cannot delete objects of type %0 in address space '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2963" name="err_address_space_qualified_new">
        <segment state="initial">
          <source>'new' cannot allocate objects of type %0 in address space '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2964" name="err_addrof_function_constraints_not_satisfied">
        <segment state="initial">
          <source>cannot take address of function %0 because its constraints are not satisfied</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2965" name="err_addrof_function_disabled_by_enable_if_attr">
        <segment state="initial">
          <source>cannot take address of function %0 because it has one or more non-tautological enable_if conditions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2966" name="err_aix_attr_unsupported">
        <segment state="initial">
          <source>%0 attribute is not yet supported on AIX</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2967" name="err_alias_after_tentative">
        <segment state="initial">
          <source>alias definition of %0 after tentative definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2968" name="err_alias_is_definition">
        <segment state="initial">
          <source>definition %0 cannot also be an %select{alias|ifunc}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2969" name="err_alias_not_supported_on_darwin">
        <segment state="initial">
          <source>aliases are not supported on darwin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2970" name="err_alias_not_supported_on_nvptx">
        <segment state="initial">
          <source>CUDA older than 10.0 does not support .alias</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2971" name="err_alias_template_extra_headers">
        <segment state="initial">
          <source>extraneous template parameter list in alias template declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2972" name="err_align_value_attribute_argument_not_int">
        <segment state="initial">
          <source>'align_value' attribute requires integer constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2973" name="err_alignas_attribute_wrong_decl_type">
        <segment state="initial">
          <source>%0 attribute cannot be applied to %select{a function parameter|a variable with 'register' storage class|a 'catch' variable|a bit-field|an enumeration}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2974" name="err_alignas_mismatch">
        <segment state="initial">
          <source>redeclaration has different alignment requirement (%1 vs %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2975" name="err_alignas_missing_on_definition">
        <segment state="initial">
          <source>%0 must be specified on definition if it is specified on any declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2976" name="err_alignas_underaligned">
        <segment state="initial">
          <source>requested alignment is less than minimum alignment of %1 for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2977" name="err_aligned_allocation_unavailable">
        <segment state="initial">
          <source>aligned %select{allocation|deallocation}0 function of type '%1' is %select{only|not}4 available on %2%select{ %3 or newer|}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2978" name="err_aligned_attribute_argument_not_int">
        <segment state="initial">
          <source>'aligned' attribute requires integer constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2979" name="err_alignment_dependent_typedef_name">
        <segment state="initial">
          <source>requested alignment is dependent but declaration is not dependent</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2980" name="err_alignment_not_power_of_two">
        <segment state="initial">
          <source>requested alignment is not a power of 2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2981" name="err_alignment_too_big">
        <segment state="initial">
          <source>requested alignment must be %0 or smaller</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2982" name="err_alignment_too_small">
        <segment state="initial">
          <source>requested alignment must be %0 or greater</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2983" name="err_alignof_member_of_incomplete_type">
        <segment state="initial">
          <source>invalid application of 'alignof' to a field of a class still being defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2984" name="err_allocation_of_abstract_type">
        <segment state="initial">
          <source>allocating an object of abstract class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2985" name="err_altivec_empty_initializer">
        <segment state="initial">
          <source>expected initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2986" name="err_ambiguous_base_to_derived_cast">
        <segment state="initial">
          <source>ambiguous cast from base %0 to derived %1:%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2987" name="err_ambiguous_delete_operand">
        <segment state="initial">
          <source>ambiguous conversion of delete expression of type %0 to a pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2988" name="err_ambiguous_derived_to_base_conv">
        <segment state="initial">
          <source>ambiguous conversion from derived class %0 to base class %1:%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2989" name="err_ambiguous_destructor">
        <segment state="initial">
          <source>destructor of class %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2990" name="err_ambiguous_inherited_constructor">
        <segment state="initial">
          <source>constructor of %0 inherited from multiple base class subobjects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2991" name="err_ambiguous_member_multiple_subobject_types">
        <segment state="initial">
          <source>member %0 found in multiple base classes of different types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2992" name="err_ambiguous_member_multiple_subobjects">
        <segment state="initial">
          <source>non-static member %0 found in multiple base-class subobjects of type %1:%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2993" name="err_ambiguous_memptr_conv">
        <segment state="initial">
          <source>ambiguous conversion from pointer to member of %select{base|derived}0 class %1 to pointer to member of %select{derived|base}0 class %2:%3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2994" name="err_ambiguous_reference">
        <segment state="initial">
          <source>reference to %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2995" name="err_ambiguous_suitable_delete_member_function_found">
        <segment state="initial">
          <source>multiple suitable %0 functions in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2996" name="err_ambiguous_tag_hiding">
        <segment state="initial">
          <source>a type named %0 is hidden by a declaration in a different namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2997" name="err_amdgcn_load_lds_size_invalid_value">
        <segment state="initial">
          <source>invalid size value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2998" name="err_anon_bitfield_has_negative_width">
        <segment state="initial">
          <source>anonymous bit-field has negative width (%0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="2999" name="err_anon_bitfield_qualifiers">
        <segment state="initial">
          <source>anonymous bit-field cannot have qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3000" name="err_anonymous_property">
        <segment state="initial">
          <source>anonymous property is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3001" name="err_anonymous_record_bad_member">
        <segment state="initial">
          <source>anonymous %select{struct|union}0 can only contain non-static data members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3002" name="err_anonymous_record_member_redecl">
        <segment state="initial">
          <source>member of anonymous %select{struct|union}0 redeclares %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3003" name="err_anonymous_record_nonpublic_member">
        <segment state="initial">
          <source>anonymous %select{struct|union}0 cannot contain a %select{private|protected}1 data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3004" name="err_anonymous_record_with_function">
        <segment state="initial">
          <source>functions cannot be declared in an anonymous %select{struct|union}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3005" name="err_anonymous_record_with_static">
        <segment state="initial">
          <source>static members cannot be declared in an anonymous %select{struct|union}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3006" name="err_anonymous_record_with_type">
        <segment state="initial">
          <source>types cannot be declared in an anonymous %select{struct|union}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3007" name="err_anonymous_struct_not_member">
        <segment state="initial">
          <source>anonymous %select{structs|structs and classes}0 must be %select{struct or union|class}0 members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3008" name="err_anonymous_union_not_static">
        <segment state="initial">
          <source>anonymous unions at namespace or global scope must be declared 'static'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3009" name="err_anonymous_union_with_storage_spec">
        <segment state="initial">
          <source>anonymous union at class scope must not have a storage specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3010" name="err_anyx86_interrupt_attribute">
        <segment state="initial">
          <source>%select{x86|x86-64}0 'interrupt' attribute only applies to functions that have %select{a 'void' return type|only a pointer parameter optionally followed by an integer parameter|a pointer as the first parameter|a %2 type as the second parameter}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3011" name="err_anyx86_interrupt_called">
        <segment state="initial">
          <source>interrupt service routine cannot be called directly</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3012" name="err_arc_array_param_no_ownership">
        <segment state="initial">
          <source>must explicitly describe intended ownership of an object array parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3013" name="err_arc_assign_property_ownership">
        <segment state="initial">
          <source>existing instance variable %1 for property %0 with %select{unsafe_unretained|assign}2 attribute must be __unsafe_unretained</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3014" name="err_arc_atomic_ownership">
        <segment state="initial">
          <source>cannot perform atomic operation on a pointer to type %0: type has non-trivial ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3015" name="err_arc_autoreleasing_capture">
        <segment state="initial">
          <source>cannot capture __autoreleasing variable in a %select{block|lambda by copy}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3016" name="err_arc_autoreleasing_var">
        <segment state="initial">
          <source>%select{__block variables|global variables|fields|instance variables}0 cannot have __autoreleasing ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3017" name="err_arc_bridge_cast_incompatible">
        <segment state="initial">
          <source>incompatible types casting %0 to %1 with a %select{__bridge|__bridge_transfer|__bridge_retained}2 cast</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3018" name="err_arc_bridge_cast_wrong_kind">
        <segment state="initial">
          <source>cast of %select{Objective-C|block|C}0 pointer type %1 to %select{Objective-C|block|C}2 pointer type %3 cannot use %select{__bridge|__bridge_transfer|__bridge_retained}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3019" name="err_arc_cast_requires_bridge">
        <segment state="initial">
          <source>%select{cast|implicit conversion}0 of %select{Objective-C|block|C}1 pointer type %2 to %select{Objective-C|block|C}3 pointer type %4 requires a bridged cast</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3020" name="err_arc_collection_forward">
        <segment state="initial">
          <source>collection expression type %0 is a forward declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3021" name="err_arc_convesion_of_weak_unavailable">
        <segment state="initial">
          <source>%select{implicit conversion|cast}0 of weak-unavailable object of type %1 to a __weak object of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3022" name="err_arc_gained_method_convention">
        <segment state="initial">
          <source>method implementation does not match its declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3023" name="err_arc_illegal_explicit_message">
        <segment state="initial">
          <source>ARC forbids explicit message send of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3024" name="err_arc_illegal_method_def">
        <segment state="initial">
          <source>ARC forbids %select{implementation|synthesis}0 of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3025" name="err_arc_illegal_selector">
        <segment state="initial">
          <source>ARC forbids use of %0 in a @selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3026" name="err_arc_inconsistent_property_ownership">
        <segment state="initial">
          <source>%select{|unsafe_unretained|strong|weak}1 property %0 may not also be declared %select{|__unsafe_unretained|__strong|__weak|__autoreleasing}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3027" name="err_arc_indirect_no_ownership">
        <segment state="initial">
          <source>%select{pointer|reference}1 to non-const type %0 with no explicit ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3028" name="err_arc_init_method_unrelated_result_type">
        <segment state="initial">
          <source>init methods must return a type related to the receiver type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3029" name="err_arc_lost_method_convention">
        <segment state="initial">
          <source>method was declared as %select{an 'alloc'|a 'copy'|an 'init'|a 'new'}0 method, but its implementation doesn't match because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3030" name="err_arc_may_not_respond">
        <segment state="initial">
          <source>no visible @interface for %0 declares the selector %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3031" name="err_arc_method_not_found">
        <segment state="initial">
          <source>no known %select{instance|class}1 method for selector %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3032" name="err_arc_mismatched_cast">
        <segment state="initial">
          <source>%select{implicit conversion|cast}0 of %select{%2|a non-Objective-C pointer type %2|a block pointer|an Objective-C pointer|an indirect pointer to an Objective-C pointer}1 to %3 is disallowed with ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3033" name="err_arc_multiple_method_decl">
        <segment state="initial">
          <source>multiple methods named %0 found with mismatched result, parameter type or attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3034" name="err_arc_new_array_without_ownership">
        <segment state="initial">
          <source>'new' cannot allocate an array of %0 with no explicit ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3035" name="err_arc_nolifetime_behavior">
        <segment state="initial">
          <source>explicit ownership qualifier on cast result has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3036" name="err_arc_nonlocal_writeback">
        <segment state="initial">
          <source>passing address of %select{non-local|non-scalar}0 object to __autoreleasing parameter for write-back</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3037" name="err_arc_objc_property_default_assign_on_object">
        <segment state="initial">
          <source>ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3038" name="err_arc_perform_selector_retains">
        <segment state="initial">
          <source>performSelector names a selector which retains the object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3039" name="err_arc_pseudo_dtor_inconstant_quals">
        <segment state="initial">
          <source>pseudo-destructor destroys object of type %0 with inconsistently-qualified type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3040" name="err_arc_receiver_forward_class">
        <segment state="initial">
          <source>receiver %0 for class message is a forward declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3041" name="err_arc_receiver_forward_instance">
        <segment state="initial">
          <source>receiver type %0 for instance message is a forward declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3042" name="err_arc_strong_property_ownership">
        <segment state="initial">
          <source>existing instance variable %1 for strong property %0 may not be %select{|__unsafe_unretained||__weak}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3043" name="err_arc_thread_ownership">
        <segment state="initial">
          <source>thread-local variable has non-trivial ownership: type is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3044" name="err_arc_typecheck_convert_incompatible_pointer">
        <segment state="initial">
          <source>incompatible pointer types passing retainable parameter of type %0to a CF function expecting %1 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3045" name="err_arc_unsupported_weak_class">
        <segment state="initial">
          <source>class is incompatible with __weak references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3046" name="err_arc_unused_init_message">
        <segment state="initial">
          <source>the result of a delegate init call must be immediately returned or assigned to 'self'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3047" name="err_arc_weak_disabled">
        <segment state="initial">
          <source>cannot create __weak reference in file using manual reference counting</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3048" name="err_arc_weak_ivar_access">
        <segment state="initial">
          <source>dereferencing a __weak pointer is not allowed due to possible null value caused by race condition, assign it to strong variable first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3049" name="err_arc_weak_no_runtime">
        <segment state="initial">
          <source>cannot create __weak reference because the current deployment target does not support weak references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3050" name="err_arc_weak_unavailable_assign">
        <segment state="initial">
          <source>assignment of a weak-unavailable object to a __weak object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3051" name="err_arc_weak_unavailable_property">
        <segment state="initial">
          <source>synthesizing __weak instance variable of type %0, which does not support weak references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3052" name="err_arg_is_not_destructurable">
        <segment state="initial">
          <source>type %0 cannot be decomposed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3053" name="err_arg_with_address_space">
        <segment state="initial">
          <source>parameter may not be qualified with an address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3054" name="err_argument_invalid_range">
        <segment state="initial">
          <source>argument value %0 is outside the valid range [%1, %2]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3055" name="err_argument_not_contiguous_bit_field">
        <segment state="initial">
          <source>argument %0 value should represent a contiguous bit field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3056" name="err_argument_not_multiple">
        <segment state="initial">
          <source>argument should be a multiple of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3057" name="err_argument_not_power_of_2">
        <segment state="initial">
          <source>argument should be a power of 2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3058" name="err_argument_not_shifted_byte">
        <segment state="initial">
          <source>argument should be an 8-bit value shifted by a multiple of 8 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3059" name="err_argument_not_shifted_byte_or_xxff">
        <segment state="initial">
          <source>argument should be an 8-bit value shifted by a multiple of 8 bits, or in the form 0x??FF</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3060" name="err_arith_conv_enum_float_cxx26">
        <segment state="initial">
          <source>invalid %select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3061" name="err_arithmetic_nonfragile_interface">
        <segment state="initial">
          <source>arithmetic on pointer to interface %0, which is not a constant size for this architecture and platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3062" name="err_arm_interrupt_called">
        <segment state="initial">
          <source>interrupt service routine cannot be called directly</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3063" name="err_arm_invalid_coproc">
        <segment state="initial">
          <source>coprocessor %0 must be configured as %select{GCP|CDE}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3064" name="err_arm_invalid_specialreg">
        <segment state="initial">
          <source>invalid special register for builtin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3065" name="err_array_designator_empty_range">
        <segment state="initial">
          <source>array designator range [%0, %1] is empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3066" name="err_array_designator_negative">
        <segment state="initial">
          <source>array designator value '%0' is negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3067" name="err_array_designator_non_array">
        <segment state="initial">
          <source>array designator cannot initialize non-array type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3068" name="err_array_designator_too_large">
        <segment state="initial">
          <source>array designator index (%0) exceeds array bounds (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3069" name="err_array_element_alignment">
        <segment state="initial">
          <source>size of array element of type %0 (%1 bytes) isn't a multiple of its alignment (%2 bytes)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3070" name="err_array_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>array has %select{incomplete|sizeless}0 element type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3071" name="err_array_init_different_type">
        <segment state="initial">
          <source>cannot initialize array %diff{of type $ with array of type $|with different type of array}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3072" name="err_array_init_incompat_wide_string_into_wchar">
        <segment state="initial">
          <source>initializing wide char array with incompatible wide string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3073" name="err_array_init_narrow_string_into_wchar">
        <segment state="initial">
          <source>initializing wide char array with non-wide string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3074" name="err_array_init_non_constant_array">
        <segment state="initial">
          <source>cannot initialize array %diff{of type $ with non-constant array of type $|with different type of array}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3075" name="err_array_init_not_init_list">
        <segment state="initial">
          <source>array initializer must be an initializer list%select{| or string literal| or wide string literal}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3076" name="err_array_init_plain_string_into_char8_t">
        <segment state="initial">
          <source>initializing 'char8_t' array with plain string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3077" name="err_array_init_utf8_string_into_char">
        <segment state="initial">
          <source>initialization of %select{|signed }0char array with UTF-8 string literal is not permitted by %select{'-fchar8_t'|C++20}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3078" name="err_array_init_wide_string_into_char">
        <segment state="initial">
          <source>initializing char array with wide string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3079" name="err_array_new_needs_size">
        <segment state="initial">
          <source>array size must be specified in new expression with no initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3080" name="err_array_of_abstract_type">
        <segment state="initial">
          <source>array of abstract class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3081" name="err_array_section_does_not_specify_contiguous_storage">
        <segment state="initial">
          <source>array section does not specify contiguous storage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3082" name="err_array_section_does_not_specify_length">
        <segment state="initial">
          <source>array section does not specify length for outermost dimension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3083" name="err_array_section_use">
        <segment state="initial">
          <source>%select{OpenACC sub-array|OpenMP array section}0 is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3084" name="err_array_size_ambiguous_conversion">
        <segment state="initial">
          <source>ambiguous conversion of array size expression of type %0 to an integral or enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3085" name="err_array_size_explicit_conversion">
        <segment state="initial">
          <source>array size expression of type %0 requires explicit conversion to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3086" name="err_array_size_incomplete_type">
        <segment state="initial">
          <source>array size expression has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3087" name="err_array_size_non_int">
        <segment state="initial">
          <source>size of array has non-integer type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3088" name="err_array_size_not_integral">
        <segment state="initial">
          <source>array size expression must have integral or %select{|unscoped }0enumeration type, not %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3089" name="err_array_star_in_function_definition">
        <segment state="initial">
          <source>variable length array must be bound in function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3090" name="err_array_star_outside_prototype">
        <segment state="initial">
          <source>star modifier used outside of function prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3091" name="err_array_static_not_outermost">
        <segment state="initial">
          <source>%0 used in non-outermost array type derivation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3092" name="err_array_static_outside_prototype">
        <segment state="initial">
          <source>%0 used in array declarator outside of function prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3093" name="err_array_too_large">
        <segment state="initial">
          <source>array is too large (%0 elements)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3094" name="err_as_qualified_auto_decl">
        <segment state="initial">
          <source>automatic variable qualified with an%select{| invalid}0 address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3095" name="err_asm_incomplete_type">
        <segment state="initial">
          <source>asm operand has incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3096" name="err_asm_input_duplicate_match">
        <segment state="initial">
          <source>more than one input constraint matches the same output '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3097" name="err_asm_invalid_global_var_reg">
        <segment state="initial">
          <source>register '%0' unsuitable for global register variables on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3098" name="err_asm_invalid_input_constraint">
        <segment state="initial">
          <source>invalid input constraint '%0' in asm</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3099" name="err_asm_invalid_input_size">
        <segment state="initial">
          <source>invalid input size for constraint '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3100" name="err_asm_invalid_lvalue_in_input">
        <segment state="initial">
          <source>invalid lvalue in asm input for constraint '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3101" name="err_asm_invalid_lvalue_in_output">
        <segment state="initial">
          <source>invalid lvalue in asm output</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3102" name="err_asm_invalid_output_constraint">
        <segment state="initial">
          <source>invalid output constraint '%0' in asm</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3103" name="err_asm_invalid_output_size">
        <segment state="initial">
          <source>invalid output size for constraint '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3104" name="err_asm_naked_parm_ref">
        <segment state="initial">
          <source>parameter references not allowed in naked functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3105" name="err_asm_naked_this_ref">
        <segment state="initial">
          <source>'this' pointer references not allowed in naked functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3106" name="err_asm_non_addr_value_in_memory_constraint">
        <segment state="initial">
          <source>reference to a %select{bit-field|vector element|global register variable}0 in asm %select{input|output}1 with a memory constraint '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3107" name="err_asm_operand_empty_string">
        <segment state="initial">
          <source>cannot use an empty string literal in 'asm'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3108" name="err_asm_pmf_through_constraint_not_permitted">
        <segment state="initial">
          <source>cannot pass a pointer-to-member through register-constrained inline assembly parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3109" name="err_asm_register_size_mismatch">
        <segment state="initial">
          <source>size of register '%0' does not match variable size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3110" name="err_asm_tying_incompatible_types">
        <segment state="initial">
          <source>unsupported inline asm: input with type %diff{$ matching output with type $|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3111" name="err_asm_unexpected_constraint_alternatives">
        <segment state="initial">
          <source>asm constraint has an unexpected number of alternatives: %0 vs %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3112" name="err_asm_unknown_register_name">
        <segment state="initial">
          <source>unknown register name '%0' in asm</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3113" name="err_asm_unsupported_register_type">
        <segment state="initial">
          <source>unsupported type for named register variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3114" name="err_asm_unwind_and_goto">
        <segment state="initial">
          <source>unwind clobber cannot be used with asm goto</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3115" name="err_assoc_compatible_types">
        <segment state="initial">
          <source>type %0 in generic association compatible with previously specified type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3116" name="err_assoc_type_nonobject">
        <segment state="initial">
          <source>type %0 in generic association not an object type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3117" name="err_assoc_type_variably_modified">
        <segment state="initial">
          <source>type %0 in generic association is a variably modified type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3118" name="err_atdef_nonfragile_interface">
        <segment state="initial">
          <source>use of @defs is not supported on this architecture and platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3119" name="err_atomic_builtin_bit_int_prohibit">
        <segment state="initial">
          <source>argument to atomic builtin of type '_BitInt' is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3120" name="err_atomic_builtin_cannot_be_const">
        <segment state="initial">
          <source>address argument to atomic builtin cannot be const-qualified (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3121" name="err_atomic_builtin_ext_int_size">
        <segment state="initial">
          <source>atomic memory operand must have a power-of-two size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3122" name="err_atomic_builtin_must_be_pointer">
        <segment state="initial">
          <source>address argument to atomic builtin must be a pointer %select{|to a non-zero-sized object }1(%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3123" name="err_atomic_builtin_must_be_pointer_intfltptr">
        <segment state="initial">
          <source>address argument to atomic builtin must be a pointer to integer, floating-point or pointer (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3124" name="err_atomic_builtin_must_be_pointer_intptr">
        <segment state="initial">
          <source>address argument to atomic builtin must be a pointer to integer or pointer (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3125" name="err_atomic_builtin_pointer_size">
        <segment state="initial">
          <source>address argument to atomic builtin must be a pointer to 1,2,4,8 or 16 byte type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3126" name="err_atomic_exclusive_builtin_pointer_size">
        <segment state="initial">
          <source>address argument to load or store exclusive builtin must be a pointer to 1,2,4 or 8 byte type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3127" name="err_atomic_load_store_uses_lib">
        <segment state="initial">
          <source>atomic %select{load|store}0 requires runtime support that is not available for this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3128" name="err_atomic_op_has_invalid_sync_scope">
        <segment state="initial">
          <source>synchronization scope argument to atomic operation is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3129" name="err_atomic_op_needs_atomic">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to _Atomic type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3130" name="err_atomic_op_needs_atomic_int">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to %select{|atomic }0integer (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3131" name="err_atomic_op_needs_atomic_int_or_fp">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to %select{|atomic }0integer or supported floating point type (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3132" name="err_atomic_op_needs_atomic_int_or_ptr">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to %select{|atomic }0integer or pointer (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3133" name="err_atomic_op_needs_atomic_int_ptr_or_fp">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to %select{|atomic }0integer, pointer or supported floating point type (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3134" name="err_atomic_op_needs_non_address_discriminated_pointer">
        <segment state="initial">
          <source>address argument to %select{atomic|__sync}0 operation must be a pointer to a non address discriminated type (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3135" name="err_atomic_op_needs_non_const_atomic">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to non-%select{const|constant}0 _Atomic type (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3136" name="err_atomic_op_needs_non_const_pointer">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to non-const type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3137" name="err_atomic_op_needs_trivial_copy">
        <segment state="initial">
          <source>address argument to atomic operation must be a pointer to a trivially-copyable type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3138" name="err_atomic_property_nontrivial_assign_op">
        <segment state="initial">
          <source>atomic property of reference type %0 cannot have non-trivial assignment operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3139" name="err_atomic_specifier_bad_type">
        <segment state="initial">
          <source>_Atomic cannot be applied to %select{incomplete |array |function |reference |atomic |qualified |sizeless ||integer |}0type %1 %select{|||||||which is not trivially copyable||in C23}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3140" name="err_atomic_unsupported">
        <segment state="initial">
          <source>atomic types are not supported in '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3141" name="err_atprotocol_protocol">
        <segment state="initial">
          <source>@protocol is using a forward protocol declaration of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3142" name="err_attr_codemodel_arg">
        <segment state="initial">
          <source>code model '%0' is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3143" name="err_attr_cond_never_constant_expr">
        <segment state="initial">
          <source>%0 attribute expression never produces a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3144" name="err_attr_objc_ownership_redundant">
        <segment state="initial">
          <source>the type %0 is already explicitly ownership-qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3145" name="err_attr_swift_error_no_error_parameter">
        <segment state="initial">
          <source>%0 attribute can only be applied to a %select{function|method}1 with an error parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3146" name="err_attr_swift_error_return_type">
        <segment state="initial">
          <source>%0 attribute with '%1' convention can only be applied to a %select{function|method}2 returning %select{an integral type|a pointer}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3147" name="err_attr_tlsmodel_arg">
        <segment state="initial">
          <source>tls_model must be "global-dynamic", "local-dynamic", "initial-exec" or "local-exec"</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3148" name="err_attribute_address_function_type">
        <segment state="initial">
          <source>function type may not be qualified with an address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3149" name="err_attribute_address_multiple_qualifiers">
        <segment state="initial">
          <source>multiple address spaces specified for type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3150" name="err_attribute_address_space_negative">
        <segment state="initial">
          <source>address space is negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3151" name="err_attribute_address_space_too_high">
        <segment state="initial">
          <source>address space is larger than the maximum supported (%0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3152" name="err_attribute_aligned_too_great">
        <segment state="initial">
          <source>requested alignment must be %0 bytes or smaller</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3153" name="err_attribute_argument_invalid">
        <segment state="initial">
          <source>%0 attribute argument is invalid: %select{max must be 0 since min is 0|min must not be greater than max}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3154" name="err_attribute_argument_is_zero">
        <segment state="initial">
          <source>%0 attribute must be greater than 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3155" name="err_attribute_argument_n_type">
        <segment state="initial">
          <source>%0 attribute requires parameter %1 to be %select{int or bool|an integer constant|a string|an identifier|a constant expression|a builtin function}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3156" name="err_attribute_argument_out_of_bounds">
        <segment state="initial">
          <source>%0 attribute parameter %1 is out of bounds</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3157" name="err_attribute_argument_out_of_bounds_extra_info">
        <segment state="initial">
          <source>%0 attribute parameter %1 is out of bounds: %plural{0:no parameters to index into|1:can only be 1, since there is one parameter|:must be between 1 and %2}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3158" name="err_attribute_argument_out_of_range">
        <segment state="initial">
          <source>%0 attribute requires integer constant between %1 and %2 inclusive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3159" name="err_attribute_argument_type">
        <segment state="initial">
          <source>%0 attribute requires %select{int or bool|an integer constant|a string|an identifier}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3160" name="err_attribute_arm_builtin_alias">
        <segment state="initial">
          <source>'__clang_arm_builtin_alias' attribute can only be applied to an ARM builtin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3161" name="err_attribute_arm_feature_sve_bits_unsupported">
        <segment state="initial">
          <source>%0 is only supported when '-msve-vector-bits=&lt;bits&gt;' is specified with a value of 128, 256, 512, 1024 or 2048</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3162" name="err_attribute_arm_mve_polymorphism">
        <segment state="initial">
          <source>'__clang_arm_mve_strict_polymorphism' attribute can only be applied to an MVE/NEON vector type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3163" name="err_attribute_arm_sm_incompat_builtin">
        <segment state="initial">
          <source>builtin can only be called from a %0 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3164" name="err_attribute_bad_neon_vector_size">
        <segment state="initial">
          <source>Neon vector size must be 64 or 128 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3165" name="err_attribute_bad_rvv_vector_size">
        <segment state="initial">
          <source>invalid RVV vector size '%0', expected size is '%1' based on LMUL of type and '-mrvv-vector-bits'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3166" name="err_attribute_bad_sve_vector_size">
        <segment state="initial">
          <source>invalid SVE vector size '%0', must match value set by '-msve-vector-bits' ('%1')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3167" name="err_attribute_bounds_for_function">
        <segment state="initial">
          <source>%0 attribute references parameter %1, but the function %2 has only %3 parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3168" name="err_attribute_builtin_alias">
        <segment state="initial">
          <source>%0 attribute can only be applied to a ARM, HLSL or RISC-V builtin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3169" name="err_attribute_cleanup_arg_not_function">
        <segment state="initial">
          <source>'cleanup' argument %select{|%1 |%1 }0is not a %select{||single }0function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3170" name="err_attribute_cleanup_func_arg_incompatible_type">
        <segment state="initial">
          <source>'cleanup' function %0 parameter has %diff{type $ which is incompatible with type $|incompatible type}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3171" name="err_attribute_cleanup_func_must_take_one_arg">
        <segment state="initial">
          <source>'cleanup' function %0 must take 1 parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3172" name="err_attribute_dll_ambiguous_default_ctor">
        <segment state="initial">
          <source>'__declspec(dllexport)' cannot be applied to more than one default constructor in %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3173" name="err_attribute_dll_deleted">
        <segment state="initial">
          <source>attribute %q0 cannot be applied to a deleted function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3174" name="err_attribute_dll_lambda">
        <segment state="initial">
          <source>lambda cannot be declared %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3175" name="err_attribute_dll_member_of_dll_class">
        <segment state="initial">
          <source>attribute %q0 cannot be applied to member of %q1 class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3176" name="err_attribute_dll_not_extern">
        <segment state="initial">
          <source>%q0 must have external linkage when declared %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3177" name="err_attribute_dll_redeclaration">
        <segment state="initial">
          <source>redeclaration of %q0 cannot add %q1 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3178" name="err_attribute_dll_thread_local">
        <segment state="initial">
          <source>%q0 cannot be thread local when declared %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3179" name="err_attribute_dllimport_data_definition">
        <segment state="initial">
          <source>definition of dllimport data</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3180" name="err_attribute_dllimport_function_definition">
        <segment state="initial">
          <source>dllimport cannot be applied to non-inline function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3181" name="err_attribute_dllimport_function_specialization_definition">
        <segment state="initial">
          <source>cannot define non-inline dllimport template specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3182" name="err_attribute_dllimport_static_field_definition">
        <segment state="initial">
          <source>definition of dllimport static field not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3183" name="err_attribute_integers_only">
        <segment state="initial">
          <source>%0 attribute argument may only refer to a function parameter of integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3184" name="err_attribute_invalid_argument">
        <segment state="initial">
          <source>%select{a reference type|an array type|a non-vector or non-vectorizable scalar type}0 is an invalid argument to attribute %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3185" name="err_attribute_invalid_atomic_argument">
        <segment state="initial">
          <source>invalid argument '%0' to atomic attribute; valid options are: 'remote_memory', 'fine_grained_memory', 'ignore_denormal_mode' (optionally prefixed with 'no_')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3186" name="err_attribute_invalid_bitint_vector_type">
        <segment state="initial">
          <source>'_BitInt' %select{vector|matrix}0 element width must be a power of 2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3187" name="err_attribute_invalid_implicit_this_argument">
        <segment state="initial">
          <source>%0 attribute is invalid for the implicit this argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3188" name="err_attribute_invalid_matrix_type">
        <segment state="initial">
          <source>invalid matrix element type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3189" name="err_attribute_invalid_on_decl">
        <segment state="initial">
          <source>%0%select{ attribute|}1 cannot be applied to a declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3190" name="err_attribute_invalid_rvv_type">
        <segment state="initial">
          <source>%0 attribute applied to non-RVV type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3191" name="err_attribute_invalid_size">
        <segment state="initial">
          <source>vector size not an integral multiple of component size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3192" name="err_attribute_invalid_sve_type">
        <segment state="initial">
          <source>%0 attribute applied to non-SVE type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3193" name="err_attribute_invalid_vector_type">
        <segment state="initial">
          <source>invalid vector element type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3194" name="err_attribute_malloc_arg_not_function">
        <segment state="initial">
          <source>'malloc' argument %select{for deallocator |%1 |%1 }0is not a %select{||single }0function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3195" name="err_attribute_malloc_arg_not_function_with_pointer_arg">
        <segment state="initial">
          <source>'malloc' argument %0 must take a pointer type as its first argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3196" name="err_attribute_malloc_arg_refers_to_non_pointer_type">
        <segment state="initial">
          <source>'malloc' argument '%0' refers to non-pointer type %1 of %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3197" name="err_attribute_missing_on_first_decl">
        <segment state="initial">
          <source>%0 attribute does not appear on the first declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3198" name="err_attribute_multiple_objc_gc">
        <segment state="initial">
          <source>multiple garbage collection attributes specified for type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3199" name="err_attribute_no_builtin_on_defaulted_deleted_function">
        <segment state="initial">
          <source>%0 attribute has no effect on defaulted or deleted functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3200" name="err_attribute_no_builtin_on_non_definition">
        <segment state="initial">
          <source>%0 attribute is permitted on definitions only</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3201" name="err_attribute_no_builtin_wildcard_or_builtin_name">
        <segment state="initial">
          <source>empty %0 cannot be composed with named ones</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3202" name="err_attribute_no_member_function">
        <segment state="initial">
          <source>%0 attribute cannot be applied to non-static member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3203" name="err_attribute_no_member_pointers">
        <segment state="initial">
          <source>%0 attribute cannot be used with pointers to members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3204" name="err_attribute_not_clinkage">
        <segment state="initial">
          <source>function type with %0 attribute must have C linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3205" name="err_attribute_not_supported_in_lang">
        <segment state="initial">
          <source>%0 attribute is not supported in %select{C|C++|Objective-C}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3206" name="err_attribute_not_supported_on_arch">
        <segment state="initial">
          <source>%0 attribute is not supported on '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3207" name="err_attribute_only_once_per_parameter">
        <segment state="initial">
          <source>%0 attribute can only be applied once per parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3208" name="err_attribute_output_parameter">
        <segment state="initial">
          <source>attribute only applies to output parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3209" name="err_attribute_overloadable_mismatch">
        <segment state="initial">
          <source>redeclaration of %0 must %select{not |}1have the 'overloadable' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3210" name="err_attribute_overloadable_multiple_unmarked_overloads">
        <segment state="initial">
          <source>at most one overload for a given name may lack the 'overloadable' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3211" name="err_attribute_overloadable_no_prototype">
        <segment state="initial">
          <source>'overloadable' function %0 must have a prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3212" name="err_attribute_parameter_types">
        <segment state="initial">
          <source>%0 attribute parameter types do not match: parameter %1 of function %2 has type %3, but parameter %4 of function %5 has type %6</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3213" name="err_attribute_patchable_function_entry_invalid_section">
        <segment state="initial">
          <source>section argument to 'patchable_function_entry' attribute is not valid for this target: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3214" name="err_attribute_pointers_only">
        <segment state="initial">
          <source>%0 attribute only applies to%select{| constant}1 pointer arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3215" name="err_attribute_power_of_two_in_range">
        <segment state="initial">
          <source>%0 attribute requires an integer argument which is a constant power of two between %1 and %2 inclusive; provided argument was %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3216" name="err_attribute_preferred_name_arg_invalid">
        <segment state="initial">
          <source>argument %0 to 'preferred_name' attribute is not a typedef for a specialization of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3217" name="err_attribute_regparm_invalid_number">
        <segment state="initial">
          <source>'regparm' parameter must be between 0 and %0 inclusive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3218" name="err_attribute_regparm_wrong_platform">
        <segment state="initial">
          <source>'regparm' is not valid on this platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3219" name="err_attribute_requires_opencl_version">
        <segment state="initial">
          <source>attribute %0 is supported in the OpenCL version %1%select{| onwards}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3220" name="err_attribute_requires_positive_integer">
        <segment state="initial">
          <source>%0 attribute requires a %select{positive|non-negative}1 integral compile time constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3221" name="err_attribute_riscv_rvv_bits_unsupported">
        <segment state="initial">
          <source>%0 is only supported when '-mrvv-vector-bits=&lt;bits&gt;' is specified with a value of "zvl" or a power 2 in the range [64,65536]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3222" name="err_attribute_section_invalid_for_target">
        <segment state="initial">
          <source>argument to %select{'code_seg'|'section'}1 attribute is not valid for this target: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3223" name="err_attribute_selectany_non_extern_data">
        <segment state="initial">
          <source>'selectany' can only be applied to data items with external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3224" name="err_attribute_sentinel_less_than_zero">
        <segment state="initial">
          <source>'sentinel' parameter 1 less than zero</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3225" name="err_attribute_sentinel_not_zero_or_one">
        <segment state="initial">
          <source>'sentinel' parameter 2 not 0 or 1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3226" name="err_attribute_size_too_large">
        <segment state="initial">
          <source>%0 size too large</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3227" name="err_attribute_sizeless_type">
        <segment state="initial">
          <source>%0 attribute cannot be applied to sizeless type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3228" name="err_attribute_too_few_arguments">
        <segment state="initial">
          <source>%0 attribute takes at least %1 argument%s1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3229" name="err_attribute_too_many_arguments">
        <segment state="initial">
          <source>%0 attribute takes no more than %1 argument%s1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3230" name="err_attribute_unsupported">
        <segment state="initial">
          <source>%0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu=</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3231" name="err_attribute_unsupported_m_profile">
        <segment state="initial">
          <source>on M-profile architectures %0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu=</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3232" name="err_attribute_vecreturn_only_pod_record">
        <segment state="initial">
          <source>the vecreturn attribute can only be used on a POD (plain old data) class or structure (i.e. no virtual functions)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3233" name="err_attribute_vecreturn_only_vector_member">
        <segment state="initial">
          <source>the vecreturn attribute can only be used on a class or structure with one member, which must be a vector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3234" name="err_attribute_weak_static">
        <segment state="initial">
          <source>weak declaration cannot have internal linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3235" name="err_attribute_weakref_not_global_context">
        <segment state="initial">
          <source>weakref declaration of %0 must be in a global context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3236" name="err_attribute_weakref_not_static">
        <segment state="initial">
          <source>weakref declaration must have internal linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3237" name="err_attribute_weakref_without_alias">
        <segment state="initial">
          <source>weakref declaration of %0 must also have an alias attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3238" name="err_attribute_webassembly_funcref">
        <segment state="initial">
          <source>'__funcref' attribute can only be applied to a function pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3239" name="err_attribute_wrong_decl_type">
        <segment state="initial">
          <source>%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions|for loop statements|virtual functions|parameters and implicit object parameters|non-member functions|functions, classes, or enumerations|classes|typedefs}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3240" name="err_attribute_wrong_decl_type_str">
        <segment state="initial">
          <source>%0%select{ attribute|}1 only applies to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3241" name="err_attribute_wrong_number_arguments">
        <segment state="initial">
          <source>%0 attribute %plural{0:takes no arguments|1:takes one argument|:requires exactly %1 arguments}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3242" name="err_attribute_wrong_number_arguments_for">
        <segment state="initial">
          <source>%0 attribute references function %1, which %plural{0:takes no arguments|1:takes one argument|:takes exactly %2 arguments}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3243" name="err_attribute_zero_size">
        <segment state="initial">
          <source>zero %0 size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3244" name="err_attributes_are_not_compatible">
        <segment state="initial">
          <source>%0 and %1%select{ attributes|}2 are not compatible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3245" name="err_auto_bitfield">
        <segment state="initial">
          <source>cannot pass bit-field as __auto_type initializer in C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3246" name="err_auto_different_deductions">
        <segment state="initial">
          <source>%select{'auto'|'decltype(auto)'|'__auto_type'|template arguments}0 deduced as %1 in declaration of %2 and deduced as %3 in declaration of %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3247" name="err_auto_expr_deduction_failure">
        <segment state="initial">
          <source>functional-style cast to %0 has incompatible initializer of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3248" name="err_auto_expr_init_multiple_expressions">
        <segment state="initial">
          <source>initializer for functional-style cast to %0 contains multiple expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3249" name="err_auto_expr_init_no_expression">
        <segment state="initial">
          <source>initializer for functional-style cast to %0 is empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3250" name="err_auto_expr_init_paren_braces">
        <segment state="initial">
          <source>cannot deduce actual type for %1 from %select{parenthesized|nested}0 initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3251" name="err_auto_fn_deduction_failure">
        <segment state="initial">
          <source>cannot deduce return type %0 from returned value of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3252" name="err_auto_fn_different_deductions">
        <segment state="initial">
          <source>'%select{auto|decltype(auto)}0' in return type deduced as %1 here but deduced as %2 in earlier return statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3253" name="err_auto_fn_no_return_but_not_auto">
        <segment state="initial">
          <source>cannot deduce return type %0 for function with no return statements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3254" name="err_auto_fn_return_init_list">
        <segment state="initial">
          <source>cannot deduce return type from initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3255" name="err_auto_fn_return_void_but_not_auto">
        <segment state="initial">
          <source>cannot deduce return type %0 from omitted return expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3256" name="err_auto_fn_used_before_defined">
        <segment state="initial">
          <source>function %0 with deduced return type cannot be used before it is defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3257" name="err_auto_fn_virtual">
        <segment state="initial">
          <source>function with deduced return type cannot be virtual</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3258" name="err_auto_inconsistent_deduction">
        <segment state="initial">
          <source>deduced conflicting types %diff{($ vs $) |}0,1for initializer list element type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3259" name="err_auto_init_list_from_c">
        <segment state="initial">
          <source>cannot use %select{'auto'|&lt;ERROR&gt;|'__auto_type'}0 with %select{initializer list|array}1 in C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3260" name="err_auto_missing_trailing_return">
        <segment state="initial">
          <source>'auto' return without trailing return type; deduced return types are a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3261" name="err_auto_new_ctor_multiple_expressions">
        <segment state="initial">
          <source>new expression for type %0 contains multiple constructor arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3262" name="err_auto_new_deduction_failure">
        <segment state="initial">
          <source>new expression for type %0 has incompatible constructor argument of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3263" name="err_auto_new_requires_ctor_arg">
        <segment state="initial">
          <source>new expression for type %0 requires a constructor argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3264" name="err_auto_non_deduced_not_alone">
        <segment state="initial">
          <source>%select{function with deduced return type|declaration with trailing return type}0 must be the only declaration in its group</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3265" name="err_auto_not_allowed">
        <segment state="initial">
          <source>%select{'auto'|'decltype(auto)'|'__auto_type'|use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}2 %3 requires template arguments; argument deduction}0 not allowed %select{in function prototype|in non-static struct member|in struct member|in non-static union member|in union member|in non-static class member|in interface member|in exception declaration|in template parameter until C++17|in block literal|in template argument|in typedef|in type alias|in function return type|in conversion function type|here|in lambda parameter|in type allocated by 'new'|in K&amp;R-style function parameter|in template parameter|in friend declaration|in function prototype that is not a function declaration|in requires expression parameter|in array declaration|in declaration of conversion function template|in lambda parameter before C++14}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3266" name="err_auto_not_allowed_var_inst">
        <segment state="initial">
          <source>'auto' variable template instantiation is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3267" name="err_auto_var_deduction_failure">
        <segment state="initial">
          <source>variable %0 with type %1 has incompatible initializer of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3268" name="err_auto_var_deduction_failure_from_init_list">
        <segment state="initial">
          <source>cannot deduce actual type for variable %0 with type %1 from initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3269" name="err_auto_var_init_multiple_expressions">
        <segment state="initial">
          <source>initializer for variable %0 with type %1 contains multiple expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3270" name="err_auto_var_init_no_expression">
        <segment state="initial">
          <source>initializer for variable %0 with type %1 is empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3271" name="err_auto_var_init_paren_braces">
        <segment state="initial">
          <source>cannot deduce type for variable %1 with type %2 from %select{parenthesized|nested}0 initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3272" name="err_auto_var_requires_init">
        <segment state="initial">
          <source>declaration of variable %0 with deduced type %1 requires an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3273" name="err_auto_variable_cannot_appear_in_own_initializer">
        <segment state="initial">
          <source>%select{variable|variable template|variable template partial specialization|variable template explicit specialization}0 %1 declared with deduced type %2 cannot appear in its own initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3274" name="err_availability_unexpected_parameter">
        <segment state="initial">
          <source>unexpected parameter '%0' in availability attribute, not permitted in %select{HLSL|C/C++}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3275" name="err_await_suspend_invalid_return_type">
        <segment state="initial">
          <source>return type of 'await_suspend' is required to be 'void' or 'bool' (have %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3276" name="err_bad_cast_incomplete">
        <segment state="initial">
          <source>%0 is an incomplete type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3277" name="err_bad_category_property_decl">
        <segment state="initial">
          <source>property implementation must have its declaration in the category %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3278" name="err_bad_const_cast_dest">
        <segment state="initial">
          <source>%select{const_cast||||C-style cast|functional-style cast|}0 to %2, which is not a reference, pointer-to-object, or pointer-to-data-member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3279" name="err_bad_cstyle_cast_overload">
        <segment state="initial">
          <source>address of overloaded function %0 cannot be cast to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3280" name="err_bad_cxx_cast_addr_space_mismatch">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 converts between mismatching address spaces</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3281" name="err_bad_cxx_cast_bitfield">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from bit-field lvalue to reference type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3282" name="err_bad_cxx_cast_generic">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3283" name="err_bad_cxx_cast_member_pointer_size">
        <segment state="initial">
          <source>cannot %select{||reinterpret_cast||C-style cast||}0 from member pointer type %1 to member pointer type %2 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3284" name="err_bad_cxx_cast_qualifiers_away">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 casts away qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3285" name="err_bad_cxx_cast_rvalue">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from rvalue to reference type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3286" name="err_bad_cxx_cast_scalar_to_vector_different_size">
        <segment state="initial">
          <source>%select{||reinterpret_cast||C-style cast||}0 from scalar %1 to vector %2 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3287" name="err_bad_cxx_cast_unrelated_class">
        <segment state="initial">
          <source>%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2, which are not related by inheritance, is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3288" name="err_bad_cxx_cast_vector_to_scalar_different_size">
        <segment state="initial">
          <source>%select{||reinterpret_cast||C-style cast||}0 from vector %1 to scalar %2 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3289" name="err_bad_cxx_cast_vector_to_vector_different_size">
        <segment state="initial">
          <source>%select{||reinterpret_cast||C-style cast||}0 from vector %1 to vector %2 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3290" name="err_bad_dynamic_cast_not_class">
        <segment state="initial">
          <source>%0 is not a class type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3291" name="err_bad_dynamic_cast_not_polymorphic">
        <segment state="initial">
          <source>%0 is not polymorphic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3292" name="err_bad_dynamic_cast_not_ptr">
        <segment state="initial">
          <source>cannot use dynamic_cast to convert from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3293" name="err_bad_dynamic_cast_not_ref_or_ptr">
        <segment state="initial">
          <source>invalid target type %0 for dynamic_cast; target type must be a reference or pointer type to a defined class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3294" name="err_bad_kernel_param_type">
        <segment state="initial">
          <source>%0 cannot be used as the type of a kernel parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3295" name="err_bad_lvalue_to_rvalue_cast">
        <segment state="initial">
          <source>cannot cast from lvalue of type %1 to rvalue reference type %2; types are not compatible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3296" name="err_bad_memptr_lhs">
        <segment state="initial">
          <source>left hand operand to %0 must be a %select{|pointer to }1class compatible with the right hand operand, but is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3297" name="err_bad_memptr_rhs">
        <segment state="initial">
          <source>right hand operand to %0 has non-pointer-to-member type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3298" name="err_bad_multiversion_option">
        <segment state="initial">
          <source>function multiversioning doesn't support %select{feature|architecture}0 '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3299" name="err_bad_new_type">
        <segment state="initial">
          <source>cannot allocate %select{function|reference}1 type %0 with new</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3300" name="err_bad_parameter_name">
        <segment state="initial">
          <source>%0 cannot be the name of a parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3301" name="err_bad_parameter_name_template_id">
        <segment state="initial">
          <source>parameter name cannot have template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3302" name="err_bad_property_context">
        <segment state="initial">
          <source>property implementation must be in a class or category implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3303" name="err_bad_property_decl">
        <segment state="initial">
          <source>property implementation must have its declaration in interface %0 or one of its extensions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3304" name="err_bad_receiver_type">
        <segment state="initial">
          <source>bad receiver type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3305" name="err_bad_reinterpret_cast_overload">
        <segment state="initial">
          <source>reinterpret_cast cannot resolve overloaded function %0 to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3306" name="err_bad_reinterpret_cast_reference">
        <segment state="initial">
          <source>reinterpret_cast of a %0 to %1 needs its address, which is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3307" name="err_bad_reinterpret_cast_small_int">
        <segment state="initial">
          <source>cast from pointer to smaller type %2 loses information</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3308" name="err_bad_rvalue_to_rvalue_cast">
        <segment state="initial">
          <source>cannot cast from rvalue of type %1 to rvalue reference type %2; types are not compatible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3309" name="err_bad_static_cast_member_pointer_nonmp">
        <segment state="initial">
          <source>cannot cast from type %1 to member pointer type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3310" name="err_bad_static_cast_overload">
        <segment state="initial">
          <source>address of overloaded function %0 cannot be static_cast to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3311" name="err_bad_static_cast_pointer_nonpointer">
        <segment state="initial">
          <source>cannot cast from type %1 to pointer type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3312" name="err_bad_variable_name">
        <segment state="initial">
          <source>%0 cannot be the name of a variable or data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3313" name="err_base_class_has_flexible_array_member">
        <segment state="initial">
          <source>base class %0 has a flexible array member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3314" name="err_base_clause_on_union">
        <segment state="initial">
          <source>unions cannot have base classes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3315" name="err_base_init_direct_and_virtual">
        <segment state="initial">
          <source>base class initializer %0 names both a direct base class and an inherited virtual base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3316" name="err_base_init_does_not_name_class">
        <segment state="initial">
          <source>constructor initializer %0 does not name a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3317" name="err_base_must_be_class">
        <segment state="initial">
          <source>base specifier must name a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3318" name="err_base_specifier_attribute">
        <segment state="initial">
          <source>%0%select{ attribute|}1 cannot be applied to a base specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3319" name="err_binding_cannot_appear_in_own_initializer">
        <segment state="initial">
          <source>binding %0 cannot appear in the initializer of its own decomposition declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3320" name="err_bit_cast_non_trivially_copyable">
        <segment state="initial">
          <source>'__builtin_bit_cast' %select{source|destination}0 type must be trivially copyable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3321" name="err_bit_cast_type_size_mismatch">
        <segment state="initial">
          <source>size of '__builtin_bit_cast' source type %0 does not match destination type %1 (%2 vs %3 bytes)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3322" name="err_bit_int_bad_size">
        <segment state="initial">
          <source>%select{signed|unsigned}0 _BitInt must have a bit size of at least %select{2|1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3323" name="err_bit_int_max_size">
        <segment state="initial">
          <source>%select{signed|unsigned}0 _BitInt of bit sizes greater than %1 not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3324" name="err_bitfield_has_negative_width">
        <segment state="initial">
          <source>bit-field %0 has negative width (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3325" name="err_bitfield_has_zero_width">
        <segment state="initial">
          <source>named bit-field %0 has zero width</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3326" name="err_bitfield_too_wide">
        <segment state="initial">
          <source>%select{bit-field %1|anonymous bit-field}0 is too wide (%2 bits)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3327" name="err_bitfield_width_exceeds_type_width">
        <segment state="initial">
          <source>width of%select{ anonymous|}0 bit-field%select{| %1}0 (%2 bits) exceeds the %select{width|size}3 of its type (%4 bit%s4)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3328" name="err_block_decl_ref_not_modifiable_lvalue">
        <segment state="initial">
          <source>variable is not assignable (missing __block type specifier)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3329" name="err_block_extern_cant_init">
        <segment state="initial">
          <source>declaration of block scope identifier with linkage cannot have an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3330" name="err_block_on_nonlocal">
        <segment state="initial">
          <source>__block attribute not allowed, only allowed on local variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3331" name="err_block_on_vm">
        <segment state="initial">
          <source>__block attribute not allowed on declaration with a variably modified type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3332" name="err_block_return_missing_expr">
        <segment state="initial">
          <source>non-void block should return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3333" name="err_block_returning_array_function">
        <segment state="initial">
          <source>block cannot return %select{array|function}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3334" name="err_blocks_disable">
        <segment state="initial">
          <source>blocks support disabled - compile with -fblocks or %select{pick a deployment target that supports them|for OpenCL C 2.0 or OpenCL C 3.0 with __opencl_c_device_enqueue feature}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3335" name="err_bound_member_function">
        <segment state="initial">
          <source>reference to non-static member function must be called%select{|; did you mean to call it with no arguments?}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3336" name="err_box_literal_collection">
        <segment state="initial">
          <source>%select{string|character|boolean|numeric}0 literal must be prefixed by '@' in a collection</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3337" name="err_break_not_in_loop_or_switch">
        <segment state="initial">
          <source>'break' statement not in loop or switch statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3338" name="err_btf_type_id_not_const">
        <segment state="initial">
          <source>__builtin_btf_type_id argument %0 not a constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3339" name="err_builtin_aix_os_unsupported">
        <segment state="initial">
          <source>this builtin is available only on AIX 7.2 and later operating systems</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3340" name="err_builtin_annotation_first_arg">
        <segment state="initial">
          <source>first argument to __builtin_annotation must be an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3341" name="err_builtin_annotation_second_arg">
        <segment state="initial">
          <source>second argument to __builtin_annotation must be a non-wide string constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3342" name="err_builtin_assume_aligned_invalid_arg">
        <segment state="initial">
          <source>non-pointer argument to '__builtin_assume_aligned' is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3343" name="err_builtin_counted_by_ref_cannot_leak_reference">
        <segment state="initial">
          <source>value returned by '__builtin_counted_by_ref' cannot be %select{assigned to a variable|passed into a function|returned from a function}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3344" name="err_builtin_counted_by_ref_has_side_effects">
        <segment state="initial">
          <source>'__builtin_counted_by_ref' argument cannot have side-effects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3345" name="err_builtin_counted_by_ref_invalid_use">
        <segment state="initial">
          <source>value returned by '__builtin_counted_by_ref' cannot be used in %select{an array subscript|a binary}0 expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3346" name="err_builtin_counted_by_ref_must_be_flex_array_member">
        <segment state="initial">
          <source>'__builtin_counted_by_ref' argument must reference a flexible array member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3347" name="err_builtin_definition">
        <segment state="initial">
          <source>definition of builtin function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3348" name="err_builtin_fn_use">
        <segment state="initial">
          <source>builtin functions must be directly called</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3349" name="err_builtin_func_cast_more_than_one_arg">
        <segment state="initial">
          <source>function-style cast to a builtin type can only take one argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3350" name="err_builtin_invalid_arg_type">
        <segment state="initial">
          <source>%ordinal0 argument must be a %select{|scalar|vector|matrix|vector of|scalar or vector of}1%plural{[2,3]:%plural{0:|:%plural{0:|:,}2}3|:}1%plural{0:|: }1%select{|integer|signed integer|unsigned integer|'int'|pointer to a valid matrix element}2%plural{0:|: }2%plural{0:|:%plural{0:|:or }2}3%select{|floating-point}3%plural{0:|: }3%plural{[0,3]:type|:types}1 (was %4)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3351" name="err_builtin_is_within_lifetime_invalid_arg">
        <segment state="initial">
          <source>%select{non-|function }0pointer argument to '__builtin_is_within_lifetime' is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3352" name="err_builtin_launder_invalid_arg">
        <segment state="initial">
          <source>%select{non-pointer|function pointer|void pointer}0 argument to '__builtin_launder' is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3353" name="err_builtin_longjmp_invalid_val">
        <segment state="initial">
          <source>argument to __builtin_longjmp must be a constant 1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3354" name="err_builtin_longjmp_unsupported">
        <segment state="initial">
          <source>__builtin_longjmp is not supported for the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3355" name="err_builtin_matrix_disabled">
        <segment state="initial">
          <source>matrix types extension is disabled. Pass -fenable-matrix to enable it</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3356" name="err_builtin_matrix_invalid_dimension">
        <segment state="initial">
          <source>%0 dimension is outside the allowed range [1, %1]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3357" name="err_builtin_matrix_pointer_arg_mismatch">
        <segment state="initial">
          <source>the pointee of the 2nd argument must match the element type of the 1st argument (%0 != %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3358" name="err_builtin_matrix_scalar_unsigned_arg">
        <segment state="initial">
          <source>%0 argument must be a constant unsigned integer expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3359" name="err_builtin_matrix_store_to_const">
        <segment state="initial">
          <source>cannot store matrix to read-only pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3360" name="err_builtin_matrix_stride_too_small">
        <segment state="initial">
          <source>stride must be greater or equal to the number of rows</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3361" name="err_builtin_move_forward_unsupported">
        <segment state="initial">
          <source>unsupported signature for %q0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3362" name="err_builtin_non_vector_type">
        <segment state="initial">
          <source>%0 argument to %1 must be of vector type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3363" name="err_builtin_operator_new_delete_not_usual">
        <segment state="initial">
          <source>call to '%select{__builtin_operator_new|__builtin_operator_delete}0' selects non-usual %select{allocation|deallocation}0 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3364" name="err_builtin_pass_in_regs_non_class">
        <segment state="initial">
          <source>argument %0 is not an unqualified class type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3365" name="err_builtin_redeclare">
        <segment state="initial">
          <source>cannot redeclare builtin function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3366" name="err_builtin_requires_language">
        <segment state="initial">
          <source>'%0' is only available in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3367" name="err_builtin_setjmp_unsupported">
        <segment state="initial">
          <source>__builtin_setjmp is not supported for the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3368" name="err_builtin_target_unsupported">
        <segment state="initial">
          <source>builtin is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3369" name="err_builtin_trivially_relocate_invalid_arg_type">
        <segment state="initial">
          <source>first%select{||| and second}0 argument%select{|||s}0 to '__builtin_trivially_relocate' must be %select{a pointer|non-const|relocatable|of the same type}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3370" name="err_builtin_verbose_trap_arg">
        <segment state="initial">
          <source>argument to __builtin_verbose_trap must %select{be a pointer to a constant string|not contain $}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3371" name="err_builtin_x64_aarch64_only">
        <segment state="initial">
          <source>this builtin is only available on x86-64 and aarch64 targets</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3372" name="err_c23_constexpr_init_not_representable">
        <segment state="initial">
          <source>constexpr initializer evaluates to %0 which is not exactly representable in type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3373" name="err_c23_constexpr_init_type_mismatch">
        <segment state="initial">
          <source>constexpr initializer for type %0 is of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3374" name="err_c23_constexpr_invalid_type">
        <segment state="initial">
          <source>constexpr variable cannot have type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3375" name="err_c23_constexpr_not_variable">
        <segment state="initial">
          <source>'constexpr' can only be used in variable declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3376" name="err_c23_constexpr_pointer_not_null">
        <segment state="initial">
          <source>constexpr pointer initializer is not null</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3377" name="err_c99_array_usage_cxx">
        <segment state="initial">
          <source>%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature, not permitted in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3378" name="err_call_function_incomplete_return">
        <segment state="initial">
          <source>calling %0 with incomplete return type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3379" name="err_call_incomplete_argument">
        <segment state="initial">
          <source>argument type %0 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3380" name="err_call_incomplete_return">
        <segment state="initial">
          <source>calling function with incomplete return type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3381" name="err_callback_attribute_argument_unknown">
        <segment state="initial">
          <source>'callback' attribute argument %0 is not a known function parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3382" name="err_callback_attribute_invalid_callee">
        <segment state="initial">
          <source>'callback' attribute specifies invalid callback callee</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3383" name="err_callback_attribute_multiple">
        <segment state="initial">
          <source>multiple 'callback' attributes specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3384" name="err_callback_attribute_no_callee">
        <segment state="initial">
          <source>'callback' attribute specifies no callback callee</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3385" name="err_callback_attribute_wrong_arg_count">
        <segment state="initial">
          <source>'callback' attribute references function of type %0 which expects %1 %plural{1:argument|:arguments}1 but attribute specifies %2 parameter index %plural{1:argument|:arguments}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3386" name="err_callback_callee_is_variadic">
        <segment state="initial">
          <source>'callback' attribute callee may not be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3387" name="err_callback_callee_no_function_type">
        <segment state="initial">
          <source>'callback' attribute callee does not have function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3388" name="err_callback_implicit_this_not_available">
        <segment state="initial">
          <source>'callback' argument at position %0 references unavailable implicit 'this'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3389" name="err_called_once_attribute_wrong_type">
        <segment state="initial">
          <source>'called_once' attribute only applies to function-like parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3390" name="err_cannot_find_suitable_accessor">
        <segment state="initial">
          <source>cannot find suitable %select{getter|setter}0 for property %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3391" name="err_cannot_form_pointer_to_member_of_reference_type">
        <segment state="initial">
          <source>cannot form a pointer-to-member to member %0 of reference type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3392" name="err_cannot_pass_non_trivial_c_struct_to_vararg">
        <segment state="initial">
          <source>cannot pass non-trivial C object of type %0 by value to variadic %select{function|block|method|constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3393" name="err_cannot_pass_objc_interface_to_vararg">
        <segment state="initial">
          <source>cannot pass object with interface type %0 by value through variadic %select{function|block|method|constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3394" name="err_cannot_pass_objc_interface_to_vararg_format">
        <segment state="initial">
          <source>cannot pass object with interface type %1 by value to variadic %select{function|block|method|constructor}2; expected type from format string was %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3395" name="err_cannot_pass_to_vararg">
        <segment state="initial">
          <source>cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3396" name="err_cannot_pass_to_vararg_format">
        <segment state="initial">
          <source>cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3397" name="err_capture_bad_target">
        <segment state="initial">
          <source>capture host variable %0 by reference in device or host device lambda function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3398" name="err_capture_binding_openmp">
        <segment state="initial">
          <source>capturing a structured binding is not yet supported in OpenMP</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3399" name="err_capture_block_variable">
        <segment state="initial">
          <source>__block variable %0 cannot be captured in a %select{lambda expression|captured statement}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3400" name="err_capture_by_attribute_argument_unknown">
        <segment state="initial">
          <source>'lifetime_capture_by' attribute argument %0 is not a known function parameter; must be a function parameter, 'this', 'global' or 'unknown'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3401" name="err_capture_by_attribute_multiple">
        <segment state="initial">
          <source>multiple 'lifetime_capture' attributes specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3402" name="err_capture_by_attribute_no_entity">
        <segment state="initial">
          <source>'lifetime_capture_by' attribute specifies no capturing entity</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3403" name="err_capture_by_implicit_this_not_available">
        <segment state="initial">
          <source>'lifetime_capture_by' argument references unavailable implicit 'this'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3404" name="err_capture_by_param_uses_reserved_name">
        <segment state="initial">
          <source>parameter cannot be named '%select{global|unknown}0' while using 'lifetime_capture_by(%select{global|unknown}0)'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3405" name="err_capture_by_references_itself">
        <segment state="initial">
          <source>'lifetime_capture_by' argument references itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3406" name="err_capture_class_member_does_not_name_variable">
        <segment state="initial">
          <source>class member %0 cannot appear in capture list as it is not a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3407" name="err_capture_default_non_local">
        <segment state="initial">
          <source>non-local lambda expression cannot have a capture-default</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3408" name="err_capture_does_not_name_variable">
        <segment state="initial">
          <source>%0 in capture list does not name a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3409" name="err_capture_more_than_once">
        <segment state="initial">
          <source>%0 can appear only once in a capture list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3410" name="err_capture_non_automatic_variable">
        <segment state="initial">
          <source>%0 cannot be captured because it does not have automatic storage duration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3411" name="err_capture_of_abstract_type">
        <segment state="initial">
          <source>by-copy capture of value of abstract type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3412" name="err_capture_of_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>by-copy capture of variable %0 with %select{incomplete|sizeless}1 type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3413" name="err_carries_dependency_missing_on_first_decl">
        <segment state="initial">
          <source>%select{function|parameter}0 declared '[[carries_dependency]]' after its first declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3414" name="err_carries_dependency_param_not_function_decl">
        <segment state="initial">
          <source>'[[carries_dependency]]' attribute only allowed on parameter in a function declaration or lambda</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3415" name="err_case_not_in_switch">
        <segment state="initial">
          <source>'case' statement not in switch statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3416" name="err_cast_from_randomized_struct">
        <segment state="initial">
          <source>casting from randomized structure pointer type %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3417" name="err_cast_pointer_from_non_pointer_int">
        <segment state="initial">
          <source>operand of type %0 cannot be cast to a pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3418" name="err_cast_pointer_to_non_pointer_int">
        <segment state="initial">
          <source>pointer cannot be cast to type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3419" name="err_cast_selector_expr">
        <segment state="initial">
          <source>cannot type cast @selector expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3420" name="err_catch_incomplete">
        <segment state="initial">
          <source>cannot catch incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3421" name="err_catch_incomplete_ptr">
        <segment state="initial">
          <source>cannot catch pointer to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3422" name="err_catch_incomplete_ref">
        <segment state="initial">
          <source>cannot catch reference to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3423" name="err_catch_param_not_objc_type">
        <segment state="initial">
          <source>@catch parameter is not a pointer to an interface type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3424" name="err_catch_rvalue_ref">
        <segment state="initial">
          <source>cannot catch exceptions by rvalue reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3425" name="err_catch_sizeless">
        <segment state="initial">
          <source>cannot catch %select{|reference to }0sizeless type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3426" name="err_catch_variably_modified">
        <segment state="initial">
          <source>cannot catch variably modified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3427" name="err_category_forward_interface">
        <segment state="initial">
          <source>cannot define %select{category|class extension}0 for undefined class %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3428" name="err_category_property">
        <segment state="initial">
          <source>property declared in category %0 cannot be implemented in class implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3429" name="err_cconv_change">
        <segment state="initial">
          <source>function declared '%0' here was previously declared %select{'%2'|without calling convention}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3430" name="err_cconv_incomplete_param_type">
        <segment state="initial">
          <source>parameter %0 must have a complete type to use function %1 with the %2 calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3431" name="err_cconv_knr">
        <segment state="initial">
          <source>function with no prototype cannot use the %0 calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3432" name="err_cconv_varargs">
        <segment state="initial">
          <source>variadic function cannot use %0 calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3433" name="err_cfstring_literal_not_string_constant">
        <segment state="initial">
          <source>CFString literal is not a string constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3434" name="err_class_extension_after_impl">
        <segment state="initial">
          <source>cannot declare class extension for %0 after class implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3435" name="err_class_marked_final_used_as_base">
        <segment state="initial">
          <source>base %0 is marked '%select{final|sealed}1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3436" name="err_class_property_found">
        <segment state="initial">
          <source>property %0 is a class property; did you mean to access it with class '%1'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3437" name="err_class_redeclared_with_different_access">
        <segment state="initial">
          <source>%0 redeclared with '%1' access</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3438" name="err_class_stub_subclassing_mismatch">
        <segment state="initial">
          <source>'objc_class_stub' attribute cannot be specified on a class that does not have the 'objc_subclassing_restricted' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3439" name="err_cocoa_naming_owned_rule">
        <segment state="initial">
          <source>property follows Cocoa naming convention for returning 'owned' objects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3440" name="err_collection_expr_type">
        <segment state="initial">
          <source>the type %0 is not a pointer to a fast-enumerable object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3441" name="err_complex_mode_vector_type">
        <segment state="initial">
          <source>type of machine mode does not support base vector types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3442" name="err_compound_literal_with_address_space">
        <segment state="initial">
          <source>compound literal in function scope may not be qualified with an address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3443" name="err_compound_literal_with_vla_type">
        <segment state="initial">
          <source>compound literal cannot be of variable-length array type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3444" name="err_compound_qualified_function_type">
        <segment state="initial">
          <source>%select{block pointer|pointer|reference}0 to function type %select{%2 |}1cannot have '%3' qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3445" name="err_computed_type_in_declarative_nns">
        <segment state="initial">
          <source>a %select{pack indexing|'decltype'}0 specifier cannot be used in a declarative nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3446" name="err_concept_decls_may_only_appear_in_global_namespace_scope">
        <segment state="initial">
          <source>concept declarations may only appear in global or namespace scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3447" name="err_concept_extra_headers">
        <segment state="initial">
          <source>extraneous template parameter list in concept definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3448" name="err_concept_no_associated_constraints">
        <segment state="initial">
          <source>concept cannot have associated constraints</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3449" name="err_concept_no_parameters">
        <segment state="initial">
          <source>concept template parameter list must have at least one parameter; explicit specialization of concepts is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3450" name="err_cond_voidptr_arc">
        <segment state="initial">
          <source>operands to conditional of types%diff{ $ and $|}0,1 are incompatible in ARC mode</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3451" name="err_conditional_ambiguous">
        <segment state="initial">
          <source>conditional expression is ambiguous; %diff{$ can be converted to $ and vice versa|types can be convert to each other}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3452" name="err_conditional_ambiguous_ovl">
        <segment state="initial">
          <source>conditional expression is ambiguous; %diff{$ and $|types}0,1 can be converted to several common types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3453" name="err_conditional_vector_cond_result_mismatch">
        <segment state="initial">
          <source>cannot mix vectors and extended vectors in a vector conditional</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3454" name="err_conditional_vector_element_size">
        <segment state="initial">
          <source>vector condition type %0 and result type %1 do not have elements of the same size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3455" name="err_conditional_vector_has_void">
        <segment state="initial">
          <source>GNU vector conditional operand cannot be %select{void|a throw expression}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3456" name="err_conditional_vector_mismatched">
        <segment state="initial">
          <source>vector operands to the vector conditional must be the same type %diff{($ and $)|}0,1}</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3457" name="err_conditional_vector_operand_type">
        <segment state="initial">
          <source>enumeration type %0 is not allowed in a vector conditional</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3458" name="err_conditional_vector_size">
        <segment state="initial">
          <source>vector condition type %0 and result type %1 do not have the same number of elements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3459" name="err_conditional_void_nonvoid">
        <segment state="initial">
          <source>%select{left|right}1 operand to ? is void, but %select{right|left}1 operand is of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3460" name="err_config_scalar_return">
        <segment state="initial">
          <source>CUDA special function '%0' must have scalar return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3461" name="err_conflicting_aliasing_type">
        <segment state="initial">
          <source>conflicting types for alias %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3462" name="err_conflicting_aligned_options">
        <segment state="initial">
          <source>conflicting option '-fcoro-aligned-allocation' and '-fno-aligned-allocation'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3463" name="err_conflicting_attributes_arm_agnostic">
        <segment state="initial">
          <source>__arm_agnostic("sme_za_state") cannot share ZA state with its caller</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3464" name="err_conflicting_attributes_arm_state">
        <segment state="initial">
          <source>conflicting attributes for state '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3465" name="err_conflicting_codeseg_attribute">
        <segment state="initial">
          <source>conflicting code segment specifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3466" name="err_conflicting_ivar_bitwidth">
        <segment state="initial">
          <source>instance variable %0 has conflicting bit-field width</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3467" name="err_conflicting_ivar_name">
        <segment state="initial">
          <source>conflicting instance variable names: %0 vs %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3468" name="err_conflicting_ivar_type">
        <segment state="initial">
          <source>instance variable %0 has conflicting type%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3469" name="err_conflicting_overriding_attributes">
        <segment state="initial">
          <source>virtual function %0 has different attributes %diff{($) than the function it overrides (which has $)|than the function it overrides}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3470" name="err_conflicting_overriding_cc_attributes">
        <segment state="initial">
          <source>virtual function %0 has different calling convention attributes %diff{($) than the function it overrides (which has calling convention $)|than the function it overrides}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3471" name="err_conflicting_super_class">
        <segment state="initial">
          <source>conflicting super class name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3472" name="err_conflicting_types">
        <segment state="initial">
          <source>conflicting types for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3473" name="err_constant_integer_arg_type">
        <segment state="initial">
          <source>argument to %0 must be a constant integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3474" name="err_consteval_override">
        <segment state="initial">
          <source>consteval function %0 cannot override a non-consteval function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3475" name="err_constexpr_body_invalid_stmt">
        <segment state="initial">
          <source>statement not allowed in %select{constexpr|consteval}1 %select{function|constructor}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3476" name="err_constexpr_body_no_return">
        <segment state="initial">
          <source>no return statement in %select{constexpr|consteval}0 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3477" name="err_constexpr_dtor">
        <segment state="initial">
          <source>destructor cannot be declared %select{&lt;ERROR&gt;|constexpr|consteval|constinit}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3478" name="err_constexpr_dtor_subobject">
        <segment state="initial">
          <source>destructor cannot be declared %select{&lt;ERROR&gt;|constexpr|consteval|constinit}0 because %select{data member %2|base class %3}1 does not have a constexpr destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3479" name="err_constexpr_if_condition_expression_is_not_constant">
        <segment state="initial">
          <source>constexpr if condition is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3480" name="err_constexpr_local_var_non_literal_type">
        <segment state="initial">
          <source>variable of non-literal type %1 cannot be defined in a constexpr %select{function|constructor}0 before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3481" name="err_constexpr_main">
        <segment state="initial">
          <source>'main' is not allowed to be declared %select{constexpr|consteval}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3482" name="err_constexpr_non_literal_param">
        <segment state="initial">
          <source>%select{constexpr|consteval}2 %select{function|constructor}1's %ordinal0 parameter type %3 is not a literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3483" name="err_constexpr_non_literal_return">
        <segment state="initial">
          <source>%select{constexpr|consteval}0 function's return type %1 is not a literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3484" name="err_constexpr_redecl_mismatch">
        <segment state="initial">
          <source>%select{non-constexpr|constexpr|consteval}1 declaration of %0 follows %select{non-constexpr|constexpr|consteval}2 declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3485" name="err_constexpr_return_missing_expr">
        <segment state="initial">
          <source>non-void %select{constexpr|consteval}1 function %0 should return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3486" name="err_constexpr_static_mem_var_requires_init">
        <segment state="initial">
          <source>declaration of constexpr static data member %0 requires an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3487" name="err_constexpr_tag">
        <segment state="initial">
          <source>%select{class|struct|interface|union|enum|enum class|enum struct}0 cannot be marked %select{&lt;ERROR&gt;|constexpr|consteval|constinit}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3488" name="err_constexpr_var_non_literal">
        <segment state="initial">
          <source>constexpr variable cannot have non-literal type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3489" name="err_constexpr_var_requires_const_destruction">
        <segment state="initial">
          <source>constexpr variable %0 must have constant destruction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3490" name="err_constexpr_var_requires_const_init">
        <segment state="initial">
          <source>constexpr variable %0 must be initialized by a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3491" name="err_constexpr_virtual">
        <segment state="initial">
          <source>virtual function cannot be constexpr</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3492" name="err_constexpr_virtual_base">
        <segment state="initial">
          <source>constexpr %select{member function|constructor}0 not allowed in %select{struct|interface|class}1 with virtual base %plural{1:class|:classes}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3493" name="err_constexpr_vla">
        <segment state="initial">
          <source>variably-modified type %0 cannot be used in a constexpr %select{function|constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3494" name="err_constexpr_wrong_decl_kind">
        <segment state="initial">
          <source>%select{&lt;ERROR&gt;|constexpr|consteval|constinit}0 can only be used in %select{|variable and function|function|variable}0 declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3495" name="err_constinit_added_too_late">
        <segment state="initial">
          <source>'constinit' specifier added after initialization of variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3496" name="err_constinit_local_variable">
        <segment state="initial">
          <source>local variable cannot be declared 'constinit'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3497" name="err_constrained_non_templated_function">
        <segment state="initial">
          <source>non-templated function cannot have a requires clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3498" name="err_constrained_virtual_method">
        <segment state="initial">
          <source>virtual function cannot have a requires clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3499" name="err_constraint_depends_on_self">
        <segment state="initial">
          <source>satisfaction of constraint %0 depends on itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3500" name="err_constructor_byvalue_arg">
        <segment state="initial">
          <source>copy constructor must pass its first argument by reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3501" name="err_constructor_cannot_be">
        <segment state="initial">
          <source>constructor cannot be declared '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3502" name="err_constructor_redeclared">
        <segment state="initial">
          <source>constructor cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3503" name="err_constructor_return_type">
        <segment state="initial">
          <source>constructor cannot have a return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3504" name="err_continuation_class">
        <segment state="initial">
          <source>class extension has no primary class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3505" name="err_continue_from_cond_var_init">
        <segment state="initial">
          <source>cannot jump from this continue statement to the loop increment; jump bypasses initialization of loop condition variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3506" name="err_continue_not_in_loop">
        <segment state="initial">
          <source>'continue' statement not in loop statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3507" name="err_conv_function_not_member">
        <segment state="initial">
          <source>conversion function must be a non-static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3508" name="err_conv_function_redeclared">
        <segment state="initial">
          <source>conversion function cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3509" name="err_conv_function_return_type">
        <segment state="initial">
          <source>conversion function cannot have a return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3510" name="err_conv_function_to_array">
        <segment state="initial">
          <source>conversion function cannot convert to an array type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3511" name="err_conv_function_to_function">
        <segment state="initial">
          <source>conversion function cannot convert to a function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3512" name="err_conv_function_variadic">
        <segment state="initial">
          <source>conversion function cannot be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3513" name="err_conv_function_with_complex_decl">
        <segment state="initial">
          <source>cannot specify any part of a return type in the declaration of a conversion function%select{; put the complete type after 'operator'|; use a typedef to declare a conversion to %1|; use an alias template to declare a conversion to %1|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3514" name="err_conv_function_with_params">
        <segment state="initial">
          <source>conversion function cannot have any parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3515" name="err_conv_mixed_enum_types">
        <segment state="initial">
          <source>invalid %select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3516" name="err_convertvector_constexpr_unsupported_vector_cast">
        <segment state="initial">
          <source>unsupported vector cast from %0 to %1 in a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3517" name="err_convertvector_incompatible_vector">
        <segment state="initial">
          <source>first two arguments to __builtin_convertvector must have the same number of elements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3518" name="err_convertvector_non_vector">
        <segment state="initial">
          <source>first argument to __builtin_convertvector must be a vector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3519" name="err_copy_capture_with_copy_default">
        <segment state="initial">
          <source>'&amp;' must precede a capture when the capture default is '='</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3520" name="err_coro_invalid_addr_of_label">
        <segment state="initial">
          <source>the GNU address of label extension is not allowed in coroutines</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3521" name="err_coroutine_handle_missing_member">
        <segment state="initial">
          <source>std::coroutine_handle must have a member named '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3522" name="err_coroutine_invalid_func_context">
        <segment state="initial">
          <source>'%1' cannot be used in %select{a constructor|a destructor|the 'main' function|a constexpr function|a function with a deduced return type|a varargs function|a consteval function}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3523" name="err_coroutine_objc_method">
        <segment state="initial">
          <source>Objective-C methods as coroutines are not yet supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3524" name="err_coroutine_outside_function">
        <segment state="initial">
          <source>'%0' cannot be used outside a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3525" name="err_coroutine_promise_final_suspend_requires_nothrow">
        <segment state="initial">
          <source>the expression 'co_await __promise.final_suspend()' is required to be non-throwing</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3526" name="err_coroutine_promise_get_return_object_on_allocation_failure">
        <segment state="initial">
          <source>%0: 'get_return_object_on_allocation_failure()' must be a static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3527" name="err_coroutine_promise_incompatible_return_functions">
        <segment state="initial">
          <source>the coroutine promise type %0 declares both 'return_value' and 'return_void'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3528" name="err_coroutine_promise_new_requires_nothrow">
        <segment state="initial">
          <source>%0 is required to have a non-throwing noexcept specification when the promise type declares 'get_return_object_on_allocation_failure()'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3529" name="err_coroutine_promise_type_incomplete">
        <segment state="initial">
          <source>this function cannot be a coroutine: %0 is an incomplete type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3530" name="err_coroutine_promise_unhandled_exception_required">
        <segment state="initial">
          <source>%0 is required to declare the member 'unhandled_exception()'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3531" name="err_coroutine_return_type">
        <segment state="initial">
          <source>function returns a type %0 marked with [[clang::coro_return_type]] but is neither a coroutine nor a coroutine wrapper; non-coroutines should be marked with [[clang::coro_wrapper]] to allow returning coroutine return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3532" name="err_coroutine_type_missing_specialization">
        <segment state="initial">
          <source>this function cannot be a coroutine: missing definition of specialization %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3533" name="err_coroutine_unevaluated_context">
        <segment state="initial">
          <source>'%0' cannot be used in an unevaluated context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3534" name="err_coroutine_unfound_nothrow_new">
        <segment state="initial">
          <source>unable to find %select{'::operator new(size_t, nothrow_t)'|'::operator new(size_t, align_val_t, nothrow_t)'}1 for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3535" name="err_coroutine_unusable_new">
        <segment state="initial">
          <source>'operator new' provided by %0 is not usable with the function signature of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3536" name="err_coroutine_within_handler">
        <segment state="initial">
          <source>'%0' cannot be used in the handler of a try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3537" name="err_count_attr_argument_not_integer">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' requires a non-boolean integer type argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3538" name="err_count_attr_in_union">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' cannot be applied to a union member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3539" name="err_count_attr_must_be_in_structure">
        <segment state="initial">
          <source>field %0 in '%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}1' not inside structure</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3540" name="err_count_attr_not_on_ptr_or_flexible_array_member">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' only applies to pointers%select{ or C99 flexible array members|||}0%select{|; did you mean to use 'counted_by'?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3541" name="err_count_attr_only_support_simple_decl_reference">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' argument must be a simple declaration reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3542" name="err_count_attr_param_not_in_same_struct">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}1' field %0 isn't within the same struct as the annotated %select{pointer|flexible array}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3543" name="err_count_attr_refer_to_union">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' argument cannot refer to a union member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3544" name="err_counted_by_attr_on_array_not_flexible_array_member">
        <segment state="initial">
          <source>'counted_by' on arrays only applies to C99 flexible array members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3545" name="err_counted_by_attr_pointee_unknown_size">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}4' %select{cannot|should not}3 be applied to %select{a pointer with pointee|an array with element}0 of unknown size because %1 is %select{an incomplete type|a sizeless type|a function type|a struct type with a flexible array member%select{|. This will be an error in a future compiler version}3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3546" name="err_counted_by_attr_refer_to_itself">
        <segment state="initial">
          <source>'counted_by' cannot refer to the flexible array member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3547" name="err_counted_by_on_incomplete_type_on_assign">
        <segment state="initial">
          <source>cannot %select{assign to %select{object|'%1'}2 with|pass argument to %select{parameter|parameter '%1'}2 with|return|convert to|%select{|implicitly }3initialize %select{object|'%1'}2 with|pass argument to parameter with|cast to|pass argument to parameter with}0 '%5' attributed type %4 because the pointee type %6 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3548" name="err_counted_by_on_incomplete_type_on_use">
        <segment state="initial">
          <source>cannot %select{use '%1' with '%4' attributed|call '%1' with '%4' attributed return}0 type %2 because the pointee type %3 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3549" name="err_countof_arg_not_array_type">
        <segment state="initial">
          <source>'_Countof' requires an argument of array type; %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3550" name="err_covariant_return_ambiguous_derived_to_base_conv">
        <segment state="initial">
          <source>return type of virtual function %3 is not covariant with the return type of the function it overrides (ambiguous conversion from derived class %0 to base class %1:%2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3551" name="err_covariant_return_inaccessible_base">
        <segment state="initial">
          <source>invalid covariant return for virtual function: %1 is a %select{private|protected}2 base class of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3552" name="err_covariant_return_incomplete">
        <segment state="initial">
          <source>return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is incomplete)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3553" name="err_covariant_return_not_derived">
        <segment state="initial">
          <source>return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is not derived from %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3554" name="err_covariant_return_type_class_type_not_same_or_less_qualified">
        <segment state="initial">
          <source>return type of virtual function %0 is not covariant with the return type of the function it overrides (class type %1 does not have the same cv-qualification as or less cv-qualification than class type %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3555" name="err_covariant_return_type_different_qualifications">
        <segment state="initial">
          <source>return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 has different qualifiers than %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3556" name="err_cpu_dispatch_mismatch">
        <segment state="initial">
          <source>'cpu_dispatch' function redeclared with different CPUs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3557" name="err_cpu_specific_multiple_defs">
        <segment state="initial">
          <source>multiple 'cpu_specific' functions cannot specify the same CPU: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3558" name="err_ctor_dtor_returns_void">
        <segment state="initial">
          <source>%select{constructor|destructor}1 %0 must not return void expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3559" name="err_cuda_ctor_dtor_attrs">
        <segment state="initial">
          <source>CUDA does not support global %0 for __device__ functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3560" name="err_cuda_device_builtin_surftex_cls_template">
        <segment state="initial">
          <source>illegal device builtin %select{surface|texture}0 reference class template %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3561" name="err_cuda_device_builtin_surftex_ref_decl">
        <segment state="initial">
          <source>illegal device builtin %select{surface|texture}0 reference type %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3562" name="err_cuda_device_exceptions">
        <segment state="initial">
          <source>cannot use '%0' in %select{__device__|__global__|__host__|__host__ __device__}1 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3563" name="err_cuda_extern_shared">
        <segment state="initial">
          <source>__shared__ variable %0 cannot be 'extern'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3564" name="err_cuda_grid_constant_not_allowed">
        <segment state="initial">
          <source>__grid_constant__ is only allowed on const-qualified kernel parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3565" name="err_cuda_host_shared">
        <segment state="initial">
          <source>__shared__ local variables not allowed in %select{__device__|__global__|__host__|__host__ __device__}0 functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3566" name="err_cuda_nonstatic_constdev">
        <segment state="initial">
          <source>__constant__, __device__, and __managed__ are not allowed on non-static local variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3567" name="err_cuda_ovl_target">
        <segment state="initial">
          <source>%select{__device__|__global__|__host__|__host__ __device__}0 function %1 cannot overload %select{__device__|__global__|__host__|__host__ __device__}2 function %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3568" name="err_cuda_unattributed_constexpr_cannot_overload_device">
        <segment state="initial">
          <source>constexpr function %0 without __host__ or __device__ attributes cannot overload __device__ function with the same signature; add a __host__ attribute, or build with -fno-cuda-host-device-constexpr</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3569" name="err_cuda_vla">
        <segment state="initial">
          <source>cannot use variable-length arrays in %select{__device__|__global__|__host__|__host__ __device__}0 functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3570" name="err_current_module_name_mismatch">
        <segment state="initial">
          <source>module name '%0' specified on command line does not match name of module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3571" name="err_cxx20_deducing_this">
        <segment state="initial">
          <source>explicit object parameters are incompatible with C++ standards before C++2b</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3572" name="err_dangling_member">
        <segment state="initial">
          <source>%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime would be shorter than the lifetime of the constructed object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3573" name="err_dealloc_bad_result_type">
        <segment state="initial">
          <source>dealloc return type must be correctly specified as 'void' under ARC, instead of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3574" name="err_decimal_unsupported">
        <segment state="initial">
          <source>GNU decimal type extension not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3575" name="err_decl_attribute_invalid_on_stmt">
        <segment state="initial">
          <source>%0%select{ attribute|}1 cannot be applied to a statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3576" name="err_decl_negative_array_size">
        <segment state="initial">
          <source>'%0' declared as an array with a negative size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3577" name="err_declarator_need_ident">
        <segment state="initial">
          <source>declarator requires an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3578" name="err_declspec_keyword_has_no_effect">
        <segment state="initial">
          <source>%0 cannot appear here, place it after "%select{class|struct|interface|union|enum}1" to apply it to the type declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3579" name="err_declspec_thread_on_thread_variable">
        <segment state="initial">
          <source>'__declspec(thread)' applied to variable that already has a thread-local storage specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3580" name="err_decltype_auto_cannot_be_combined">
        <segment state="initial">
          <source>'decltype(auto)' cannot be combined with other type specifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3581" name="err_decltype_auto_compound_type">
        <segment state="initial">
          <source>cannot form %select{pointer to|reference to|array of}0 'decltype(auto)'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3582" name="err_decltype_auto_function_declarator_not_declaration">
        <segment state="initial">
          <source>'decltype(auto)' can only be used as a return type in a function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3583" name="err_decltype_auto_initializer_list">
        <segment state="initial">
          <source>cannot deduce 'decltype(auto)' from initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3584" name="err_decltype_auto_invalid">
        <segment state="initial">
          <source>'decltype(auto)' not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3585" name="err_decomp_decl_ambiguous_base">
        <segment state="initial">
          <source>cannot decompose members of ambiguous base class %1 of %0:%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3586" name="err_decomp_decl_anon_union_member">
        <segment state="initial">
          <source>cannot decompose class type %0 because it has an anonymous %select{struct|union}1 member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3587" name="err_decomp_decl_constraint">
        <segment state="initial">
          <source>decomposition declaration cannot be declared with constrained 'auto'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3588" name="err_decomp_decl_context">
        <segment state="initial">
          <source>decomposition declaration not permitted in this context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3589" name="err_decomp_decl_inaccessible_base">
        <segment state="initial">
          <source>cannot decompose members of inaccessible base class %1 of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3590" name="err_decomp_decl_inaccessible_field">
        <segment state="initial">
          <source>cannot decompose %select{private|protected}0 member %1 of %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3591" name="err_decomp_decl_lambda">
        <segment state="initial">
          <source>cannot decompose lambda closure type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3592" name="err_decomp_decl_multiple_bases_with_members">
        <segment state="initial">
          <source>cannot decompose class type %1: %select{its base classes %2 and|both it and its base class}0 %3 have non-static data members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3593" name="err_decomp_decl_not_alone">
        <segment state="initial">
          <source>decomposition declaration must be the only declaration in its group</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3594" name="err_decomp_decl_parens">
        <segment state="initial">
          <source>decomposition declaration cannot be declared with parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3595" name="err_decomp_decl_requires_init">
        <segment state="initial">
          <source>decomposition declaration %0 requires an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3596" name="err_decomp_decl_spec">
        <segment state="initial">
          <source>decomposition declaration cannot be declared %plural{1:'%1'|:with '%1' specifiers}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3597" name="err_decomp_decl_std_tuple_element_not_specialized">
        <segment state="initial">
          <source>cannot decompose this type; 'std::tuple_element&lt;%0&gt;::type' does not name a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3598" name="err_decomp_decl_std_tuple_size_not_constant">
        <segment state="initial">
          <source>cannot decompose this type; 'std::tuple_size&lt;%0&gt;::value' is not a valid integral constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3599" name="err_decomp_decl_template">
        <segment state="initial">
          <source>decomposition declaration cannot be a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3600" name="err_decomp_decl_type">
        <segment state="initial">
          <source>decomposition declaration cannot be declared with type %0; declared type must be 'auto' or reference to 'auto'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3601" name="err_decomp_decl_unbindable_type">
        <segment state="initial">
          <source>cannot decompose %select{union|non-class, non-array}1 type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3602" name="err_decomp_decl_wrong_number_bindings">
        <segment state="initial">
          <source>type %0 decomposes into %3 %plural{1:element|:elements}2, but %select{%plural{0:no|:only %1}1|%1}4 %plural{1:name was|:names were}1 provided</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3603" name="err_decrement_bool">
        <segment state="initial">
          <source>cannot decrement expression of type bool</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3604" name="err_deduced_class_template_compound_type">
        <segment state="initial">
          <source>cannot form %select{pointer to|reference to|array of|function returning}0 deduced class template specialization type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3605" name="err_deduced_class_template_ctor_ambiguous">
        <segment state="initial">
          <source>ambiguous deduction for template arguments of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3606" name="err_deduced_class_template_ctor_no_viable">
        <segment state="initial">
          <source>no viable constructor or deduction guide for deduction of template arguments of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3607" name="err_deduced_class_template_deleted">
        <segment state="initial">
          <source>class template argument deduction for %0 selected a deleted constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3608" name="err_deduced_class_template_explicit">
        <segment state="initial">
          <source>class template argument deduction for %0 selected an explicit %select{constructor|deduction guide}1 for copy-list-initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3609" name="err_deduced_class_template_incomplete">
        <segment state="initial">
          <source>template %0 has no definition and no %select{|viable }1deduction guides for deduction of template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3610" name="err_deduced_non_class_or_alias_template_specialization_type">
        <segment state="initial">
          <source>%select{&lt;error&gt;|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments; argument deduction only allowed for class templates or alias templates</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3611" name="err_deduced_non_type_template_arg_type_mismatch">
        <segment state="initial">
          <source>deduced non-type template argument does not have the same type as the corresponding template parameter%diff{ ($ vs $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3612" name="err_deduced_return_type">
        <segment state="initial">
          <source>deduced return types are a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3613" name="err_deduced_tst">
        <segment state="initial">
          <source>typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0; argument deduction not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3614" name="err_deduction_guide_bad_trailing_return_type">
        <segment state="initial">
          <source>deduced type %1 of deduction guide is not %select{|written as }2a specialization of template %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3615" name="err_deduction_guide_defines_function">
        <segment state="initial">
          <source>deduction guide cannot have a function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3616" name="err_deduction_guide_invalid_specifier">
        <segment state="initial">
          <source>deduction guide cannot be declared '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3617" name="err_deduction_guide_name_not_class_template">
        <segment state="initial">
          <source>cannot specify deduction guide for %select{&lt;error&gt;|function template|variable template|alias template|template template parameter|concept|dependent template name}0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3618" name="err_deduction_guide_no_trailing_return_type">
        <segment state="initial">
          <source>deduction guide declaration without trailing return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3619" name="err_deduction_guide_redeclared">
        <segment state="initial">
          <source>redeclaration of deduction guide</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3620" name="err_deduction_guide_specialized">
        <segment state="initial">
          <source>deduction guide cannot be %select{explicitly instantiated|explicitly specialized}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3621" name="err_deduction_guide_template_not_deducible">
        <segment state="initial">
          <source>deduction guide template contains %select{a template parameter|template parameters}0 that cannot be deduced</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3622" name="err_deduction_guide_with_complex_decl">
        <segment state="initial">
          <source>cannot specify any part of a return type in the declaration of a deduction guide</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3623" name="err_deduction_guide_wrong_access">
        <segment state="initial">
          <source>deduction guide has different access from the corresponding member template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3624" name="err_deduction_guide_wrong_scope">
        <segment state="initial">
          <source>deduction guide must be declared in the same scope as template %q0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3625" name="err_deep_exception_specs_differ">
        <segment state="initial">
          <source>exception specifications of %select{return|argument}0 types differ</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3626" name="err_default_arg_in_partial_spec">
        <segment state="initial">
          <source>default template argument in a class template partial specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3627" name="err_default_arg_makes_ctor_special">
        <segment state="initial">
          <source>addition of default argument on redeclaration makes this constructor a %select{default|copy|move}0 constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3628" name="err_default_init_const">
        <segment state="initial">
          <source>default initialization of an object of const type %0%select{| without a user-provided default constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3629" name="err_default_member_initializer_cycle">
        <segment state="initial">
          <source>default member initializer for %0 uses itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3630" name="err_default_member_initializer_not_yet_parsed">
        <segment state="initial">
          <source>default member initializer for %1 needed within definition of enclosing class %0 outside of member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3631" name="err_default_not_in_switch">
        <segment state="initial">
          <source>'default' statement not in switch statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3632" name="err_defaulted_comparison_cannot_deduce_undeduced_auto">
        <segment state="initial">
          <source>return type of defaulted 'operator&lt;=&gt;' cannot be deduced because three-way comparison for %select{|member|base class}0 %1 has a deduced return type and is not yet defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3633" name="err_defaulted_comparison_constexpr_mismatch">
        <segment state="initial">
          <source>defaulted definition of %select{%select{&lt;ERROR&gt;|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 cannot be declared %select{constexpr|consteval}2 because %select{it|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3634" name="err_defaulted_comparison_deduced_return_type_not_auto">
        <segment state="initial">
          <source>deduced return type for defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator must be 'auto', not %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3635" name="err_defaulted_comparison_non_const">
        <segment state="initial">
          <source>defaulted member %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator must be const-qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3636" name="err_defaulted_comparison_not_friend">
        <segment state="initial">
          <source>%select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator is not a friend of %select{|incomplete class }1%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3637" name="err_defaulted_comparison_num_args">
        <segment state="initial">
          <source>%select{non-member|member}0 %select{&lt;ERROR&gt;|equality|three-way|equality|relational}1 comparison operator must have %select{2|1}0 parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3638" name="err_defaulted_comparison_param">
        <segment state="initial">
          <source>invalid parameter type for defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator; found %1, expected %2%select{| or %4}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3639" name="err_defaulted_comparison_param_mismatch">
        <segment state="initial">
          <source>parameters for defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator must have the same type%diff{ (found $ vs $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3640" name="err_defaulted_comparison_param_unknown">
        <segment state="initial">
          <source>invalid parameter type for non-member defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator; found %1, expected class or reference to a constant class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3641" name="err_defaulted_comparison_return_type_not_bool">
        <segment state="initial">
          <source>return type for defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator must be 'bool', not %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3642" name="err_defaulted_comparison_template">
        <segment state="initial">
          <source>comparison operator template cannot be defaulted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3643" name="err_defaulted_copy_assign_not_ref">
        <segment state="initial">
          <source>the parameter for an explicitly-defaulted copy assignment operator must be an lvalue reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3644" name="err_defaulted_special_member_copy_const_param">
        <segment state="initial">
          <source>the parameter for this explicitly-defaulted copy %select{constructor|assignment operator}0 is const, but a member or base requires it to be non-const</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3645" name="err_defaulted_special_member_explicit_object_mismatch">
        <segment state="initial">
          <source>the type of the explicit object parameter of an explicitly-defaulted %select{copy|move}0 assignment operator should be reference to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3646" name="err_defaulted_special_member_move_const_param">
        <segment state="initial">
          <source>the parameter for an explicitly-defaulted move %select{constructor|assignment operator}0 may not be const</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3647" name="err_defaulted_special_member_params">
        <segment state="initial">
          <source>an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot have default arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3648" name="err_defaulted_special_member_quals">
        <segment state="initial">
          <source>an explicitly-defaulted %select{copy|move}0 assignment operator may not have 'const'%select{, 'constexpr'|}1 or 'volatile' qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3649" name="err_defaulted_special_member_return_type">
        <segment state="initial">
          <source>explicitly-defaulted %select{copy|move}0 assignment operator must return %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3650" name="err_defaulted_special_member_variadic">
        <segment state="initial">
          <source>an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3651" name="err_defaulted_special_member_volatile_param">
        <segment state="initial">
          <source>the parameter for an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 may not be volatile</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3652" name="err_definition_of_explicitly_defaulted_member">
        <segment state="initial">
          <source>definition of explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3653" name="err_definition_of_implicitly_declared_member">
        <segment state="initial">
          <source>definition of implicitly declared %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3654" name="err_delegating_ctor">
        <segment state="initial">
          <source>delegating constructors are permitted only in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3655" name="err_delegating_initializer_alone">
        <segment state="initial">
          <source>an initializer for a delegating constructor must appear alone</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3656" name="err_delete_explicit_conversion">
        <segment state="initial">
          <source>converting delete expression from type %0 to type %1 invokes an explicit conversion function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3657" name="err_delete_incomplete">
        <segment state="initial">
          <source>cannot delete pointer to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3658" name="err_delete_incomplete_class_type">
        <segment state="initial">
          <source>deleting incomplete class type %0; no conversions to pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3659" name="err_delete_operand">
        <segment state="initial">
          <source>cannot delete expression of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3660" name="err_deleted_decl_not_first">
        <segment state="initial">
          <source>deleted definition must be first declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3661" name="err_deleted_function_use">
        <segment state="initial">
          <source>attempt to use a deleted function%select{|: %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3662" name="err_deleted_inherited_ctor_use">
        <segment state="initial">
          <source>constructor inherited by %0 from base class %1 is implicitly deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3663" name="err_deleted_main">
        <segment state="initial">
          <source>'main' is not allowed to be deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3664" name="err_deleted_override">
        <segment state="initial">
          <source>deleted function %0 cannot override a non-deleted function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3665" name="err_dependent_deduced_tst">
        <segment state="initial">
          <source>typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0 member in %1; argument deduction not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3666" name="err_dependent_function_template_spec_no_match">
        <segment state="initial">
          <source>no candidate function template was found for dependent %select{member|friend}0 function template specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3667" name="err_dependent_nested_name_spec">
        <segment state="initial">
          <source>nested name specifier for a declaration cannot depend on a template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3668" name="err_dependent_non_type_arg_in_partial_spec">
        <segment state="initial">
          <source>type of specialized non-type template argument depends on a template parameter of the partial specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3669" name="err_dependent_tag_decl">
        <segment state="initial">
          <source>%select{declaration|definition}0 of %select{struct|interface|union|class|enum}1 in a dependent scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3670" name="err_dependent_typed_non_type_arg_in_partial_spec">
        <segment state="initial">
          <source>non-type template argument specializes a template parameter with dependent type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3671" name="err_dereference_incomplete_type">
        <segment state="initial">
          <source>dereference of pointer to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3672" name="err_designated_init_attr_non_init">
        <segment state="initial">
          <source>'objc_designated_initializer' attribute only applies to init methods of interface or class extension declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3673" name="err_designated_init_for_non_aggregate">
        <segment state="initial">
          <source>initialization of non-aggregate type %0 with a designated initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3674" name="err_designator_for_scalar_or_sizeless_init">
        <segment state="initial">
          <source>designator in initializer for %select{scalar|indivisible sizeless}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3675" name="err_designator_into_flexible_array_member">
        <segment state="initial">
          <source>designator into flexible array member subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3676" name="err_destroy_attr_on_non_static_var">
        <segment state="initial">
          <source>%select{no_destroy|always_destroy}0 attribute can only be applied to a variable with static or thread storage duration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3677" name="err_destroying_operator_delete_not_usual">
        <segment state="initial">
          <source>destroying operator delete can have only an optional size and optional alignment parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3678" name="err_destructor_cannot_be">
        <segment state="initial">
          <source>destructor cannot be declared '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3679" name="err_destructor_expr_mismatch">
        <segment state="initial">
          <source>identifier %0 in object destruction expression does not name the type %1 of the object being destroyed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3680" name="err_destructor_expr_nontype">
        <segment state="initial">
          <source>identifier %0 in object destruction expression does not name a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3681" name="err_destructor_expr_type_mismatch">
        <segment state="initial">
          <source>destructor type %0 in object destruction expression does not match the type %1 of the object being destroyed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3682" name="err_destructor_name">
        <segment state="initial">
          <source>expected the class name after '~' to name the enclosing class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3683" name="err_destructor_name_nontype">
        <segment state="initial">
          <source>identifier %0 after '~' in destructor name does not name a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3684" name="err_destructor_not_member">
        <segment state="initial">
          <source>destructor must be a non-static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3685" name="err_destructor_redeclared">
        <segment state="initial">
          <source>destructor cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3686" name="err_destructor_return_type">
        <segment state="initial">
          <source>destructor cannot have a return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3687" name="err_destructor_template">
        <segment state="initial">
          <source>destructor cannot be declared as a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3688" name="err_destructor_variadic">
        <segment state="initial">
          <source>destructor cannot be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3689" name="err_destructor_with_params">
        <segment state="initial">
          <source>destructor cannot have any parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3690" name="err_diagnose_if_expected_equals">
        <segment state="initial">
          <source>expected '=' after diagnostic option</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3691" name="err_diagnose_if_invalid_diagnostic_type">
        <segment state="initial">
          <source>invalid diagnostic type for 'diagnose_if'; use "error" or "warning" instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3692" name="err_diagnose_if_succeeded">
        <segment state="initial">
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3693" name="err_diagnose_if_unexpected_value">
        <segment state="initial">
          <source>unexpected value; use 'true' or 'false'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3694" name="err_diagnose_if_unknown_option">
        <segment state="initial">
          <source>unknown diagnostic option</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3695" name="err_diagnose_if_unknown_warning">
        <segment state="initial">
          <source>unknown warning group '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3696" name="err_different_asm_label">
        <segment state="initial">
          <source>conflicting asm label</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3697" name="err_different_language_linkage">
        <segment state="initial">
          <source>declaration of %0 has a different language linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3698" name="err_different_pass_object_size_params">
        <segment state="initial">
          <source>conflicting pass_object_size attributes on parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3699" name="err_different_return_type_for_overriding_virtual_function">
        <segment state="initial">
          <source>virtual function %0 has a different return type %diff{($) than the function it overrides (which has return type $)|than the function it overrides}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3700" name="err_dimension_expr_not_constant_integer">
        <segment state="initial">
          <source>dimension expression does not evaluate to a constant unsigned int</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3701" name="err_direct_selector_expression">
        <segment state="initial">
          <source>@selector expression formed with direct selector %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3702" name="err_disallowed_duplicate_attribute">
        <segment state="initial">
          <source>attribute %0 cannot appear more than once on a declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3703" name="err_distant_exception_spec">
        <segment state="initial">
          <source>exception specifications are not allowed beyond a single level of indirection</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3704" name="err_downcast_from_inaccessible_base">
        <segment state="initial">
          <source>cannot cast %select{private|protected}2 base class %1 to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3705" name="err_dtor_expr_without_call">
        <segment state="initial">
          <source>reference to %select{destructor|pseudo-destructor}0 must be called%select{|; did you mean to call it with no arguments?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3706" name="err_dup_implementation_category">
        <segment state="initial">
          <source>reimplementation of category %1 for class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3707" name="err_dup_implementation_class">
        <segment state="initial">
          <source>reimplementation of class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3708" name="err_duplicate_base_class">
        <segment state="initial">
          <source>base class %0 specified more than once as a direct base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3709" name="err_duplicate_case">
        <segment state="initial">
          <source>duplicate case value '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3710" name="err_duplicate_case_differing_expr">
        <segment state="initial">
          <source>duplicate case value: '%0' and '%1' both equal '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3711" name="err_duplicate_class_def">
        <segment state="initial">
          <source>duplicate interface definition for class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3712" name="err_duplicate_ivar_declaration">
        <segment state="initial">
          <source>instance variable is already declared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3713" name="err_duplicate_ivar_use">
        <segment state="initial">
          <source>synthesized properties %0 and %1 both claim instance variable %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3714" name="err_duplicate_member">
        <segment state="initial">
          <source>duplicate member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3715" name="err_duplicate_method_decl">
        <segment state="initial">
          <source>duplicate declaration of method %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3716" name="err_duplicate_property">
        <segment state="initial">
          <source>property has a previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3717" name="err_duplicate_target_attribute">
        <segment state="initial">
          <source>%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3718" name="err_duplicated_vtable_pointer_auth">
        <segment state="initial">
          <source>multiple vtable pointer authentication policies on %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3719" name="err_dynamic_property_ivar_decl">
        <segment state="initial">
          <source>dynamic property cannot have instance variable specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3720" name="err_dynamic_var_init">
        <segment state="initial">
          <source>dynamic initialization is not supported for __device__, __constant__, __shared__, and __managed__ variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3721" name="err_early_catch_all">
        <segment state="initial">
          <source>catch-all handler must come last</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3722" name="err_ellipsis_first_param">
        <segment state="initial">
          <source>ISO C requires a named parameter before '...'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3723" name="err_ellipsis_in_declarator_not_parameter">
        <segment state="initial">
          <source>only function and template parameters can be parameter packs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3724" name="err_empty_scalar_initializer">
        <segment state="initial">
          <source>scalar initializer cannot be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3725" name="err_empty_sizeless_initializer">
        <segment state="initial">
          <source>initializer for sizeless type %0 cannot be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3726" name="err_enum_invalid_underlying">
        <segment state="initial">
          <source>%select{non-integral type %0|%0}1 is an invalid underlying type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3727" name="err_enum_mode_vector_type">
        <segment state="initial">
          <source>mode %0 is not supported for enumeration types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3728" name="err_enum_redeclare_fixed_mismatch">
        <segment state="initial">
          <source>enumeration previously declared with %select{non|}0fixed underlying type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3729" name="err_enum_redeclare_scoped_mismatch">
        <segment state="initial">
          <source>enumeration previously declared as %select{un|}0scoped</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3730" name="err_enum_redeclare_type_mismatch">
        <segment state="initial">
          <source>enumeration redeclared with different underlying type %0 (was %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3731" name="err_enumerator_does_not_exist">
        <segment state="initial">
          <source>enumerator %0 does not exist in instantiation of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3732" name="err_enumerator_too_large">
        <segment state="initial">
          <source>enumerator value is not representable in the underlying type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3733" name="err_enumerator_wrapped">
        <segment state="initial">
          <source>enumerator value %0 is not representable in the underlying type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3734" name="err_event_t_addr_space_qual">
        <segment state="initial">
          <source>the event_t type can only be used with __private address space qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3735" name="err_exception_spec_cycle">
        <segment state="initial">
          <source>exception specification of %0 uses itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3736" name="err_exception_spec_in_typedef">
        <segment state="initial">
          <source>exception specifications are not allowed in %select{typedefs|type aliases}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3737" name="err_exception_spec_incomplete_type">
        <segment state="initial">
          <source>exception specification needed for member of incomplete class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3738" name="err_exception_spec_not_parsed">
        <segment state="initial">
          <source>exception specification is not available until end of class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3739" name="err_exceptions_disabled">
        <segment state="initial">
          <source>cannot use '%0' with exceptions disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3740" name="err_excess_initializers">
        <segment state="initial">
          <source>excess elements in %select{array|vector|scalar|union|struct}0 initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3741" name="err_excess_initializers_for_sizeless_type">
        <segment state="initial">
          <source>excess elements in initializer for indivisible sizeless type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3742" name="err_excess_initializers_in_char_array_initializer">
        <segment state="initial">
          <source>excess elements in char array initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3743" name="err_expected_allocator_clause">
        <segment state="initial">
          <source>expected an 'allocator' clause inside of the target region; provide an 'allocator' clause or use 'requires' directive with the 'dynamic_allocators' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3744" name="err_expected_allocator_expression">
        <segment state="initial">
          <source>expected an allocator expression inside of the target region; provide an allocator expression or use 'requires' directive with the 'dynamic_allocators' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3745" name="err_expected_callable_argument">
        <segment state="initial">
          <source>expected a callable expression as %ordinal0 argument to %1, found %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3746" name="err_expected_class_or_namespace">
        <segment state="initial">
          <source>%0 is not a class%select{ or namespace|, namespace, or enumeration}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3747" name="err_expected_kernel_void_return_type">
        <segment state="initial">
          <source>kernel must have void return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3748" name="err_expected_name_of_pack">
        <segment state="initial">
          <source>%0 does not refer to the name of a parameter pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3749" name="err_expected_struct_pointer_argument">
        <segment state="initial">
          <source>expected pointer to struct as %ordinal0 argument to %1, found %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3750" name="err_explicit_instantiation_ambiguous">
        <segment state="initial">
          <source>partial ordering for explicit instantiation of %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3751" name="err_explicit_instantiation_constexpr">
        <segment state="initial">
          <source>explicit instantiation cannot be 'constexpr'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3752" name="err_explicit_instantiation_data_member_not_instantiated">
        <segment state="initial">
          <source>explicit instantiation refers to static data member %q0 that is not an instantiation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3753" name="err_explicit_instantiation_declaration_after_definition">
        <segment state="initial">
          <source>explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3754" name="err_explicit_instantiation_dependent">
        <segment state="initial">
          <source>explicit instantiation has dependent template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3755" name="err_explicit_instantiation_duplicate">
        <segment state="initial">
          <source>duplicate explicit instantiation of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3756" name="err_explicit_instantiation_in_class">
        <segment state="initial">
          <source>explicit instantiation of %0 in class scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3757" name="err_explicit_instantiation_inline">
        <segment state="initial">
          <source>explicit instantiation cannot be 'inline'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3758" name="err_explicit_instantiation_internal_linkage">
        <segment state="initial">
          <source>explicit instantiation declaration of %0 with internal linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3759" name="err_explicit_instantiation_member_function_not_instantiated">
        <segment state="initial">
          <source>explicit instantiation refers to member function %q0 that is not an instantiation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3760" name="err_explicit_instantiation_must_be_global">
        <segment state="initial">
          <source>explicit instantiation of %0 must occur at global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3761" name="err_explicit_instantiation_no_candidate">
        <segment state="initial">
          <source>no viable candidate for explicit instantiation of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3762" name="err_explicit_instantiation_nontemplate_type">
        <segment state="initial">
          <source>explicit instantiation of non-templated type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3763" name="err_explicit_instantiation_not_known">
        <segment state="initial">
          <source>explicit instantiation of %0 does not refer to a function template, variable template, member function, member class, or static data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3764" name="err_explicit_instantiation_of_typedef">
        <segment state="initial">
          <source>explicit instantiation of typedef %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3765" name="err_explicit_instantiation_out_of_scope">
        <segment state="initial">
          <source>explicit instantiation of %0 not in a namespace enclosing %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3766" name="err_explicit_instantiation_requires_name">
        <segment state="initial">
          <source>explicit instantiation declaration requires a name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3767" name="err_explicit_instantiation_storage_class">
        <segment state="initial">
          <source>explicit instantiation cannot have a storage class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3768" name="err_explicit_instantiation_undefined_func_template">
        <segment state="initial">
          <source>explicit instantiation of undefined function template %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3769" name="err_explicit_instantiation_undefined_member">
        <segment state="initial">
          <source>explicit instantiation of undefined %select{member class|member function|static data member}0 %1 of class template %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3770" name="err_explicit_instantiation_undefined_var_template">
        <segment state="initial">
          <source>explicit instantiation of undefined variable template %q0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3771" name="err_explicit_instantiation_unqualified_wrong_namespace">
        <segment state="initial">
          <source>explicit instantiation of %q0 must occur in namespace %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3772" name="err_explicit_instantiation_without_template_id">
        <segment state="initial">
          <source>explicit instantiation of %q0 must specify a template argument list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3773" name="err_explicit_non_ctor_or_conv_function">
        <segment state="initial">
          <source>'explicit' can only be applied to a constructor or conversion function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3774" name="err_explicit_non_function">
        <segment state="initial">
          <source>'explicit' can only appear on non-static member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3775" name="err_explicit_object_default_arg">
        <segment state="initial">
          <source>the explicit object parameter cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3776" name="err_explicit_object_lambda_ambiguous_base">
        <segment state="initial">
          <source>lambda %0 is inaccessible due to ambiguity:%1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3777" name="err_explicit_object_lambda_inaccessible_base">
        <segment state="initial">
          <source>invalid explicit object parameter type %0 in lambda with capture; the type must derive publicly from the lambda</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3778" name="err_explicit_object_parameter_constructor">
        <segment state="initial">
          <source>an explicit object parameter cannot appear in a %select{constructor|destructor}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3779" name="err_explicit_object_parameter_invalid">
        <segment state="initial">
          <source>an explicit object parameter can only appear as the first parameter of a member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3780" name="err_explicit_object_parameter_must_be_first">
        <segment state="initial">
          <source>an explicit object parameter can only appear as the first parameter of the %select{function|lambda}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3781" name="err_explicit_object_parameter_mutable">
        <segment state="initial">
          <source>a lambda with an explicit object parameter cannot be mutable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3782" name="err_explicit_object_parameter_nonmember">
        <segment state="initial">
          <source>an explicit object parameter cannot appear in a %select{static|virtual|non-member}0 %select{function|lambda}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3783" name="err_explicit_object_parameter_pack">
        <segment state="initial">
          <source>the explicit object parameter cannot be a function parameter pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3784" name="err_explicit_out_of_class">
        <segment state="initial">
          <source>'explicit' can only be specified inside the class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3785" name="err_export_anon_ns_internal">
        <segment state="initial">
          <source>anonymous namespaces cannot be exported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3786" name="err_export_in_private_module_fragment">
        <segment state="initial">
          <source>export declaration cannot be used in a private module fragment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3787" name="err_export_inline_not_defined">
        <segment state="initial">
          <source>inline function not defined%select{| before the private module fragment}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3788" name="err_export_internal">
        <segment state="initial">
          <source>declaration of %0 with internal linkage cannot be exported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3789" name="err_export_non_namespace_scope_name">
        <segment state="initial">
          <source>cannot export %0 as it is not at namespace scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3790" name="err_export_not_in_module_interface">
        <segment state="initial">
          <source>export declaration can only be used within a module purview</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3791" name="err_export_partition_impl">
        <segment state="initial">
          <source>module partition implementations cannot be exported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3792" name="err_export_using_internal">
        <segment state="initial">
          <source>using declaration referring to %1 with %select{internal|module|unknown}0 linkage cannot be exported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3793" name="err_export_within_anonymous_namespace">
        <segment state="initial">
          <source>export declaration appears within anonymous namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3794" name="err_export_within_export">
        <segment state="initial">
          <source>export declaration appears within another export declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3795" name="err_expr_not_cce">
        <segment state="initial">
          <source>%select{case value|enumerator value|non-type template argument|non-type parameter of template template parameter|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3796" name="err_expr_not_ice">
        <segment state="initial">
          <source>expression is not an %select{integer|integral}0 constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3797" name="err_expr_not_string_literal">
        <segment state="initial">
          <source>expression is not a string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3798" name="err_ext_vector_component_exceeds_length">
        <segment state="initial">
          <source>vector component access exceeds type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3799" name="err_ext_vector_component_name_illegal">
        <segment state="initial">
          <source>illegal vector component name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3800" name="err_extern_c_global_conflict">
        <segment state="initial">
          <source>declaration of %1 %select{with C language linkage|in global scope}0 conflicts with declaration %select{in global scope|with C language linkage}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3801" name="err_extern_def_in_header_unit">
        <segment state="initial">
          <source>non-inline external definitions are not permitted in C++ header units</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3802" name="err_extern_non_extern">
        <segment state="initial">
          <source>extern declaration of %0 follows non-extern declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3803" name="err_falloff_nonvoid">
        <segment state="initial">
          <source>non-void %select{function|block|lambda|coroutine}0 does not return a value%select{| in all control paths}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3804" name="err_fallthrough_attr_invalid_placement">
        <segment state="initial">
          <source>fallthrough annotation does not directly precede switch label</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3805" name="err_fallthrough_attr_outside_switch">
        <segment state="initial">
          <source>fallthrough annotation is outside switch statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3806" name="err_fallthrough_attr_wrong_target">
        <segment state="initial">
          <source>%0 attribute is only allowed on empty statements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3807" name="err_field_declared_as_function">
        <segment state="initial">
          <source>field %0 declared as a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3808" name="err_field_designator_non_aggr">
        <segment state="initial">
          <source>field designator cannot initialize a %select{non-struct, non-union|non-class}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3809" name="err_field_designator_nonfield">
        <segment state="initial">
          <source>field designator %0 does not refer to a non-static data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3810" name="err_field_designator_unknown">
        <segment state="initial">
          <source>field designator %0 does not refer to any field in type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3811" name="err_field_designator_unknown_suggest">
        <segment state="initial">
          <source>field designator %0 does not refer to any field in type %1; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3812" name="err_field_incomplete_or_sizeless">
        <segment state="initial">
          <source>field has %select{incomplete|sizeless}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3813" name="err_field_instantiates_to_function">
        <segment state="initial">
          <source>data member instantiated with function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3814" name="err_field_with_address_space">
        <segment state="initial">
          <source>field may not be qualified with an address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3815" name="err_filter_expression_integral">
        <segment state="initial">
          <source>filter expression has non-integral type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3816" name="err_final_function_overridden">
        <segment state="initial">
          <source>declaration of %0 overrides a '%select{final|sealed}1' function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3817" name="err_first_argument_to_cwsc_block_call">
        <segment state="initial">
          <source>first argument to __builtin_call_with_static_chain must not be a block call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3818" name="err_first_argument_to_cwsc_builtin_call">
        <segment state="initial">
          <source>first argument to __builtin_call_with_static_chain must not be a builtin call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3819" name="err_first_argument_to_cwsc_not_call">
        <segment state="initial">
          <source>first argument to __builtin_call_with_static_chain must be a non-member call expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3820" name="err_first_argument_to_cwsc_pdtor_call">
        <segment state="initial">
          <source>first argument to __builtin_call_with_static_chain must not be a pseudo-destructor call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3821" name="err_first_argument_to_va_arg_not_of_type_va_list">
        <segment state="initial">
          <source>first argument to 'va_arg' is of type %0 and not 'va_list'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3822" name="err_flexible_array_arc_retainable">
        <segment state="initial">
          <source>ARC forbids flexible array members with retainable object type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3823" name="err_flexible_array_has_nontrivial_dtor">
        <segment state="initial">
          <source>flexible array member %0 of type %1 with non-trivial destruction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3824" name="err_flexible_array_init">
        <segment state="initial">
          <source>initialization of flexible array member is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3825" name="err_flexible_array_init_needs_braces">
        <segment state="initial">
          <source>flexible array requires brace-enclosed initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3826" name="err_flexible_array_not_at_end">
        <segment state="initial">
          <source>flexible array member %0 with type %1 is not at the end of %select{struct|interface|union|class|enum}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3827" name="err_flexible_array_virtual_base">
        <segment state="initial">
          <source>flexible array member %0 not allowed in %select{struct|interface|union|class|enum}1 which has a virtual base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3828" name="err_fold_expression_bad_operand">
        <segment state="initial">
          <source>expression not permitted as operand of fold expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3829" name="err_fold_expression_empty">
        <segment state="initial">
          <source>unary fold expression has empty expansion for operator '%0' with no fallback value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3830" name="err_fold_expression_limit_exceeded">
        <segment state="initial">
          <source>instantiating fold expression with %0 arguments exceeded expression nesting limit of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3831" name="err_fold_expression_packs_both_sides">
        <segment state="initial">
          <source>binary fold expression has unexpanded parameter packs in both operands</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3832" name="err_for_range_decl_must_be_var">
        <segment state="initial">
          <source>for range declaration must declare a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3833" name="err_for_range_deduction_failure">
        <segment state="initial">
          <source>cannot use type %0 as a range</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3834" name="err_for_range_dereference">
        <segment state="initial">
          <source>invalid range expression of type %0; did you mean to dereference it with '*'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3835" name="err_for_range_incomplete_type">
        <segment state="initial">
          <source>cannot use incomplete type %0 as a range</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3836" name="err_for_range_invalid">
        <segment state="initial">
          <source>invalid range expression of type %0; no viable '%select{begin|end}1' function available</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3837" name="err_for_range_iter_deduction_failure">
        <segment state="initial">
          <source>cannot use type %0 as an iterator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3838" name="err_for_range_storage_class">
        <segment state="initial">
          <source>loop variable %0 may not be declared %select{'extern'|'static'|'__private_extern__'|'auto'|'register'|'constexpr'|'thread_local'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3839" name="err_format_attribute_implicit_this_format_string">
        <segment state="initial">
          <source>format attribute cannot specify the implicit this argument as the format string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3840" name="err_format_attribute_not">
        <segment state="initial">
          <source>format argument not a string type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3841" name="err_format_attribute_result_not">
        <segment state="initial">
          <source>function does not return %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3842" name="err_format_nonliteral">
        <segment state="initial">
          <source>format string is not a string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3843" name="err_format_strftime_third_parameter">
        <segment state="initial">
          <source>strftime format attribute requires 3rd parameter to be 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3844" name="err_forward_ref_enum">
        <segment state="initial">
          <source>ISO C++ forbids forward references to 'enum' types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3845" name="err_forward_superclass">
        <segment state="initial">
          <source>attempting to use the forward class %0 as superclass of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3846" name="err_found_in_dependent_base">
        <segment state="initial">
          <source>explicit qualification required to use member %0 from dependent base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3847" name="err_found_later_in_class">
        <segment state="initial">
          <source>member %0 used before its declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3848" name="err_friend_decl_does_not_match">
        <segment state="initial">
          <source>friend declaration of %0 does not match any declaration in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3849" name="err_friend_decl_with_def_arg_must_be_def">
        <segment state="initial">
          <source>friend declaration specifying a default argument must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3850" name="err_friend_decl_with_def_arg_redeclared">
        <segment state="initial">
          <source>friend declaration specifying a default argument must be the only declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3851" name="err_friend_decl_with_enclosing_temp_constraint_must_be_def">
        <segment state="initial">
          <source>friend declaration with a constraint that depends on an enclosing template parameter must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3852" name="err_friend_def_in_local_class">
        <segment state="initial">
          <source>friend function cannot be defined in a local class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3853" name="err_friend_is_member">
        <segment state="initial">
          <source>friends cannot be members of the declaring class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3854" name="err_friend_not_first_in_declaration">
        <segment state="initial">
          <source>'friend' must appear first in a non-function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3855" name="err_friend_specialization_def">
        <segment state="initial">
          <source>friend function specialization cannot be defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3856" name="err_friend_template_decl_multiple_specifiers">
        <segment state="initial">
          <source>a friend declaration that befriends a template must contain exactly one type-specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3857" name="err_func_def_incomplete_result">
        <segment state="initial">
          <source>incomplete result type %0 in function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3858" name="err_func_returning_array_function">
        <segment state="initial">
          <source>function cannot return %select{array|function}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3859" name="err_func_returning_qualified_void">
        <segment state="initial">
          <source>function cannot return qualified void type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3860" name="err_func_with_effects_no_prototype">
        <segment state="initial">
          <source>'%0' function must have a prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3861" name="err_function_attribute_mismatch">
        <segment state="initial">
          <source>function declared with %0 attribute was previously declared without the %0 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3862" name="err_function_decl_cmse_ns_call">
        <segment state="initial">
          <source>functions may not be declared with 'cmse_nonsecure_call' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3863" name="err_function_marked_override_not_overriding">
        <segment state="initial">
          <source>%0 marked 'override' but does not override any member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3864" name="err_function_member_spec_ambiguous">
        <segment state="initial">
          <source>ambiguous member function specialization %q0 of %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3865" name="err_function_parameter_pack_without_parameter_packs">
        <segment state="initial">
          <source>type %0 of function parameter pack does not contain any unexpanded parameter packs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3866" name="err_function_start_invalid_type">
        <segment state="initial">
          <source>argument must be a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3867" name="err_function_template_partial_spec">
        <segment state="initial">
          <source>function template partial specialization is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3868" name="err_function_template_spec_ambiguous">
        <segment state="initial">
          <source>function template specialization %0 ambiguously refers to more than one function template; explicitly specify%select{| additional}1 template arguments to identify a particular function template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3869" name="err_function_template_spec_no_match">
        <segment state="initial">
          <source>no function template matches function template specialization %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3870" name="err_gc_weak_property_strong_type">
        <segment state="initial">
          <source>weak attribute declared on a __strong type property in GC mode</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3871" name="err_generic_sel_multi_match">
        <segment state="initial">
          <source>controlling expression type %0 compatible with %1 generic association types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3872" name="err_generic_sel_no_match">
        <segment state="initial">
          <source>controlling expression type %0 not compatible with any generic association type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3873" name="err_getter_not_found">
        <segment state="initial">
          <source>no getter method for read from property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3874" name="err_global_call_not_config">
        <segment state="initial">
          <source>call to global function %0 not configured</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3875" name="err_goto_into_protected_scope">
        <segment state="initial">
          <source>cannot jump from this goto statement to its label</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3876" name="err_goto_ms_asm_label">
        <segment state="initial">
          <source>cannot jump from this goto statement to label %0 inside an inline assembly block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3877" name="err_half_const_requires_fp16">
        <segment state="initial">
          <source>half precision constant requires cl_khr_fp16</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3878" name="err_hip_invalid_args_builtin_mangled_name">
        <segment state="initial">
          <source>invalid argument: symbol must be a device-side function or global variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3879" name="err_hlsl_attr_invalid_ast_node">
        <segment state="initial">
          <source>attribute %0 only applies to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3880" name="err_hlsl_attr_invalid_type">
        <segment state="initial">
          <source>attribute %0 only applies to a field or parameter of type '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3881" name="err_hlsl_attr_unsupported_in_stage">
        <segment state="initial">
          <source>attribute %0 is unsupported in '%1' shaders, requires %select{|one of the following: }2%3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3882" name="err_hlsl_attribute_in_wrong_shader_model">
        <segment state="initial">
          <source>attribute %0 requires shader model %1 or greater</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3883" name="err_hlsl_attribute_needs_intangible_type">
        <segment state="initial">
          <source>attribute %0 can be used only on HLSL intangible type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3884" name="err_hlsl_attribute_number_arguments_insufficient_shader_model">
        <segment state="initial">
          <source>attribute %0 with %1 arguments requires shader model %2 or greater</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3885" name="err_hlsl_attribute_param_mismatch">
        <segment state="initial">
          <source>%0 attribute parameters do not match the previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3886" name="err_hlsl_binding_type_invalid">
        <segment state="initial">
          <source>binding type '%0' is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3887" name="err_hlsl_binding_type_mismatch">
        <segment state="initial">
          <source>binding type '%select{t|u|b|s|c}0' only applies to %select{SRV resources|UAV resources|constant buffer resources|sampler state|numeric variables in the global scope}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3888" name="err_hlsl_builtin_scalar_vector_mismatch">
        <segment state="initial">
          <source>%select{all|second and third}0 arguments to %1 must be of scalar or vector type with matching scalar element type%diff{: $ vs $|}2,3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3889" name="err_hlsl_duplicate_parameter_modifier">
        <segment state="initial">
          <source>duplicate parameter modifier %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3890" name="err_hlsl_duplicate_register_annotation">
        <segment state="initial">
          <source>binding type '%select{t|u|b|s|c|i}0' cannot be applied more than once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3891" name="err_hlsl_entry_shader_attr_mismatch">
        <segment state="initial">
          <source>%0 attribute on entry function does not match the target profile</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3892" name="err_hlsl_expect_arg_const_int_one_or_neg_one">
        <segment state="initial">
          <source>argument %0 must be constant integer 1 or -1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3893" name="err_hlsl_expected_space">
        <segment state="initial">
          <source>invalid space specifier '%0' used; expected 'space' followed by an integer, like space1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3894" name="err_hlsl_export_not_on_function">
        <segment state="initial">
          <source>export declaration can only be used on functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3895" name="err_hlsl_incorrect_num_initializers">
        <segment state="initial">
          <source>too %select{few|many}0 initializers in list for type %1 (expected %2 but found %3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3896" name="err_hlsl_init_priority_unsupported">
        <segment state="initial">
          <source>initializer priorities are not supported in HLSL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3897" name="err_hlsl_missing_numthreads">
        <segment state="initial">
          <source>missing numthreads attribute for %0 shader entry</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3898" name="err_hlsl_missing_resource_class">
        <segment state="initial">
          <source>HLSL resource needs to have [[hlsl::resource_class()]] attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3899" name="err_hlsl_missing_semantic_annotation">
        <segment state="initial">
          <source>semantic annotations must be present for all parameters of an entry function or patch constant function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3900" name="err_hlsl_numthreads_argument_oor">
        <segment state="initial">
          <source>argument '%select{X|Y|Z}0' to numthreads attribute cannot exceed %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3901" name="err_hlsl_numthreads_invalid">
        <segment state="initial">
          <source>total number of threads cannot exceed %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3902" name="err_hlsl_operator_unsupported">
        <segment state="initial">
          <source>the '%select{&amp;|*|-&gt;}0' operator is unsupported in HLSL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3903" name="err_hlsl_packoffset_alignment_mismatch">
        <segment state="initial">
          <source>packoffset at 'y' not match alignment %0 required by %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3904" name="err_hlsl_packoffset_cross_reg_boundary">
        <segment state="initial">
          <source>packoffset cannot cross register boundary</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3905" name="err_hlsl_packoffset_overlap">
        <segment state="initial">
          <source>packoffset overlap between %0, %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3906" name="err_hlsl_param_qualifier_mismatch">
        <segment state="initial">
          <source>conflicting parameter qualifier %0 on parameter %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3907" name="err_hlsl_pointers_unsupported">
        <segment state="initial">
          <source>%select{pointers|references}0 are unsupported in HLSL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3908" name="err_hlsl_space_on_global_constant">
        <segment state="initial">
          <source>register space cannot be specified on global constants</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3909" name="err_hlsl_unsupported_register_number">
        <segment state="initial">
          <source>register number should be an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3910" name="err_hlsl_vector_compound_assignment_truncation">
        <segment state="initial">
          <source>left hand operand of type %0 to compound assignment cannot be truncated when used with right hand operand of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3911" name="err_iboutletcollection_builtintype">
        <segment state="initial">
          <source>type argument of iboutletcollection attribute cannot be a builtin type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3912" name="err_iboutletcollection_type">
        <segment state="initial">
          <source>invalid type %0 as argument of iboutletcollection attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3913" name="err_ice_ambiguous_conversion">
        <segment state="initial">
          <source>ambiguous conversion from type %0 to an integral or unscoped enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3914" name="err_ice_explicit_conversion">
        <segment state="initial">
          <source>integral constant expression requires explicit conversion from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3915" name="err_ice_incomplete_type">
        <segment state="initial">
          <source>integral constant expression has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3916" name="err_ice_not_integral">
        <segment state="initial">
          <source>%select{integer|integral}1 constant expression must have %select{integer|integral or unscoped enumeration}1 type, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3917" name="err_ice_too_large">
        <segment state="initial">
          <source>integer constant expression evaluates to value %0 that cannot be represented in a %1-bit %select{signed|unsigned}2 integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3918" name="err_ident_list_in_fn_declaration">
        <segment state="initial">
          <source>a parameter list without types is only allowed in a function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3919" name="err_illegal_container_subscripting_op">
        <segment state="initial">
          <source>illegal operation on Objective-C container subscripting</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3920" name="err_illegal_decl_array_of_functions">
        <segment state="initial">
          <source>'%0' declared as array of functions of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3921" name="err_illegal_decl_array_of_references">
        <segment state="initial">
          <source>'%0' declared as array of references of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3922" name="err_illegal_decl_mempointer_in_nonclass">
        <segment state="initial">
          <source>%0 does not point into a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3923" name="err_illegal_decl_mempointer_to_reference">
        <segment state="initial">
          <source>'%0' declared as a member pointer to a reference of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3924" name="err_illegal_decl_mempointer_to_void">
        <segment state="initial">
          <source>'%0' declared as a member pointer to void</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3925" name="err_illegal_decl_pointer_to_reference">
        <segment state="initial">
          <source>'%0' declared as a pointer to a reference of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3926" name="err_illegal_initializer">
        <segment state="initial">
          <source>illegal initializer (only variables can be initialized)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3927" name="err_illegal_initializer_type">
        <segment state="initial">
          <source>illegal initializer type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3928" name="err_illegal_message_expr_incomplete_type">
        <segment state="initial">
          <source>Objective-C message has incomplete result type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3929" name="err_illegal_qualifiers_on_catch_parm">
        <segment state="initial">
          <source>illegal qualifiers on @catch parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3930" name="err_illegal_union_or_anon_struct_member">
        <segment state="initial">
          <source>%select{anonymous struct|union}0 member %1 has a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3931" name="err_imaginary_not_supported">
        <segment state="initial">
          <source>imaginary types are not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3932" name="err_immediate_function_used_before_definition">
        <segment state="initial">
          <source>immediate function %0 used before it is defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3933" name="err_impcast_complex_scalar">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 is not permitted in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3934" name="err_implementation_of_class_stub">
        <segment state="initial">
          <source>cannot declare implementation of a class declared with the 'objc_class_stub' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3935" name="err_implicit_coroutine_std_nothrow_type_not_found">
        <segment state="initial">
          <source>std::nothrow was not found; include &lt;new&gt; before defining a coroutine which uses get_return_object_on_allocation_failure()</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3936" name="err_implicit_empty_initializer">
        <segment state="initial">
          <source>initializer for aggregate with no elements requires explicit braces</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3937" name="err_implicit_instantiate_member_undefined">
        <segment state="initial">
          <source>implicit instantiation of undefined member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3938" name="err_implied_comparison_category_type_not_found">
        <segment state="initial">
          <source>cannot %select{use builtin operator '&lt;=&gt;'|default 'operator&lt;=&gt;'}1 because type '%0' was not found; include &lt;compare&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3939" name="err_implied_coroutine_type_not_found">
        <segment state="initial">
          <source>%0 type was not found; include &lt;coroutine&gt; before defining a coroutine</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3940" name="err_implied_std_coroutine_traits_promise_type_not_class">
        <segment state="initial">
          <source>this function cannot be a coroutine: %0 is not a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3941" name="err_implied_std_coroutine_traits_promise_type_not_found">
        <segment state="initial">
          <source>this function cannot be a coroutine: %q0 has no member named 'promise_type'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3942" name="err_implied_std_initializer_list_not_found">
        <segment state="initial">
          <source>cannot deduce type of initializer list because std::initializer_list was not found; include &lt;initializer_list&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3943" name="err_in_class_initializer_bad_type">
        <segment state="initial">
          <source>static data member of type %0 must be initialized out of line</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3944" name="err_in_class_initializer_literal_type">
        <segment state="initial">
          <source>in-class initializer for static data member of type %0 requires 'constexpr' specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3945" name="err_in_class_initializer_non_const">
        <segment state="initial">
          <source>non-const static data member must be initialized out of line</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3946" name="err_in_class_initializer_non_constant">
        <segment state="initial">
          <source>in-class initializer for static data member is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3947" name="err_in_class_initializer_volatile">
        <segment state="initial">
          <source>static const volatile data member must be initialized out of line</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3948" name="err_incompatible_exception_specs">
        <segment state="initial">
          <source>target exception specification is not superset of source</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3949" name="err_incompatible_qualified_id">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3950" name="err_incompatible_replacement_type">
        <segment state="initial">
          <source>API notes replacement type %0 has a different size from original type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3951" name="err_incompatible_vectors">
        <segment state="initial">
          <source>incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3952" name="err_incomplete_base_class">
        <segment state="initial">
          <source>base class has incomplete type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3953" name="err_incomplete_enum">
        <segment state="initial">
          <source>enumeration %0 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3954" name="err_incomplete_in_exception_spec">
        <segment state="initial">
          <source>%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3955" name="err_incomplete_member_access">
        <segment state="initial">
          <source>member access into incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3956" name="err_incomplete_nested_name_spec">
        <segment state="initial">
          <source>incomplete type %0 named in nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3957" name="err_incomplete_object_call">
        <segment state="initial">
          <source>incomplete type in call to object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3958" name="err_incomplete_receiver_type">
        <segment state="initial">
          <source>incomplete receiver type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3959" name="err_incomplete_synthesized_property">
        <segment state="initial">
          <source>cannot synthesize property %0 with incomplete type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3960" name="err_incomplete_type">
        <segment state="initial">
          <source>incomplete type %0 where a complete type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3961" name="err_incomplete_type_objc_at_encode">
        <segment state="initial">
          <source>'@encode' of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3962" name="err_incomplete_type_used_in_type_trait_expr">
        <segment state="initial">
          <source>incomplete type %0 used in type trait expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3963" name="err_incomplete_type_vtable_pointer_auth">
        <segment state="initial">
          <source>cannot set vtable pointer authentication on an incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3964" name="err_incomplete_typeid">
        <segment state="initial">
          <source>'typeid' of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3965" name="err_inconsistent_deduction">
        <segment state="initial">
          <source>conflicting deduction %diff{$ against $|types}0,1 for parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3966" name="err_inconsistent_ivar_count">
        <segment state="initial">
          <source>inconsistent number of instance variables specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3967" name="err_incorrect_defaulted_constexpr">
        <segment state="initial">
          <source>defaulted definition of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be marked %select{constexpr|consteval}1 before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3968" name="err_incorrect_defaulted_constexpr_with_vb">
        <segment state="initial">
          <source>%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be 'constexpr' in a class with virtual base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3969" name="err_incorrect_number_of_vector_initializers">
        <segment state="initial">
          <source>number of elements must be either one or match the size of the vector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3970" name="err_increment_decrement_enum">
        <segment state="initial">
          <source>cannot %select{decrement|increment}0 expression of enum type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3971" name="err_indirect_goto_in_protected_scope">
        <segment state="initial">
          <source>cannot jump from this %select{indirect|asm}0 goto statement to one of its possible targets</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3972" name="err_indirect_goto_without_addrlabel">
        <segment state="initial">
          <source>indirect goto in function with no address-of-label expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3973" name="err_init_capture_deduction_failure">
        <segment state="initial">
          <source>cannot deduce type for lambda capture %0 from initializer of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3974" name="err_init_capture_deduction_failure_from_init_list">
        <segment state="initial">
          <source>cannot deduce type for lambda capture %0 from initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3975" name="err_init_capture_multiple_expressions">
        <segment state="initial">
          <source>initializer for lambda capture %0 contains multiple expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3976" name="err_init_capture_no_expression">
        <segment state="initial">
          <source>initializer missing for lambda capture %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3977" name="err_init_capture_paren_braces">
        <segment state="initial">
          <source>cannot deduce type for lambda capture %1 from %select{parenthesized|nested}0 initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3978" name="err_init_conversion_failed">
        <segment state="initial">
          <source>cannot initialize %select{a variable|a parameter|template parameter|return object|statement expression result|an exception object|a member subobject|an array element|a new value|a value|a base class|a constructor delegation|a vector element|a block element|a block element|a complex element|a lambda capture|a compound literal initializer|a related result|a parameter of CF audited function|a structured binding|a member subobject}0 %diff{of type $ with an %select{rvalue|lvalue}2 of type $|with an %select{rvalue|lvalue}2 of incompatible type}1,3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3979" name="err_init_element_not_constant">
        <segment state="initial">
          <source>initializer element is not a compile-time constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3980" name="err_init_for_function_type">
        <segment state="initial">
          <source>cannot create object of function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3981" name="err_init_incomplete_type">
        <segment state="initial">
          <source>initialization of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3982" name="err_init_list_bad_dest_type">
        <segment state="initial">
          <source>%select{|non-aggregate }0type %1 cannot be initialized with an initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3983" name="err_init_method_bad_return_type">
        <segment state="initial">
          <source>init methods must return an object pointer type, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3984" name="err_init_non_aggr_init_list">
        <segment state="initial">
          <source>initialization of non-aggregate type %0 with an initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3985" name="err_init_objc_class">
        <segment state="initial">
          <source>cannot initialize Objective-C class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3986" name="err_init_priority_object_attr">
        <segment state="initial">
          <source>can only use 'init_priority' attribute on file-scope definitions of objects of class type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3987" name="err_init_reference_member_uninitialized">
        <segment state="initial">
          <source>reference member of type %0 uninitialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3988" name="err_initializer_overrides_destructed">
        <segment state="initial">
          <source>initializer would partially override prior initialization of object of type %1 with non-trivial destruction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3989" name="err_initializer_string_for_char_array_too_long">
        <segment state="initial">
          <source>initializer-string for char array is too long, array size is %0 but initializer has size %1 (including the null terminating character)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3990" name="err_inline_decl_follows_def">
        <segment state="initial">
          <source>inline declaration of %0 follows non-inline definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3991" name="err_inline_declaration_block_scope">
        <segment state="initial">
          <source>inline declaration of %0 not allowed in block scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3992" name="err_inline_main">
        <segment state="initial">
          <source>'main' is not allowed to be declared inline</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3993" name="err_inline_namespace_mismatch">
        <segment state="initial">
          <source>non-inline namespace cannot be reopened as inline</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3994" name="err_inline_namespace_std">
        <segment state="initial">
          <source>cannot declare the namespace 'std' to be inline</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3995" name="err_inline_non_function">
        <segment state="initial">
          <source>'inline' can only appear on functions%select{| and non-local variables}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3996" name="err_int_to_block_pointer">
        <segment state="initial">
          <source>invalid block pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3997" name="err_integer_incorrect_bit_count">
        <segment state="initial">
          <source>incorrect number of bits in integer (expected %0 bits, have %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3998" name="err_integer_sequence_integral_element_type">
        <segment state="initial">
          <source>integer sequences must have integral element type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="3999" name="err_integer_sequence_negative_length">
        <segment state="initial">
          <source>integer sequences must have non-negative sequence length</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4000" name="err_introducing_special_friend">
        <segment state="initial">
          <source>%plural{[0,2]:must use a qualified name when declaring|3:cannot declare}0 a %select{constructor|destructor|conversion operator|deduction guide}0 as a friend</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4001" name="err_invalid_address_discrimination">
        <segment state="initial">
          <source>invalid address discrimination mode %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4002" name="err_invalid_asm_value_for_constraint">
        <segment state="initial">
          <source>value '%0' out of range for constraint '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4003" name="err_invalid_astype_of_different_size">
        <segment state="initial">
          <source>invalid reinterpretation: sizes of %0 and %1 must match</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4004" name="err_invalid_authentication_key">
        <segment state="initial">
          <source>invalid authentication key %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4005" name="err_invalid_base_in_interface">
        <segment state="initial">
          <source>interface type cannot inherit from %select{struct|non-public interface|class}0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4006" name="err_invalid_branch_protection_spec">
        <segment state="initial">
          <source>invalid or misplaced branch protection specification '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4007" name="err_invalid_collection_element">
        <segment state="initial">
          <source>collection element of type %0 is not an Objective-C object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4008" name="err_invalid_complex_spec">
        <segment state="initial">
          <source>'_Complex %0' is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4009" name="err_invalid_consteval_call">
        <segment state="initial">
          <source>call to %select{immediate|consteval}1 function %q0 is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4010" name="err_invalid_consteval_decl_kind">
        <segment state="initial">
          <source>%0 cannot be declared consteval</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4011" name="err_invalid_consteval_take_address">
        <segment state="initial">
          <source>cannot take address of %select{immediate|consteval}2 %select{function|call operator of}1 %0 outside of an immediate invocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4012" name="err_invalid_constexpr">
        <segment state="initial">
          <source>%select{function parameter|typedef}0 cannot be %select{&lt;ERROR&gt;|constexpr|consteval|constinit}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4013" name="err_invalid_constexpr_member">
        <segment state="initial">
          <source>non-static data member cannot be constexpr%select{; did you intend to make it %select{const|static}0?|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4014" name="err_invalid_constexpr_var_decl">
        <segment state="initial">
          <source>constexpr variable declaration must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4015" name="err_invalid_conversion_between_ext_vectors">
        <segment state="initial">
          <source>invalid conversion between ext-vector type %0 and %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4016" name="err_invalid_conversion_between_matrix_and_type">
        <segment state="initial">
          <source>conversion between matrix type %0 and incompatible type %1 is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4017" name="err_invalid_conversion_between_matrixes">
        <segment state="initial">
          <source>conversion between matrix types%diff{ $ and $|}0,1 of different size is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4018" name="err_invalid_conversion_between_vector_and_integer">
        <segment state="initial">
          <source>invalid conversion between vector type %0 and integer type %1 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4019" name="err_invalid_conversion_between_vector_and_scalar">
        <segment state="initial">
          <source>invalid conversion between vector type %0 and scalar type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4020" name="err_invalid_conversion_between_vectors">
        <segment state="initial">
          <source>invalid conversion between vector type%diff{ $ and $|}0,1 of different size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4021" name="err_invalid_cpu_is">
        <segment state="initial">
          <source>invalid cpu name for builtin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4022" name="err_invalid_cpu_specific_dispatch_value">
        <segment state="initial">
          <source>invalid option '%0' for %select{cpu_specific|cpu_dispatch}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4023" name="err_invalid_ctor_dtor_decl">
        <segment state="initial">
          <source>invalid %select{constructor|destructor}0 declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4024" name="err_invalid_custom_discrimination">
        <segment state="initial">
          <source>invalid custom discrimination</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4025" name="err_invalid_decl_spec_combination">
        <segment state="initial">
          <source>cannot combine with previous '%0' declaration specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4026" name="err_invalid_decl_specifier_in_nontype_parm">
        <segment state="initial">
          <source>invalid declaration specifier in template non-type parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4027" name="err_invalid_declarator_global_scope">
        <segment state="initial">
          <source>definition or redeclaration of %0 cannot name the global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4028" name="err_invalid_declarator_in_block">
        <segment state="initial">
          <source>definition or redeclaration of %0 not allowed inside a block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4029" name="err_invalid_declarator_in_function">
        <segment state="initial">
          <source>definition or redeclaration of %0 not allowed inside a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4030" name="err_invalid_declarator_scope">
        <segment state="initial">
          <source>cannot define or redeclare %0 here because namespace %1 does not enclose namespace %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4031" name="err_invalid_explicit_object_type_in_lambda">
        <segment state="initial">
          <source>invalid explicit object parameter type %0 in lambda with capture; the type must be the same as, or derived from, the lambda</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4032" name="err_invalid_extra_discrimination">
        <segment state="initial">
          <source>invalid extra discrimination selection %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4033" name="err_invalid_form_pointer_member_function">
        <segment state="initial">
          <source>cannot create a non-constant pointer to member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4034" name="err_invalid_hlsl_resource_type">
        <segment state="initial">
          <source>invalid __hlsl_resource_t type attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4035" name="err_invalid_incomplete_type_use">
        <segment state="initial">
          <source>invalid use of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4036" name="err_invalid_mask_type_size">
        <segment state="initial">
          <source>mask type size must be between 1-byte and 8-bytes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4037" name="err_invalid_member_use_in_method">
        <segment state="initial">
          <source>invalid use of member %0 in %select{static|explicit object}1 member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4038" name="err_invalid_module_name">
        <segment state="initial">
          <source>%0 is an invalid name for a module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4039" name="err_invalid_neon_type_code">
        <segment state="initial">
          <source>incompatible constant for this __builtin_neon function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4040" name="err_invalid_non_static_member_use">
        <segment state="initial">
          <source>invalid use of non-static data member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4041" name="err_invalid_nsnumber_type">
        <segment state="initial">
          <source>%0 is not a valid literal type for NSNumber</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4042" name="err_invalid_pcs">
        <segment state="initial">
          <source>invalid PCS type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4043" name="err_invalid_pixel_decl_spec_combination">
        <segment state="initial">
          <source>'__pixel' must be preceded by '__vector'.  '%0' declaration specifier not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4044" name="err_invalid_property_name">
        <segment state="initial">
          <source>%0 is not a valid property name (accessing an object of type %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4045" name="err_invalid_protocol_qualifiers">
        <segment state="initial">
          <source>invalid protocol qualifiers on non-ObjC type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4046" name="err_invalid_qualified_constructor">
        <segment state="initial">
          <source>'%0' qualifier is not allowed on a constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4047" name="err_invalid_qualified_destructor">
        <segment state="initial">
          <source>'%0' qualifier is not allowed on a destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4048" name="err_invalid_qualified_function_type">
        <segment state="initial">
          <source>%select{non-member function|static member function|explicit object member function|deduction guide}0 %select{of type %2 |}1cannot have '%3' qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4049" name="err_invalid_receiver_class_message">
        <segment state="initial">
          <source>receiver type %0 is not an Objective-C class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4050" name="err_invalid_receiver_to_message_super">
        <segment state="initial">
          <source>'super' is only valid in a method body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4051" name="err_invalid_saturation_spec">
        <segment state="initial">
          <source>'_Sat' specifier is only valid on '_Fract' or '_Accum', not '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4052" name="err_invalid_sign_spec">
        <segment state="initial">
          <source>'%0' cannot be signed or unsigned</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4053" name="err_invalid_super_scope">
        <segment state="initial">
          <source>invalid use of '__super', this keyword can only be used inside class or member function scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4054" name="err_invalid_this_use">
        <segment state="initial">
          <source>invalid use of 'this' %select{outside of a non-static member function|in a function with an explicit object parameter}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4055" name="err_invalid_thread">
        <segment state="initial">
          <source>'%0' is only allowed on variable declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4056" name="err_invalid_type_for_program_scope_var">
        <segment state="initial">
          <source>the %0 type cannot be used to declare a program scope variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4057" name="err_invalid_use_of_array_type">
        <segment state="initial">
          <source>an array type is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4058" name="err_invalid_use_of_function_type">
        <segment state="initial">
          <source>a function type is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4059" name="err_invalid_var_template_spec_type">
        <segment state="initial">
          <source>type %2 of %select{explicit instantiation|explicit specialization|partial specialization|redeclaration}0 of %1 does not match expected type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4060" name="err_invalid_vector_bool_decl_spec">
        <segment state="initial">
          <source>cannot use '%0' with '__vector bool'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4061" name="err_invalid_vector_bool_int128_decl_spec">
        <segment state="initial">
          <source>use of '__int128' with '__vector bool' requires VSX support enabled (on POWER10 or later)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4062" name="err_invalid_vector_complex_decl_spec">
        <segment state="initial">
          <source>cannot use '_Complex' with '__vector'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4063" name="err_invalid_vector_decl_spec_combination">
        <segment state="initial">
          <source>cannot combine with previous '%0' declaration specifier. '__vector' must be first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4064" name="err_invalid_vector_double_decl_spec">
        <segment state="initial">
          <source>use of 'double' with '__vector' requires VSX support to be enabled (available on POWER7 or later)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4065" name="err_invalid_vector_float_decl_spec">
        <segment state="initial">
          <source>cannot use 'float' with '__vector'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4066" name="err_invalid_vector_int128_decl_spec">
        <segment state="initial">
          <source>use of '__int128' with '__vector' requires extended Altivec support (available on POWER8 or later)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4067" name="err_invalid_vector_long_decl_spec">
        <segment state="initial">
          <source>cannot use 'long' with '__vector'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4068" name="err_invalid_vector_long_double_decl_spec">
        <segment state="initial">
          <source>cannot use 'long double' with '__vector'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4069" name="err_invalid_vector_long_long_decl_spec">
        <segment state="initial">
          <source>use of 'long long' with '__vector' requires VSX support (available on POWER7 or later) to be enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4070" name="err_invalid_width_spec">
        <segment state="initial">
          <source>'%select{|short|long|long long}0 %1' is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4071" name="err_ivar_access_using_property_syntax_suggest">
        <segment state="initial">
          <source>property %0 not found on object of type %1; did you mean to access instance variable %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4072" name="err_ivar_in_superclass_use">
        <segment state="initial">
          <source>property %0 attempting to use instance variable %1 declared in super class %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4073" name="err_ivar_reference_type">
        <segment state="initial">
          <source>instance variables cannot be of reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4074" name="err_ivar_use_in_class_method">
        <segment state="initial">
          <source>instance variable %0 accessed in class method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4075" name="err_kern_call_not_global_function">
        <segment state="initial">
          <source>kernel call to non-global function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4076" name="err_kern_is_nonstatic_method">
        <segment state="initial">
          <source>kernel function %0 must be a free function or static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4077" name="err_kern_type_not_void_return">
        <segment state="initial">
          <source>kernel function type %0 must have void return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4078" name="err_kernel_arg_address_space">
        <segment state="initial">
          <source>pointer arguments to kernel functions must reside in '__global', '__constant' or '__local' address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4079" name="err_lambda_capture_anonymous_var">
        <segment state="initial">
          <source>unnamed variable cannot be implicitly captured in a lambda expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4080" name="err_lambda_capture_default_arg">
        <segment state="initial">
          <source>lambda expression in default argument cannot capture any entity</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4081" name="err_lambda_capture_flexarray_type">
        <segment state="initial">
          <source>variable %0 with flexible array member cannot be captured in a lambda expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4082" name="err_lambda_decl_ref_not_modifiable_lvalue">
        <segment state="initial">
          <source>cannot assign to a variable captured by copy in a non-mutable lambda</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4083" name="err_lambda_explicit_spec">
        <segment state="initial">
          <source>lambda call operator should not be explicitly specialized or instantiated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4084" name="err_lambda_impcap">
        <segment state="initial">
          <source>variable %0 cannot be implicitly captured in a lambda with no capture-default specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4085" name="err_lambda_in_constant_expression">
        <segment state="initial">
          <source>a lambda expression may not appear inside of a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4086" name="err_lambda_in_invalid_context">
        <segment state="initial">
          <source>a lambda expression cannot appear in this context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4087" name="err_lambda_incomplete_result">
        <segment state="initial">
          <source>incomplete result type %0 in lambda expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4088" name="err_lambda_return_init_list">
        <segment state="initial">
          <source>cannot deduce lambda return type from initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4089" name="err_lambda_unevaluated_operand">
        <segment state="initial">
          <source>lambda expression in an unevaluated operand</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4090" name="err_language_linkage_spec_unknown">
        <segment state="initial">
          <source>unknown linkage language</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4091" name="err_late_asm_label_name">
        <segment state="initial">
          <source>cannot apply asm label to %select{variable|function}0 after its first use</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4092" name="err_lifetimebound_ctor_dtor">
        <segment state="initial">
          <source>'lifetimebound' attribute cannot be applied to a %select{constructor|destructor}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4093" name="err_lifetimebound_implicit_object_parameter_void_return_type">
        <segment state="initial">
          <source>'lifetimebound' attribute cannot be applied to an implicit object parameter of a function that returns void; did you mean 'lifetime_capture_by(X)'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4094" name="err_lifetimebound_no_object_param">
        <segment state="initial">
          <source>'lifetimebound' attribute cannot be applied; %select{non-|static |explicit object }0member function has no implicit object parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4095" name="err_lifetimebound_parameter_void_return_type">
        <segment state="initial">
          <source>'lifetimebound' attribute cannot be applied to a parameter of a function that returns void; did you mean 'lifetime_capture_by(X)'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4096" name="err_list_init_in_parens">
        <segment state="initial">
          <source>cannot initialize %select{non-class|reference}0 type %1 with a parenthesized initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4097" name="err_literal_operator_bad_param_count">
        <segment state="initial">
          <source>non-template literal operator must have one or two parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4098" name="err_literal_operator_default_argument">
        <segment state="initial">
          <source>literal operator cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4099" name="err_literal_operator_extern_c">
        <segment state="initial">
          <source>literal operator must have C++ linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4100" name="err_literal_operator_id_outside_namespace">
        <segment state="initial">
          <source>non-namespace scope %0 cannot have a literal operator member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4101" name="err_literal_operator_invalid_param">
        <segment state="initial">
          <source>parameter of literal operator must have type 'unsigned long long', 'long double', 'char', 'wchar_t', 'char16_t', 'char32_t', or 'const char *'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4102" name="err_literal_operator_outside_namespace">
        <segment state="initial">
          <source>literal operator %0 must be in a namespace or global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4103" name="err_literal_operator_param">
        <segment state="initial">
          <source>invalid literal operator parameter type %0, did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4104" name="err_literal_operator_template">
        <segment state="initial">
          <source>template parameter list for literal operator must be either 'char...' or 'typename T, T...'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4105" name="err_literal_operator_template_with_params">
        <segment state="initial">
          <source>literal operator template cannot have any parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4106" name="err_loader_uninitialized_cant_init">
        <segment state="initial">
          <source>variable with 'loader_uninitialized' attribute cannot have an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4107" name="err_loader_uninitialized_extern_decl">
        <segment state="initial">
          <source>variable %0 cannot be declared both 'extern' and with the 'loader_uninitialized' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4108" name="err_loader_uninitialized_redeclaration">
        <segment state="initial">
          <source>redeclaration cannot add 'loader_uninitialized' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4109" name="err_loader_uninitialized_trivial_ctor">
        <segment state="initial">
          <source>variable with 'loader_uninitialized' attribute must have a trivial default constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4110" name="err_local_cant_init">
        <segment state="initial">
          <source>'__local' variable cannot have an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4111" name="err_loop_attr_conflict">
        <segment state="initial">
          <source>conflicting loop attribute %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4112" name="err_lvalue_reference_bind_to_initlist">
        <segment state="initial">
          <source>%select{non-const|volatile}0 lvalue reference to type %1 cannot bind to an initializer list temporary</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4113" name="err_lvalue_reference_bind_to_temporary">
        <segment state="initial">
          <source>%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a temporary of type $|cannot bind to incompatible temporary}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4114" name="err_lvalue_reference_bind_to_unrelated">
        <segment state="initial">
          <source>%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a value of unrelated type $|cannot bind to a value of unrelated type}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4115" name="err_lvalue_to_rvalue_ref">
        <segment state="initial">
          <source>rvalue reference %diff{to type $ cannot bind to lvalue of type $|cannot bind to incompatible lvalue}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4116" name="err_machine_mode">
        <segment state="initial">
          <source>%select{unknown|unsupported}0 machine mode %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4117" name="err_main_arg_wrong">
        <segment state="initial">
          <source>%select{first|second|third|fourth}0 parameter of 'main' (%select{argument count|argument array|environment|platform-specific data}0) must be of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4118" name="err_main_global_variable">
        <segment state="initial">
          <source>main cannot be declared as a variable %select{in the global scope|with C language linkage}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4119" name="err_main_returns_nonint">
        <segment state="initial">
          <source>'main' must return 'int'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4120" name="err_main_surplus_args">
        <segment state="initial">
          <source>too many parameters (%0) for 'main': must be 0, 2, or 3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4121" name="err_mainlike_template_decl">
        <segment state="initial">
          <source>%0 cannot be a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4122" name="err_make_signed_integral_only">
        <segment state="initial">
          <source>'%select{make_unsigned|make_signed}0' is only compatible with non-%select{bool|_BitInt(1)}1 integers and enum types, but was given %2%select{| whose underlying type is %4}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4123" name="err_malformed_std_class_template">
        <segment state="initial">
          <source>std::%0 must be a class template with a single type parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4124" name="err_malformed_std_coroutine_handle">
        <segment state="initial">
          <source>std::coroutine_handle isn't a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4125" name="err_malformed_std_coroutine_traits">
        <segment state="initial">
          <source>std::coroutine_traits isn't a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4126" name="err_malformed_std_nothrow">
        <segment state="initial">
          <source>std::nothrow must be a valid variable declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4127" name="err_matrix_incomplete_index">
        <segment state="initial">
          <source>single subscript expressions are not allowed for matrix values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4128" name="err_matrix_index_not_integer">
        <segment state="initial">
          <source>matrix %select{row|column}0 index is not an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4129" name="err_matrix_index_outside_range">
        <segment state="initial">
          <source>matrix %select{row|column}0 index is outside the allowed range [0, %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4130" name="err_matrix_separate_incomplete_index">
        <segment state="initial">
          <source>matrix row and column subscripts cannot be separated by any expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4131" name="err_matrix_subscript_comma">
        <segment state="initial">
          <source>comma expressions are not allowed as indices in matrix subscript expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4132" name="err_mem_init_not_member_or_class">
        <segment state="initial">
          <source>member initializer %0 does not name a non-static data member or base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4133" name="err_mem_init_not_member_or_class_suggest">
        <segment state="initial">
          <source>initializer %0 does not name a non-static data member or base class; did you mean the %select{base class|member}1 %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4134" name="err_member_call_without_object">
        <segment state="initial">
          <source>call to %select{non-static|explicit}0 member function without an object argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4135" name="err_member_decl_does_not_match">
        <segment state="initial">
          <source>out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4136" name="err_member_decl_does_not_match_suggest">
        <segment state="initial">
          <source>out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1; did you mean %3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4137" name="err_member_def_does_not_match_ret_type">
        <segment state="initial">
          <source>return type of out-of-line definition of %q0 differs from that in the declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4138" name="err_member_def_undefined_record">
        <segment state="initial">
          <source>out-of-line definition of %0 from class %1 without definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4139" name="err_member_extra_qualification">
        <segment state="initial">
          <source>extra qualification on member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4140" name="err_member_function_call_bad_cvr">
        <segment state="initial">
          <source>'this' argument to member function %0 has type %1, but function is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4141" name="err_member_function_call_bad_ref">
        <segment state="initial">
          <source>'this' argument to member function %0 is an %select{lvalue|rvalue}1, but function has %select{non-const lvalue|rvalue}2 ref-qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4142" name="err_member_function_call_bad_type">
        <segment state="initial">
          <source>cannot initialize object parameter of type %0 with an expression of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4143" name="err_member_function_initialization">
        <segment state="initial">
          <source>initializer on function does not look like a pure-specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4144" name="err_member_name_of_class">
        <segment state="initial">
          <source>member %0 has the same name as its class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4145" name="err_member_not_yet_instantiated">
        <segment state="initial">
          <source>no member %0 in %1; it has not yet been instantiated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4146" name="err_member_qualification">
        <segment state="initial">
          <source>non-friend class member %0 cannot have a qualified name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4147" name="err_member_redeclared">
        <segment state="initial">
          <source>class member cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4148" name="err_member_redeclared_in_instantiation">
        <segment state="initial">
          <source>multiple overloads of %0 instantiate to the same signature %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4149" name="err_member_reference_needs_call">
        <segment state="initial">
          <source>base of member reference is a function; perhaps you meant to call it%select{| with no arguments}0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4150" name="err_member_with_template_arguments">
        <segment state="initial">
          <source>member %0 cannot have template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4151" name="err_memptr_conv_via_virtual">
        <segment state="initial">
          <source>conversion from pointer to member of class %0 to pointer to member of class %1 via virtual base %2 is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4152" name="err_memptr_incomplete">
        <segment state="initial">
          <source>member pointer has incomplete base type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4153" name="err_memtag_any2arg_pointer">
        <segment state="initial">
          <source>at least one argument of MTE builtin function must be a pointer (%0, %1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4154" name="err_memtag_arg_must_be_integer">
        <segment state="initial">
          <source>%0 argument of MTE builtin function must be an integer type (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4155" name="err_memtag_arg_must_be_pointer">
        <segment state="initial">
          <source>%0 argument of MTE builtin function must be a pointer (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4156" name="err_memtag_arg_null_or_pointer">
        <segment state="initial">
          <source>%0 argument of MTE builtin function must be a null or a pointer (%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4157" name="err_messaging_class_with_direct_method">
        <segment state="initial">
          <source>messaging a Class with a method that is possibly direct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4158" name="err_messaging_super_with_direct_method">
        <segment state="initial">
          <source>messaging super with a direct method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4159" name="err_messaging_unqualified_id_with_direct_method">
        <segment state="initial">
          <source>messaging unqualified id with a method that is possibly direct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4160" name="err_method_kernel">
        <segment state="initial">
          <source>kernel functions cannot be class members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4161" name="err_method_not_found_with_typo">
        <segment state="initial">
          <source>%select{instance|class}1 method %0 not found ; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4162" name="err_mips_builtin_requires_dsp">
        <segment state="initial">
          <source>this builtin requires 'dsp' ASE, please use -mdsp</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4163" name="err_mips_builtin_requires_dspr2">
        <segment state="initial">
          <source>this builtin requires 'dsp r2' ASE, please use -mdspr2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4164" name="err_mips_builtin_requires_msa">
        <segment state="initial">
          <source>this builtin requires 'msa' ASE, please use -mmsa</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4165" name="err_mismatched_code_seg_base">
        <segment state="initial">
          <source>derived class must specify the same code segment as its base classes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4166" name="err_mismatched_code_seg_override">
        <segment state="initial">
          <source>overriding virtual function must specify the same code segment as its overridden function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4167" name="err_mismatched_exception_spec">
        <segment state="initial">
          <source>exception specification in declaration does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4168" name="err_mismatched_exception_spec_explicit_instantiation">
        <segment state="initial">
          <source>exception specification in explicit instantiation does not match instantiated one</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4169" name="err_mismatched_ms_inheritance">
        <segment state="initial">
          <source>inheritance model does not match %select{definition|previous declaration}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4170" name="err_mismatched_owning_module">
        <segment state="initial">
          <source>declaration of %0 in %select{the global module|module %2}1 follows declaration in %select{the global module|module %4}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4171" name="err_mismatched_uuid">
        <segment state="initial">
          <source>uuid does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4172" name="err_mismatched_visibility">
        <segment state="initial">
          <source>visibility does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4173" name="err_mismatching_type_aware_cleanup_deallocator">
        <segment state="initial">
          <source>type aware %0 requires a matching type aware %select{|placement }1%2 to be declared in the same scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4174" name="err_misplaced_ivar">
        <segment state="initial">
          <source>instance variables may not be placed in %select{categories|class extension}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4175" name="err_missing_actual_pipe_type">
        <segment state="initial">
          <source>missing actual type specifier for pipe</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4176" name="err_missing_arm_state">
        <segment state="initial">
          <source>missing state for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4177" name="err_missing_atsign_prefix">
        <segment state="initial">
          <source>%select{string|numeric}0 literal must be prefixed by '@'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4178" name="err_missing_custom_discrimination">
        <segment state="initial">
          <source>missing custom discrimination</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4179" name="err_missing_default_ctor">
        <segment state="initial">
          <source>%select{constructor for %1 must explicitly initialize the|implicit default constructor for %1 must explicitly initialize the|cannot use constructor inherited from base class %4;}0 %select{base class|member}2 %3 %select{which|which|of %1}0 does not have a default constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4180" name="err_missing_exception_specification">
        <segment state="initial">
          <source>%0 is missing exception specification '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4181" name="err_missing_method_context">
        <segment state="initial">
          <source>missing context for method declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4182" name="err_missing_open_square_message_send">
        <segment state="initial">
          <source>missing '[' at start of message send expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4183" name="err_missing_property_context">
        <segment state="initial">
          <source>missing context for property implementation declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4184" name="err_missing_property_interface">
        <segment state="initial">
          <source>property implementation in a category with no category declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4185" name="err_missing_property_ivar_decl">
        <segment state="initial">
          <source>synthesized property %0 must either be named the same as a compatible instance variable or must explicitly name an instance variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4186" name="err_missing_type_specifier">
        <segment state="initial">
          <source>a type specifier is required for all declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4187" name="err_mixing_cxx_try_seh_try">
        <segment state="initial">
          <source>cannot use %select{C++ 'try'|Objective-C '@try'}0 in the same function as SEH '__try'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4188" name="err_mode_not_primitive">
        <segment state="initial">
          <source>mode attribute only supported for integer and floating-point types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4189" name="err_mode_wrong_type">
        <segment state="initial">
          <source>type of machine mode does not match type of base type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4190" name="err_module_decl_in_header_unit">
        <segment state="initial">
          <source>'module' declaration found while building header unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4191" name="err_module_decl_in_module_map_module">
        <segment state="initial">
          <source>'module' declaration found while building module from module map</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4192" name="err_module_decl_not_at_start">
        <segment state="initial">
          <source>module declaration must occur at the start of the translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4193" name="err_module_declaration_missing">
        <segment state="initial">
          <source>missing 'export module' declaration in module interface unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4194" name="err_module_declaration_missing_after_global_module_introducer">
        <segment state="initial">
          <source>missing 'module' declaration at end of global module fragment introduced here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4195" name="err_module_import_in_implementation">
        <segment state="initial">
          <source>@import of module '%0' in implementation of '%1'; use #import</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4196" name="err_module_import_non_interface_nor_parition">
        <segment state="initial">
          <source>import of module '%0' imported non C++20 importable modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4197" name="err_module_import_not_at_top_level_fatal">
        <segment state="initial">
          <source>import of module '%0' appears within %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4198" name="err_module_interface_implementation_mismatch">
        <segment state="initial">
          <source>missing 'export' specifier in module declaration while building module interface</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4199" name="err_module_not_defined">
        <segment state="initial">
          <source>definition of module '%0' is not available; use -fmodule-file= to specify path to precompiled module interface</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4200" name="err_module_private_local">
        <segment state="initial">
          <source>%select{local variable|parameter|typedef}0 %1 cannot be declared __module_private__</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4201" name="err_module_private_local_class">
        <segment state="initial">
          <source>local %select{struct|interface|union|class|enum}0 cannot be declared __module_private__</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4202" name="err_module_private_specialization">
        <segment state="initial">
          <source>%select{template|partial|member}0 specialization cannot be declared __module_private__</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4203" name="err_module_redeclaration">
        <segment state="initial">
          <source>translation unit contains multiple module declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4204" name="err_module_redefinition">
        <segment state="initial">
          <source>redefinition of module '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4205" name="err_module_self_import">
        <segment state="initial">
          <source>import of module '%0' appears within same top-level module '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4206" name="err_module_self_import_cxx20">
        <segment state="initial">
          <source>import of module '%0' appears within its own %select{interface|implementation}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4207" name="err_module_unimported_use">
        <segment state="initial">
          <source>%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from module '%2' before it is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4208" name="err_module_unimported_use_header">
        <segment state="initial">
          <source>%select{missing '#include'|missing '#include %3'}2; %select{||default argument of |explicit specialization of |partial specialization of }0%1 must be %select{declared|defined|defined|declared|declared}0 before it is used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4209" name="err_module_unimported_use_multiple">
        <segment state="initial">
          <source>%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from one of the following modules before it is required:%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4210" name="err_ms___leave_not_in___try">
        <segment state="initial">
          <source>'__leave' statement not in __try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4211" name="err_ms_constexpr_cannot_be_applied">
        <segment state="initial">
          <source>attribute 'msvc::constexpr' cannot be applied to the %select{constexpr|consteval|virtual}0 function %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4212" name="err_ms_va_start_used_in_sysv_function">
        <segment state="initial">
          <source>'__builtin_ms_va_start' used in System V ABI function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4213" name="err_msvc_annotation_wide_str">
        <segment state="initial">
          <source>arguments to __annotation must be wide string constants</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4214" name="err_multiple_base_initialization">
        <segment state="initial">
          <source>multiple initializations given for base %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4215" name="err_multiple_decl_in_different_modules">
        <segment state="initial">
          <source>declaration %0 attached to named module '%1' cannot be attached to other modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4216" name="err_multiple_default_labels_defined">
        <segment state="initial">
          <source>multiple default labels in one switch</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4217" name="err_multiple_final_overriders">
        <segment state="initial">
          <source>virtual function %q0 has more than one final overrider in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4218" name="err_multiple_mem_initialization">
        <segment state="initial">
          <source>multiple initializations given for non-static member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4219" name="err_multiple_mem_union_initialization">
        <segment state="initial">
          <source>initializing multiple members of union</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4220" name="err_multiversion_after_used">
        <segment state="initial">
          <source>function declaration cannot become a multiversioned function after first usage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4221" name="err_multiversion_diff">
        <segment state="initial">
          <source>multiversioned function declaration has a different %select{calling convention|return type|constexpr specification|inline specification|linkage|language linkage}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4222" name="err_multiversion_disallowed_other_attr">
        <segment state="initial">
          <source>attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioning cannot be combined with attribute %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4223" name="err_multiversion_doesnt_support">
        <segment state="initial">
          <source>attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioned functions do not yet support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function|lambdas}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4224" name="err_multiversion_duplicate">
        <segment state="initial">
          <source>multiversioned function redeclarations require identical target attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4225" name="err_multiversion_noproto">
        <segment state="initial">
          <source>multiversioned function must have a prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4226" name="err_multiversion_not_allowed_on_main">
        <segment state="initial">
          <source>'main' cannot be a multiversioned function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4227" name="err_multiversion_not_supported">
        <segment state="initial">
          <source>function multiversioning is not supported on the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4228" name="err_multiversion_required_in_redecl">
        <segment state="initial">
          <source>function declaration is missing %select{'target'|'cpu_specific' or 'cpu_dispatch'|'target_version'}0 attribute in a multiversioned function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4229" name="err_multiversion_types_mixed">
        <segment state="initial">
          <source>multiversioning attributes cannot be combined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4230" name="err_musttail_callconv_mismatch">
        <segment state="initial">
          <source>cannot perform a tail call to function%select{| %1}0 because it uses an incompatible calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4231" name="err_musttail_forbidden_from_this_context">
        <segment state="initial">
          <source>%0 attribute cannot be used from %select{a block|an Objective-C function|this context}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4232" name="err_musttail_member_mismatch">
        <segment state="initial">
          <source>%select{non-member|static member|non-static member}0 function cannot perform a tail call to %select{non-member|static member|non-static member|pointer-to-member}1 function%select{| %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4233" name="err_musttail_mismatch">
        <segment state="initial">
          <source>cannot perform a tail call to function%select{| %1}0 because its signature is incompatible with the calling function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4234" name="err_musttail_needs_call">
        <segment state="initial">
          <source>%0 attribute requires that the return value is the result of a function call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4235" name="err_musttail_needs_prototype">
        <segment state="initial">
          <source>%0 attribute requires that both caller and callee functions have a prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4236" name="err_musttail_needs_trivial_args">
        <segment state="initial">
          <source>tail call requires that the return value, all parameters, and any temporaries created by the expression are trivially destructible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4237" name="err_musttail_no_return">
        <segment state="initial">
          <source>%0 attribute may not be used with no-return-attribute functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4238" name="err_musttail_no_variadic">
        <segment state="initial">
          <source>%0 attribute may not be used with variadic functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4239" name="err_musttail_scope">
        <segment state="initial">
          <source>cannot perform a tail call from this return statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4240" name="err_musttail_structors_forbidden">
        <segment state="initial">
          <source>cannot perform a tail call %select{from|to}0 a %select{constructor|destructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4241" name="err_mutable_const">
        <segment state="initial">
          <source>'mutable' and 'const' cannot be mixed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4242" name="err_mutable_function">
        <segment state="initial">
          <source>'mutable' cannot be applied to functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4243" name="err_mutable_nonmember">
        <segment state="initial">
          <source>'mutable' can only be applied to member variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4244" name="err_mutable_reference">
        <segment state="initial">
          <source>'mutable' cannot be applied to references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4245" name="err_need_header_before_placement_new">
        <segment state="initial">
          <source>no matching %0 function for non-allocating placement new expression; include &lt;new&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4246" name="err_need_header_before_typeid">
        <segment state="initial">
          <source>you need to include &lt;typeinfo&gt; before using the 'typeid' operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4247" name="err_nested_name_member_ref_lookup_ambiguous">
        <segment state="initial">
          <source>lookup of %0 in member access expression is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4248" name="err_nested_name_spec_is_not_class">
        <segment state="initial">
          <source>%0 cannot appear before '::' because it is not a class%select{ or namespace|, namespace, or enumeration}1; did you mean ':'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4249" name="err_nested_name_spec_non_tag">
        <segment state="initial">
          <source>type %0 cannot be used prior to '::' because it has no members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4250" name="err_nested_non_static_member_use">
        <segment state="initial">
          <source>%select{call to non-static member function|use of non-static data member}0 %2 of %1 from nested type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4251" name="err_nested_pointer_qualifier_mismatch">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4252" name="err_nested_redefinition">
        <segment state="initial">
          <source>nested redefinition of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4253" name="err_new_abi_tag_on_redeclaration">
        <segment state="initial">
          <source>'abi_tag' %0 missing in original declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4254" name="err_new_array_init_args">
        <segment state="initial">
          <source>array 'new' cannot have initialization arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4255" name="err_new_array_nonconst">
        <segment state="initial">
          <source>only the first dimension of an allocated array may have dynamic size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4256" name="err_new_array_of_auto">
        <segment state="initial">
          <source>cannot allocate array of 'auto'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4257" name="err_new_array_size_unknown_from_init">
        <segment state="initial">
          <source>cannot determine allocated array size from initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4258" name="err_new_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>allocation of %select{incomplete|sizeless}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4259" name="err_no_accessor_for_property">
        <segment state="initial">
          <source>no %select{getter|setter}0 defined for property %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4260" name="err_no_base_classes">
        <segment state="initial">
          <source>invalid use of '__super', %0 has no base classes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4261" name="err_no_declarators">
        <segment state="initial">
          <source>declaration does not declare anything</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4262" name="err_no_default_vtable_pointer_auth">
        <segment state="initial">
          <source>cannot specify a default vtable pointer authentication %select{key|address discrimination mode|discriminator}0 with no default set</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4263" name="err_no_dynamic_cast_with_fno_rtti">
        <segment state="initial">
          <source>use of dynamic_cast requires -frtti</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4264" name="err_no_matching_local_friend">
        <segment state="initial">
          <source>cannot define friend function in a local class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4265" name="err_no_matching_local_friend_suggest">
        <segment state="initial">
          <source>cannot define friend function %0 in a local class definition; did you mean %3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4266" name="err_no_member">
        <segment state="initial">
          <source>no member named %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4267" name="err_no_member_overloaded_arrow">
        <segment state="initial">
          <source>no member named %0 in %1; did you mean to use '-&gt;' instead of '.'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4268" name="err_no_member_suggest">
        <segment state="initial">
          <source>no member named %0 in %1; did you mean %select{|simply }2%3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4269" name="err_no_member_template">
        <segment state="initial">
          <source>no template named %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4270" name="err_no_member_template_suggest">
        <segment state="initial">
          <source>no template named %0 in %1; did you mean %select{|simply }2%3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4271" name="err_no_nsconstant_string_class">
        <segment state="initial">
          <source>cannot find interface declaration for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4272" name="err_no_subobject_property_setting">
        <segment state="initial">
          <source>expression is not assignable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4273" name="err_no_suitable_delete_member_function_found">
        <segment state="initial">
          <source>no suitable member %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4274" name="err_no_super_class_message">
        <segment state="initial">
          <source>no @interface declaration found in class messaging of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4275" name="err_no_template">
        <segment state="initial">
          <source>no template named %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4276" name="err_no_template_suggest">
        <segment state="initial">
          <source>no template named %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4277" name="err_no_typeid_with_fno_rtti">
        <segment state="initial">
          <source>use of typeid requires -frtti</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4278" name="err_no_viable_destructor">
        <segment state="initial">
          <source>no viable destructor found for class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4279" name="err_nogetter_property_compound_assignment">
        <segment state="initial">
          <source>a getter method is needed to perform a compound assignment on a property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4280" name="err_nogetter_property_incdec">
        <segment state="initial">
          <source>no getter method %1 for %select{increment|decrement}0 of property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4281" name="err_non_asm_stmt_in_naked_function">
        <segment state="initial">
          <source>non-ASM statement in naked function is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4282" name="err_non_bool_atomic_constraint">
        <segment state="initial">
          <source>atomic constraint must be of type 'bool' (found %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4283" name="err_non_c_like_anon_struct_in_typedef">
        <segment state="initial">
          <source>anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4284" name="err_non_constant_constraint_expression">
        <segment state="initial">
          <source>substitution into constraint expression resulted in a non-constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4285" name="err_non_consteval_override">
        <segment state="initial">
          <source>non-consteval function %0 cannot override a consteval function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4286" name="err_non_deduced_mismatch">
        <segment state="initial">
          <source>could not match %diff{$ against $|types}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4287" name="err_non_deleted_override">
        <segment state="initial">
          <source>non-deleted function %0 cannot override a deleted function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4288" name="err_non_designated_init_used">
        <segment state="initial">
          <source>a randomized struct can only be initialized with a designated initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4289" name="err_non_extern_extern">
        <segment state="initial">
          <source>non-extern declaration of %0 follows extern declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4290" name="err_non_first_default_compare_deletes">
        <segment state="initial">
          <source>defaulting %select{this %select{&lt;ERROR&gt;|equality|three-way|equality|relational}1 comparison operator|the corresponding implicit 'operator==' for this defaulted 'operator&lt;=&gt;'}0 would delete it after its first declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4291" name="err_non_first_default_compare_in_class">
        <segment state="initial">
          <source>defaulting this %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator is not allowed because it was already declared outside the class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4292" name="err_non_local_variable_decl_in_for">
        <segment state="initial">
          <source>declaration of non-local variable in 'for' loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4293" name="err_non_polymorphic_vtable_pointer_auth">
        <segment state="initial">
          <source>cannot set vtable pointer authentication on monomorphic type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4294" name="err_non_static_static">
        <segment state="initial">
          <source>non-static declaration of %0 follows static declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4295" name="err_non_temp_friend_decl_with_requires_clause_must_be_def">
        <segment state="initial">
          <source>non-template friend declaration with a requires clause must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4296" name="err_non_temp_spec_requires_clause">
        <segment state="initial">
          <source>%select{explicit|friend}0 specialization cannot have a trailing requires clause unless it declares a function template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4297" name="err_non_template_in_member_template_id_suggest">
        <segment state="initial">
          <source>member %0 of %1 is not a template; did you mean %select{|simply }2%3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4298" name="err_non_template_in_template_id">
        <segment state="initial">
          <source>%0 does not name a template but is followed by template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4299" name="err_non_template_in_template_id_suggest">
        <segment state="initial">
          <source>%0 does not name a template but is followed by template arguments; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4300" name="err_non_thread_thread">
        <segment state="initial">
          <source>non-thread-local declaration of %0 follows thread-local declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4301" name="err_non_top_level_vtable_pointer_auth">
        <segment state="initial">
          <source>cannot set vtable pointer authentication on %0 which is a subclass of polymorphic type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4302" name="err_non_trivial_c_union_in_invalid_context">
        <segment state="initial">
          <source>cannot %select{use type %1 for a function/method parameter|use type %1 for function/method return|default-initialize an object of type %1|declare an automatic variable of type %1|copy-initialize an object of type %1|assign to a variable of type %1|construct an automatic compound literal of type %1|capture a variable of type %1|cannot use volatile type %1 where it causes an lvalue-to-rvalue conversion}3 since it %select{contains|is}2 a union that is non-trivial to %select{default-initialize|destruct|copy}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4303" name="err_non_type_template_arg_addr_label_diff">
        <segment state="initial">
          <source>template argument / label address difference / what did you expect?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4304" name="err_non_type_template_arg_subobject">
        <segment state="initial">
          <source>non-type template argument refers to subobject '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4305" name="err_non_type_template_in_nested_name_specifier">
        <segment state="initial">
          <source>qualified name refers into a specialization of %select{function|variable}0 template %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4306" name="err_non_type_template_parm_type_deduction_failure">
        <segment state="initial">
          <source>non-type template parameter %0 with type %1 has incompatible initializer of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4307" name="err_non_variable_decl_in_for">
        <segment state="initial">
          <source>non-variable declaration in 'for' loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4308" name="err_non_virtual_pure">
        <segment state="initial">
          <source>%0 is not virtual and cannot be declared pure</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4309" name="err_nonfunction_block_type">
        <segment state="initial">
          <source>block pointer to non-function type is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4310" name="err_nonstatic_member_out_of_line">
        <segment state="initial">
          <source>non-static data member defined out-of-line</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4311" name="err_nontemporal_builtin_must_be_pointer">
        <segment state="initial">
          <source>address argument to nontemporal builtin must be a pointer (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4312" name="err_nontemporal_builtin_must_be_pointer_intfltptr_or_vector">
        <segment state="initial">
          <source>address argument to nontemporal builtin must be a pointer to integer, float, pointer, or a vector of such types (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4313" name="err_noreturn_has_return_expr">
        <segment state="initial">
          <source>%select{function|block|lambda|coroutine}0 declared 'noreturn' should not return</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4314" name="err_noreturn_non_function">
        <segment state="initial">
          <source>'_Noreturn' can only appear on functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4315" name="err_nosetter_property_assignment">
        <segment state="initial">
          <source>%select{assignment to readonly property|no setter method %1 for assignment to property}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4316" name="err_nosetter_property_incdec">
        <segment state="initial">
          <source>%select{%select{increment|decrement}1 of readonly property|no setter method %2 for %select{increment|decrement}1 of property}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4317" name="err_not_class_template_specialization">
        <segment state="initial">
          <source>cannot specialize a %select{dependent template|template template parameter}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4318" name="err_not_direct_base_or_virtual">
        <segment state="initial">
          <source>type %0 is not a direct or virtual base of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4319" name="err_not_found_by_two_phase_lookup">
        <segment state="initial">
          <source>call to function %0 that is neither visible in the template definition nor found by argument-dependent lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4320" name="err_not_integral_type_anon_bitfield">
        <segment state="initial">
          <source>anonymous bit-field has non-integral type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4321" name="err_not_integral_type_bitfield">
        <segment state="initial">
          <source>bit-field %0 has non-integral type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4322" name="err_not_tag_in_scope">
        <segment state="initial">
          <source>no %select{struct|interface|union|class|enum}0 named %1 in %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4323" name="err_ns_attribute_wrong_parameter_type">
        <segment state="initial">
          <source>%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer}1 parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4324" name="err_nsconsumed_attribute_mismatch">
        <segment state="initial">
          <source>overriding method has mismatched ns_consumed attribute on its parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4325" name="err_nserrordomain_invalid_decl">
        <segment state="initial">
          <source>domain argument %select{|%1 }0does not refer to global constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4326" name="err_nserrordomain_wrong_type">
        <segment state="initial">
          <source>domain argument %0 does not point to an NSString or CFString constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4327" name="err_nsobject_attribute">
        <segment state="initial">
          <source>'NSObject' attribute is for pointer types only</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4328" name="err_nsreturns_retained_attribute_mismatch">
        <segment state="initial">
          <source>overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4329" name="err_nullability_cs_multilevel">
        <segment state="initial">
          <source>nullability keyword %0 cannot be applied to multi-level pointer type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4330" name="err_nullability_nonpointer">
        <segment state="initial">
          <source>nullability specifier %0 cannot be applied to non-pointer type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4331" name="err_nullptr_cast">
        <segment state="initial">
          <source>cannot cast an object of type %select{'nullptr_t' to %1|%1 to 'nullptr_t'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4332" name="err_objc_array_of_interfaces">
        <segment state="initial">
          <source>array of interface %0 is invalid (probably should be an array of pointers)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4333" name="err_objc_attr_not_id">
        <segment state="initial">
          <source>parameter of %0 attribute must be a single name of an Objective-C %select{class|protocol}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4334" name="err_objc_attr_protocol_requires_definition">
        <segment state="initial">
          <source>attribute %0 can only be applied to @protocol definitions, not forward declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4335" name="err_objc_attr_typedef_not_id">
        <segment state="initial">
          <source>parameter of %0 attribute must be 'id' when used on a typedef</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4336" name="err_objc_attr_typedef_not_void_pointer">
        <segment state="initial">
          <source>'objc_bridge(id)' is only allowed on structs and typedefs of void pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4337" name="err_objc_bridged_related_invalid_class">
        <segment state="initial">
          <source>could not find Objective-C class %0 to convert %1 to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4338" name="err_objc_bridged_related_invalid_class_name">
        <segment state="initial">
          <source>%0 must be name of an Objective-C class to be able to convert %1 to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4339" name="err_objc_bridged_related_known_method">
        <segment state="initial">
          <source>%0 must be explicitly converted to %1; use %select{%objcclass2|%objcinstance2}3 method for this conversion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4340" name="err_objc_cf_bridged_not_interface">
        <segment state="initial">
          <source>CF object of type %0 is bridged to %1, which is not an Objective-C class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4341" name="err_objc_decls_may_only_appear_in_global_scope">
        <segment state="initial">
          <source>Objective-C declarations may only appear in global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4342" name="err_objc_direct_duplicate_decl">
        <segment state="initial">
          <source>%select{|direct }0%select{method|property}1 declaration conflicts with previous %select{|direct }2declaration of %select{method|property}1 %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4343" name="err_objc_direct_dynamic_property">
        <segment state="initial">
          <source>direct property cannot be @dynamic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4344" name="err_objc_direct_impl_decl_mismatch">
        <segment state="initial">
          <source>direct method was declared in %select{the primary interface|an extension|a category}0 but is implemented in %select{the primary interface|a category|a different category}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4345" name="err_objc_direct_missing_on_decl">
        <segment state="initial">
          <source>direct method implementation was previously declared not direct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4346" name="err_objc_direct_on_override">
        <segment state="initial">
          <source>methods that %select{override superclass methods|implement protocol requirements}0 cannot be direct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4347" name="err_objc_direct_on_protocol">
        <segment state="initial">
          <source>'objc_direct' attribute cannot be applied to %select{methods|properties}0 declared in an Objective-C protocol</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4348" name="err_objc_direct_protocol_conformance">
        <segment state="initial">
          <source>%select{category %1|class extension}0 cannot conform to protocol %2 because of direct members declared in interface %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4349" name="err_objc_exceptions_disabled">
        <segment state="initial">
          <source>cannot use '%0' with Objective-C exceptions disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4350" name="err_objc_for_range_init_stmt">
        <segment state="initial">
          <source>initialization statement is not supported when iterating over Objective-C collection</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4351" name="err_objc_illegal_boxed_expression_type">
        <segment state="initial">
          <source>illegal type %0 used in a boxed expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4352" name="err_objc_incomplete_boxed_expression_type">
        <segment state="initial">
          <source>incomplete type %0 used in a boxed expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4353" name="err_objc_index_incomplete_class_type">
        <segment state="initial">
          <source>Objective-C index expression has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4354" name="err_objc_indexing_method_result_type">
        <segment state="initial">
          <source>method for accessing %select{dictionary|array}1 element must have Objective-C object return type instead of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4355" name="err_objc_kindof_nonobject">
        <segment state="initial">
          <source>'__kindof' specifier cannot be applied to non-object type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4356" name="err_objc_kindof_wrong_position">
        <segment state="initial">
          <source>'__kindof' type specifier must precede the declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4357" name="err_objc_literal_method_sig">
        <segment state="initial">
          <source>literal construction method %0 has incompatible signature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4358" name="err_objc_method_unsupported_param_ret_type">
        <segment state="initial">
          <source>%0 %select{parameter|return}1 type is unsupported; support for vector types for this target is introduced in %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4359" name="err_objc_multiple_subscript_type_conversion">
        <segment state="initial">
          <source>indexing expression is invalid because subscript type %0 has multiple type conversion functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4360" name="err_objc_non_runtime_protocol_in_protocol_expr">
        <segment state="initial">
          <source>cannot use a protocol declared 'objc_non_runtime_protocol' in a @protocol expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4361" name="err_objc_non_trivially_copyable_boxed_expression_type">
        <segment state="initial">
          <source>non-trivially copyable type %0 cannot be used in a boxed expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4362" name="err_objc_ns_bridged_invalid_cfobject">
        <segment state="initial">
          <source>Objective-C object of type %0 is bridged to %1, which is not valid CF object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4363" name="err_objc_object_assignment">
        <segment state="initial">
          <source>cannot assign to class object (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4364" name="err_objc_object_catch">
        <segment state="initial">
          <source>cannot catch an Objective-C object by value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4365" name="err_objc_override_direct_method">
        <segment state="initial">
          <source>cannot override a method that is declared direct by a superclass</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4366" name="err_objc_parameterized_category_nonclass">
        <segment state="initial">
          <source>%select{extension|category}0 of non-parameterized class %1 cannot have type parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4367" name="err_objc_parameterized_forward_class">
        <segment state="initial">
          <source>forward declaration of non-parameterized class %0 cannot have type parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4368" name="err_objc_parameterized_forward_class_first">
        <segment state="initial">
          <source>class %0 previously declared with type parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4369" name="err_objc_precise_lifetime_bad_type">
        <segment state="initial">
          <source>objc_precise_lifetime only applies to retainable types; type here is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4370" name="err_objc_property_attr_mutually_exclusive">
        <segment state="initial">
          <source>property attributes '%0' and '%1' are mutually exclusive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4371" name="err_objc_property_requires_object">
        <segment state="initial">
          <source>property with '%0' attribute must be of object type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4372" name="err_objc_root_class_subclass">
        <segment state="initial">
          <source>objc_root_class attribute may only be specified on a root class declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4373" name="err_objc_runtime_visible_category">
        <segment state="initial">
          <source>cannot implement a category for class %0 that is only visible via the Objective-C runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4374" name="err_objc_runtime_visible_subclass">
        <segment state="initial">
          <source>cannot implement subclass %0 of a superclass %1 that is only visible via the Objective-C runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4375" name="err_objc_subscript_base_type">
        <segment state="initial">
          <source>%select{dictionary|array}1 subscript base type %0 is not an Objective-C object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4376" name="err_objc_subscript_dic_object_type">
        <segment state="initial">
          <source>method object parameter type %0 is not object type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4377" name="err_objc_subscript_index_type">
        <segment state="initial">
          <source>method index parameter type %0 is not integral type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4378" name="err_objc_subscript_key_type">
        <segment state="initial">
          <source>method key parameter type %0 is not object type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4379" name="err_objc_subscript_method_not_found">
        <segment state="initial">
          <source>expected method to %select{read|write}1 %select{dictionary|array}2 element not found on object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4380" name="err_objc_subscript_object_type">
        <segment state="initial">
          <source>cannot assign to this %select{dictionary|array}1 because assigning method's 2nd parameter of type %0 is not an Objective-C pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4381" name="err_objc_subscript_pointer">
        <segment state="initial">
          <source>indexing expression is invalid because subscript type %0 is not an Objective-C pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4382" name="err_objc_subscript_type_conversion">
        <segment state="initial">
          <source>indexing expression is invalid because subscript type %0 is not an integral or Objective-C pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4383" name="err_objc_synchronized_expects_object">
        <segment state="initial">
          <source>@synchronized requires an Objective-C object type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4384" name="err_objc_throw_expects_object">
        <segment state="initial">
          <source>@throw requires an Objective-C object type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4385" name="err_objc_type_arg_does_not_match_bound">
        <segment state="initial">
          <source>type argument %0 does not satisfy the bound (%1) of type parameter %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4386" name="err_objc_type_arg_explicit_nullability">
        <segment state="initial">
          <source>type argument %0 cannot explicitly specify nullability</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4387" name="err_objc_type_arg_missing">
        <segment state="initial">
          <source>no type or protocol named %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4388" name="err_objc_type_arg_missing_star">
        <segment state="initial">
          <source>type argument %0 must be a pointer (requires a '*')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4389" name="err_objc_type_arg_not_id_compatible">
        <segment state="initial">
          <source>type argument %0 is neither an Objective-C object nor a block type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4390" name="err_objc_type_arg_qualified">
        <segment state="initial">
          <source>type argument %0 cannot be qualified with '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4391" name="err_objc_type_args_and_protocols">
        <segment state="initial">
          <source>angle brackets contain both a %select{type|protocol}0 (%1) and a %select{protocol|type}0 (%2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4392" name="err_objc_type_args_non_class">
        <segment state="initial">
          <source>type arguments cannot be applied to non-class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4393" name="err_objc_type_args_non_parameterized_class">
        <segment state="initial">
          <source>type arguments cannot be applied to non-parameterized class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4394" name="err_objc_type_args_specialized_class">
        <segment state="initial">
          <source>type arguments cannot be applied to already-specialized class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4395" name="err_objc_type_args_wrong_arity">
        <segment state="initial">
          <source>too %select{many|few}0 type arguments for class %1 (have %2, expected %3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4396" name="err_objc_type_param_arity_mismatch">
        <segment state="initial">
          <source>%select{forward class declaration|class definition|category|extension}0 has too %select{few|many}1 type parameters (expected %2, have %3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4397" name="err_objc_type_param_bound_conflict">
        <segment state="initial">
          <source>type bound %0 for type parameter %1 conflicts with %select{implicit|previous}2 bound %3%select{for type parameter %5|}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4398" name="err_objc_type_param_bound_explicit_nullability">
        <segment state="initial">
          <source>type parameter %0 bound %1 cannot explicitly specify nullability</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4399" name="err_objc_type_param_bound_missing">
        <segment state="initial">
          <source>missing type bound %0 for type parameter %1 in %select{@interface|@class}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4400" name="err_objc_type_param_bound_missing_pointer">
        <segment state="initial">
          <source>missing '*' in type bound %0 for type parameter %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4401" name="err_objc_type_param_bound_nonobject">
        <segment state="initial">
          <source>type bound %0 for type parameter %1 is not an Objective-C pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4402" name="err_objc_type_param_bound_qualified">
        <segment state="initial">
          <source>type bound %1 for type parameter %0 cannot be qualified with '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4403" name="err_objc_type_param_redecl">
        <segment state="initial">
          <source>redeclaration of type parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4404" name="err_objc_type_param_variance_conflict">
        <segment state="initial">
          <source>%select{in|co|contra}0variant type parameter %1 conflicts with previous %select{in|co|contra}2variant type parameter %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4405" name="err_objc_var_decl_inclass">
        <segment state="initial">
          <source>cannot declare variable inside @interface or @protocol</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4406" name="err_objc_variable_sized_type_not_at_end">
        <segment state="initial">
          <source>field %0 with variable sized type %1 is not at the end of class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4407" name="err_object_cannot_be_passed_returned_by_value">
        <segment state="initial">
          <source>interface type %1 cannot be %select{returned|passed}0 by value; did you forget * in %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4408" name="err_offsetof_array_type">
        <segment state="initial">
          <source>offsetof requires array type, %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4409" name="err_offsetof_bitfield">
        <segment state="initial">
          <source>cannot compute offset of bit-field %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4410" name="err_offsetof_field_of_virtual_base">
        <segment state="initial">
          <source>invalid application of 'offsetof' to a field of a virtual base</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4411" name="err_offsetof_incomplete_type">
        <segment state="initial">
          <source>offsetof of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4412" name="err_offsetof_record_type">
        <segment state="initial">
          <source>offsetof requires struct, union, or class type, %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4413" name="err_omp_adjust_arg_multiple_clauses">
        <segment state="initial">
          <source>'adjust_arg' argument %0 used in multiple clauses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4414" name="err_omp_aligned_expected_array_or_ptr">
        <segment state="initial">
          <source>argument of aligned clause should be array%select{ or pointer|, pointer, reference to array or reference to pointer}1, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4415" name="err_omp_allocator_not_in_uses_allocators">
        <segment state="initial">
          <source>allocator must be specified in the 'uses_allocators' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4416" name="err_omp_allocator_used_in_clauses">
        <segment state="initial">
          <source>allocators used in 'uses_allocators' clause cannot appear in other data-sharing or data-mapping attribute clauses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4417" name="err_omp_ambiguous_conversion">
        <segment state="initial">
          <source>ambiguous conversion from type %0 to an integral or unscoped enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4418" name="err_omp_append_args_with_varargs">
        <segment state="initial">
          <source>'append_args' is not allowed with varargs functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4419" name="err_omp_argument_type_isdeviceptr">
        <segment state="initial">
          <source>expected pointer, array, reference to pointer, or reference to array in 'is_device_ptr clause'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4420" name="err_omp_array_shaping_use">
        <segment state="initial">
          <source>OpenMP array shaping operation is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4421" name="err_omp_at_least_one_motion_clause_required">
        <segment state="initial">
          <source>expected at least one 'to' clause or 'from' clause specified to '#pragma omp target update'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4422" name="err_omp_atomic_capture_not_compound_statement">
        <segment state="initial">
          <source>the statement for 'atomic capture' must be a compound statement of form '{v = x; x binop= expr;}', '{x binop= expr; v = x;}', '{v = x; x = x binop expr;}', '{v = x; x = expr binop x;}', '{x = x binop expr; v = x;}', '{x = expr binop x; v = x;}' or '{v = x; x = expr;}', '{v = x; x++;}', '{v = x; ++x;}', '{++x; v = x;}', '{x++; v = x;}', '{v = x; x--;}', '{v = x; --x;}', '{--x; v = x;}', '{x--; v = x;}' where x is an lvalue expression with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4423" name="err_omp_atomic_capture_not_expression_statement">
        <segment state="initial">
          <source>the statement for 'atomic capture' must be an expression statement of form 'v = ++x;', 'v = --x;', 'v = x++;', 'v = x--;', 'v = x binop= expr;', 'v = x = x binop expr' or 'v = x = expr binop x', where x and v are both lvalue expressions with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4424" name="err_omp_atomic_compare">
        <segment state="initial">
          <source>the statement for 'atomic compare' must be a compound statement of form '{x = expr ordop x ? expr : x;}', '{x = x ordop expr? expr : x;}', '{x = x == e ? d : x;}', '{x = e == x ? d : x;}', or 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', 'if(e == x) {x = d;}' where 'x' is an lvalue expression with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '&lt;' or '&gt;'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4425" name="err_omp_atomic_compare_capture">
        <segment state="initial">
          <source>the statement for 'atomic compare capture' must be a compound statement of form '{v = x; cond-up-stmt}', ''{cond-up-stmt v = x;}', '{if(x == e) {x = d;} else {v = x;}}', '{r = x == e; if(r) {x = d;}}', or '{r = x == e; if(r) {x = d;} else {v = x;}}', where 'cond-update-stmt' can have one of the following forms: 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', or 'if(e == x) {x = d;}' where 'x', 'r', and 'v' are lvalue expressions with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '&lt;' or '&gt;'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4426" name="err_omp_atomic_fail_wrong_or_no_clauses">
        <segment state="initial">
          <source>expected a memory order clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4427" name="err_omp_atomic_incompatible_mem_order_clause">
        <segment state="initial">
          <source>directive '#pragma omp atomic%select{ %0|}1' cannot be used with '%2' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4428" name="err_omp_atomic_no_compare">
        <segment state="initial">
          <source>expected 'compare' clause with the '%0' modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4429" name="err_omp_atomic_not_expression_statement">
        <segment state="initial">
          <source>the statement for 'atomic' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4430" name="err_omp_atomic_read_not_expression_statement">
        <segment state="initial">
          <source>the statement for 'atomic read' must be an expression statement of form 'v = x;', where v and x are both lvalue expressions with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4431" name="err_omp_atomic_several_clauses">
        <segment state="initial">
          <source>directive '#pragma omp atomic' cannot contain more than one 'read', 'write', 'update', 'capture', or 'compare' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4432" name="err_omp_atomic_update_not_expression_statement">
        <segment state="initial">
          <source>the statement for 'atomic update' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4433" name="err_omp_atomic_weak_no_equality">
        <segment state="initial">
          <source>expected '==' operator for 'weak' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4434" name="err_omp_atomic_write_not_expression_statement">
        <segment state="initial">
          <source>the statement for 'atomic write' must be an expression statement of form 'x = expr;', where x is a lvalue expression with scalar type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4435" name="err_omp_bind_required_on_loop">
        <segment state="initial">
          <source>expected 'bind' clause for 'loop' construct without an enclosing OpenMP construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4436" name="err_omp_bit_fields_forbidden_in_clause">
        <segment state="initial">
          <source>bit fields cannot be used to specify storage in a '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4437" name="err_omp_cannot_update_with_internal_linkage">
        <segment state="initial">
          <source>the host cannot update a declare target variable that is not externally visible</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4438" name="err_omp_clause_floating_type_arg">
        <segment state="initial">
          <source>arguments of OpenMP clause '%0' with bitwise operators cannot be of floating type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4439" name="err_omp_clause_not_arithmetic_type_arg">
        <segment state="initial">
          <source>arguments of OpenMP clause '%0' for 'min' or 'max' must be of %select{scalar|arithmetic}1 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4440" name="err_omp_clause_requires_dispatch_construct">
        <segment state="initial">
          <source>'%0' clause requires 'dispatch' context selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4441" name="err_omp_clauses_mutually_exclusive">
        <segment state="initial">
          <source>'%0' and '%1' clause are mutually exclusive and may not appear on the same directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4442" name="err_omp_const_list_item">
        <segment state="initial">
          <source>const-qualified list item cannot be %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4443" name="err_omp_const_not_mutable_variable">
        <segment state="initial">
          <source>const-qualified variable without mutable fields cannot be %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4444" name="err_omp_const_variable">
        <segment state="initial">
          <source>const-qualified variable cannot be %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4445" name="err_omp_critical_with_hint">
        <segment state="initial">
          <source>constructs with the same name must have a 'hint' clause with the same value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4446" name="err_omp_declare_mapper_redefinition">
        <segment state="initial">
          <source>redefinition of user-defined mapper for type %0 with name %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4447" name="err_omp_declare_mapper_wrong_var">
        <segment state="initial">
          <source>only variable %0 is allowed in map clauses of this 'omp declare mapper' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4448" name="err_omp_declare_reduction_redefinition">
        <segment state="initial">
          <source>redefinition of user-defined reduction for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4449" name="err_omp_declare_target_has_local_vars">
        <segment state="initial">
          <source>local variable '%0' should not be used in 'declare target' directive;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4450" name="err_omp_declare_target_to_and_link">
        <segment state="initial">
          <source>%0 must not appear in both clauses 'to' and 'link'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4451" name="err_omp_declare_variant_diff">
        <segment state="initial">
          <source>function with '#pragma omp declare variant' has a different %select{calling convention|return type|constexpr specification|inline specification|storage class|linkage}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4452" name="err_omp_declare_variant_doesnt_support">
        <segment state="initial">
          <source>'#pragma omp declare variant' does not support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4453" name="err_omp_declare_variant_incompat_attributes">
        <segment state="initial">
          <source>'#pragma omp declare variant' is not compatible with any target-specific attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4454" name="err_omp_declare_variant_incompat_types">
        <segment state="initial">
          <source>variant in '#pragma omp declare variant' with type %0 is incompatible with type %1%select{| with appended arguments}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4455" name="err_omp_declare_variant_prototype_required">
        <segment state="initial">
          <source>function with '#pragma omp declare variant' must have a prototype when 'append_args' is used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4456" name="err_omp_declare_variant_same_base_function">
        <segment state="initial">
          <source>variant in '#pragma omp declare variant' is the same as the base function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4457" name="err_omp_declare_variant_user_condition_not_constant">
        <segment state="initial">
          <source>the user condition in the OpenMP context selector needs to be constant; %0 is not</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4458" name="err_omp_defaultmap_no_attr_for_variable">
        <segment state="initial">
          <source>variable %0 must have explicitly specified data sharing attributes, data mapping attributes, or in an is_device_ptr clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4459" name="err_omp_depend_clause_thread_simd">
        <segment state="initial">
          <source>'%0' clauses cannot be mixed with '%1' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4460" name="err_omp_depend_modifier_not_iterator">
        <segment state="initial">
          <source>expected iterator specification as depend modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4461" name="err_omp_depend_sink_expected_loop_iteration">
        <segment state="initial">
          <source>expected%select{| %1}0 loop iteration variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4462" name="err_omp_depend_sink_expected_plus_minus">
        <segment state="initial">
          <source>expected '+' or '-' operation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4463" name="err_omp_depend_sink_source_with_modifier">
        <segment state="initial">
          <source>depend modifier cannot be used with 'sink' or 'source' depend type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4464" name="err_omp_depend_sink_unexpected_expr">
        <segment state="initial">
          <source>unexpected expression: number of expressions is larger than the number of associated loops</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4465" name="err_omp_depend_zero_length_array_section_not_allowed">
        <segment state="initial">
          <source>zero-length array section is not allowed in 'depend' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4466" name="err_omp_depobj_expected">
        <segment state="initial">
          <source>expected depobj expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4467" name="err_omp_depobj_single_clause_expected">
        <segment state="initial">
          <source>exactly one of 'depend', 'destroy', or 'update' clauses is expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4468" name="err_omp_device_ancestor_without_requires_reverse_offload">
        <segment state="initial">
          <source>device clause with ancestor device-modifier used without specifying 'requires reverse_offload'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4469" name="err_omp_device_type_mismatch">
        <segment state="initial">
          <source>'device_type(%0)' does not match previously specified 'device_type(%1)' for the same declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4470" name="err_omp_directive_before_requires">
        <segment state="initial">
          <source>'%0' region encountered before requires directive with '%1' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4471" name="err_omp_dispatch_statement_call">
        <segment state="initial">
          <source>statement after '#pragma omp dispatch' must be a direct call to a target function or an assignment to one</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4472" name="err_omp_duplicate_map_type_modifier">
        <segment state="initial">
          <source>same map type modifier has been specified more than once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4473" name="err_omp_duplicate_motion_modifier">
        <segment state="initial">
          <source>same motion modifier has been specified more than once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4474" name="err_omp_expected_access_to_data_field">
        <segment state="initial">
          <source>expected access to data field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4475" name="err_omp_expected_addressable_lvalue_or_array_item">
        <segment state="initial">
          <source>expected addressable lvalue expression, array element%select{ or array section|, array section or array shaping expression}0%select{| of non 'omp_depend_t' type}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4476" name="err_omp_expected_array_alloctraits">
        <segment state="initial">
          <source>expected constant sized array of 'omp_alloctrait_t' elements, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4477" name="err_omp_expected_base_var_name">
        <segment state="initial">
          <source>expected variable name as a base of the array %select{subscript|section}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4478" name="err_omp_expected_int_param">
        <segment state="initial">
          <source>expected a reference to an integer-typed parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4479" name="err_omp_expected_named_var_member_or_array_expression">
        <segment state="initial">
          <source>expected expression containing only member accesses and/or array sections based on named variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4480" name="err_omp_expected_omp_depend_t_lvalue">
        <segment state="initial">
          <source>expected lvalue expression%select{ of 'omp_depend_t' type, not %1|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4481" name="err_omp_expected_predefined_allocator">
        <segment state="initial">
          <source>expected one of the predefined allocators for the variables with the static storage: 'omp_default_mem_alloc', 'omp_large_cap_mem_alloc', 'omp_const_mem_alloc', 'omp_high_bw_mem_alloc', 'omp_low_lat_mem_alloc', 'omp_cgroup_mem_alloc', 'omp_pteam_mem_alloc' or 'omp_thread_mem_alloc'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4482" name="err_omp_expected_private_copy_for_allocate">
        <segment state="initial">
          <source>the referenced item is not found in any private clause on the same directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4483" name="err_omp_expected_uniform_param">
        <segment state="initial">
          <source>expected a reference to a parameter specified in a 'uniform' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4484" name="err_omp_expected_var_arg">
        <segment state="initial">
          <source>%0 is not a global variable, static local variable or static data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4485" name="err_omp_expected_var_arg_suggest">
        <segment state="initial">
          <source>%0 is not a global variable, static local variable or static data member; did you mean %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4486" name="err_omp_expected_var_name_member_expr">
        <segment state="initial">
          <source>expected variable name%select{| or data member of current class}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4487" name="err_omp_expected_var_name_member_expr_or_array_item">
        <segment state="initial">
          <source>expected variable name%select{|, data member of current class}0, array element or array section</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4488" name="err_omp_expected_var_name_member_expr_with_type">
        <segment state="initial">
          <source>expected variable%select{| or static data member|, static data member, or non-static data member of current class}0 of type '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4489" name="err_omp_explicit_conversion">
        <segment state="initial">
          <source>expression requires explicit conversion from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4490" name="err_omp_firstprivate_incomplete_type">
        <segment state="initial">
          <source>a firstprivate variable with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4491" name="err_omp_flush_order_clause_and_list">
        <segment state="initial">
          <source>'flush' directive with memory order clause '%0' cannot have the list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4492" name="err_omp_function_expected">
        <segment state="initial">
          <source>'#pragma omp declare %select{simd|variant}0' can only be applied to functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4493" name="err_omp_function_in_link_clause">
        <segment state="initial">
          <source>function name is not allowed in 'link' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4494" name="err_omp_global_var_arg">
        <segment state="initial">
          <source>arguments of '#pragma omp %0' must have %select{global storage|static storage duration}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4495" name="err_omp_hint_clause_no_name">
        <segment state="initial">
          <source>the name of the construct must be specified in presence of 'hint' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4496" name="err_omp_implied_type_not_found">
        <segment state="initial">
          <source>'%0' type not found; include &lt;omp.h&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4497" name="err_omp_inclusive_exclusive_not_reduction">
        <segment state="initial">
          <source>the list item must appear in 'reduction' clause with the 'inscan' modifier of the parent directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4498" name="err_omp_incomplete_type">
        <segment state="initial">
          <source>expression has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4499" name="err_omp_inscan_reduction_expected">
        <segment state="initial">
          <source>expected 'reduction' clause with the 'inscan' modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4500" name="err_omp_instantiation_not_supported">
        <segment state="initial">
          <source>instantiation of '%0' not supported yet</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4501" name="err_omp_interchange_permutation_value_range">
        <segment state="initial">
          <source>permutation index must be at least 1 and at most %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4502" name="err_omp_interchange_permutation_value_repeated">
        <segment state="initial">
          <source>index %0 must appear exactly once in the permutation clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4503" name="err_omp_interop_bad_depend_clause">
        <segment state="initial">
          <source>'depend' clause requires the 'targetsync' interop type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4504" name="err_omp_interop_prefer_type">
        <segment state="initial">
          <source>prefer_list item must be a string literal or constant integral expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4505" name="err_omp_interop_type_not_found">
        <segment state="initial">
          <source>'omp_interop_t' must be defined when 'append_args' clause is used; include &lt;omp.h&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4506" name="err_omp_interop_var_multiple_actions">
        <segment state="initial">
          <source>interop variable %0 used in multiple action clauses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4507" name="err_omp_interop_variable_expected">
        <segment state="initial">
          <source>expected%select{| non-const}0 variable of type 'omp_interop_t'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4508" name="err_omp_interop_variable_wrong_type">
        <segment state="initial">
          <source>interop variable must be of type 'omp_interop_t'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4509" name="err_omp_invalid_map_this_expr">
        <segment state="initial">
          <source>invalid 'this' expression on 'map' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4510" name="err_omp_invalid_map_type_for_directive">
        <segment state="initial">
          <source>%select{map type '%1' is not allowed|map type must be specified}0 for '#pragma omp %2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4511" name="err_omp_invalid_map_type_modifier_for_directive">
        <segment state="initial">
          <source>map type modifier '%0' is not allowed for '#pragma omp %1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4512" name="err_omp_invalid_mapper">
        <segment state="initial">
          <source>cannot find a valid user-defined mapper for type %0 with name %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4513" name="err_omp_invalid_scope">
        <segment state="initial">
          <source>'#pragma omp %0' directive must appear only in file scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4514" name="err_omp_invalid_target_decl">
        <segment state="initial">
          <source>%0 used in declare target directive is not a variable or a function name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4515" name="err_omp_invariant_dependency">
        <segment state="initial">
          <source>expected loop invariant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4516" name="err_omp_invariant_or_linear_dependency">
        <segment state="initial">
          <source>expected loop invariant expression or '&lt;invariant1&gt; * %0 + &lt;invariant2&gt;' kind of expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4517" name="err_omp_iterator_not_integral_or_pointer">
        <segment state="initial">
          <source>expected integral or pointer type as the iterator-type, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4518" name="err_omp_iterator_step_constant_zero">
        <segment state="initial">
          <source>iterator step expression %0 evaluates to 0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4519" name="err_omp_iterator_step_not_integral">
        <segment state="initial">
          <source>iterator step expression %0 is not the integral expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4520" name="err_omp_iterator_use">
        <segment state="initial">
          <source>OpenMP iterator is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4521" name="err_omp_lambda_capture_in_declare_target_not_to">
        <segment state="initial">
          <source>variable captured in declare target region must appear in a to clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4522" name="err_omp_large_expression_in_clause">
        <segment state="initial">
          <source>argument to '%0' clause requires a value that can be represented by a 64-bit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4523" name="err_omp_lastprivate_conditional_non_scalar">
        <segment state="initial">
          <source>expected list item of scalar type in 'lastprivate' clause with 'conditional' modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4524" name="err_omp_lastprivate_incomplete_type">
        <segment state="initial">
          <source>a lastprivate variable with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4525" name="err_omp_lastprivate_loop_var_non_loop_iteration">
        <segment state="initial">
          <source>only loop iteration variables are allowed in 'lastprivate' clause in 'omp %0' directives</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4526" name="err_omp_linear_distribute_var_non_loop_iteration">
        <segment state="initial">
          <source>only loop iteration variables are allowed in 'linear' clause in distribute directives</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4527" name="err_omp_linear_expected_int_or_ptr">
        <segment state="initial">
          <source>argument of a linear clause should be of integral or pointer type, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4528" name="err_omp_linear_incomplete_type">
        <segment state="initial">
          <source>a linear variable with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4529" name="err_omp_linear_ordered">
        <segment state="initial">
          <source>'linear' clause cannot be specified along with 'ordered' clause with a parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4530" name="err_omp_local_var_in_threadprivate_init">
        <segment state="initial">
          <source>variable with local storage in initial value of threadprivate variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4531" name="err_omp_loop_bad_collapse_var">
        <segment state="initial">
          <source>cannot use variable %1 in collapsed imperfectly-nested loop %select{init|condition|increment}0 statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4532" name="err_omp_loop_cannot_use_stmt">
        <segment state="initial">
          <source>'%0' statement cannot be used in OpenMP for loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4533" name="err_omp_loop_diff_cxx">
        <segment state="initial">
          <source>could not calculate number of iterations calling 'operator-' with upper and lower loop bounds</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4534" name="err_omp_loop_incr_not_compatible">
        <segment state="initial">
          <source>increment expression must cause %0 to %select{decrease|increase}1 on each iteration of OpenMP for loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4535" name="err_omp_loop_not_canonical_cond">
        <segment state="initial">
          <source>condition of OpenMP for loop must be a relational comparison ('&lt;', '&lt;=', '&gt;', %select{or '&gt;='|'&gt;=', or '!='}0) of loop variable %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4536" name="err_omp_loop_not_canonical_incr">
        <segment state="initial">
          <source>increment clause of OpenMP for loop must perform simple addition or subtraction on loop variable %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4537" name="err_omp_loop_not_canonical_init">
        <segment state="initial">
          <source>initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4538" name="err_omp_loop_reduction_clause">
        <segment state="initial">
          <source>'reduction' clause not allowed with '#pragma omp loop bind(teams)'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4539" name="err_omp_loop_var_dsa">
        <segment state="initial">
          <source>loop iteration variable in the associated loop of 'omp %1' directive may not be %0, predetermined as %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4540" name="err_omp_loop_variable_type">
        <segment state="initial">
          <source>variable must be of integer or %select{pointer|random access iterator}0 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4541" name="err_omp_map_modifier_not_iterator">
        <segment state="initial">
          <source>expected iterator specification as map modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4542" name="err_omp_map_shared_storage">
        <segment state="initial">
          <source>variable already marked as mapped in current construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4543" name="err_omp_mapper_wrong_type">
        <segment state="initial">
          <source>mapper type must be of struct, union or class type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4544" name="err_omp_multi_expr_not_allowed">
        <segment state="initial">
          <source>only one expression allowed in '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4545" name="err_omp_multiple_array_items_in_map_clause">
        <segment state="initial">
          <source>multiple array elements associated with the same variable are not allowed in map clauses of the same construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4546" name="err_omp_negative_expression_in_clause">
        <segment state="initial">
          <source>argument to '%0' clause must be a %select{non-negative|strictly positive}1 integer value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4547" name="err_omp_no_clause_for_directive">
        <segment state="initial">
          <source>expected at least one %0 clause for '#pragma omp %1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4548" name="err_omp_no_dsa_for_variable">
        <segment state="initial">
          <source>variable %0 must have explicitly specified data sharing attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4549" name="err_omp_no_more_if_clause">
        <segment state="initial">
          <source>no more 'if' clause is allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4550" name="err_omp_non_lvalue_in_map_or_motion_clauses">
        <segment state="initial">
          <source>expected addressable lvalue in '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4551" name="err_omp_non_pointer_type_array_shaping_base">
        <segment state="initial">
          <source>expected expression with a pointer to a complete type as a base of an array shaping operation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4552" name="err_omp_nonpredefined_allocator_without_traits">
        <segment state="initial">
          <source>non-predefined allocator must have traits specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4553" name="err_omp_not_for">
        <segment state="initial">
          <source>%select{statement after '#pragma omp %1' must be a for loop|expected %2 for loops after '#pragma omp %1'%select{|, but found only %4}3}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4554" name="err_omp_not_integral">
        <segment state="initial">
          <source>expression must have integral or unscoped enumeration type, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4555" name="err_omp_not_resolved_reduction_identifier">
        <segment state="initial">
          <source>unable to resolve declare reduction construct for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4556" name="err_omp_nowait_clause_without_depend">
        <segment state="initial">
          <source>directive '#pragma omp taskwait' cannot use 'nowait' clause without 'depend' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4557" name="err_omp_once_referenced">
        <segment state="initial">
          <source>variable can appear only once in OpenMP '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4558" name="err_omp_once_referenced_in_target_update">
        <segment state="initial">
          <source>variable can appear only once in OpenMP 'target update' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4559" name="err_omp_one_defaultmap_each_category">
        <segment state="initial">
          <source>at most one defaultmap clause for each variable-category can appear on the directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4560" name="err_omp_ordered_directive_with_param">
        <segment state="initial">
          <source>'ordered' directive %select{without any clauses|with 'threads' clause}0 cannot be closely nested inside ordered region with specified parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4561" name="err_omp_ordered_directive_without_param">
        <segment state="initial">
          <source>'ordered' directive with '%0' clause cannot be closely nested inside ordered region without specified parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4562" name="err_omp_ordered_simd">
        <segment state="initial">
          <source>'ordered' clause with a parameter cannot be specified in '#pragma omp %0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4563" name="err_omp_original_storage_is_shared_and_does_not_contain">
        <segment state="initial">
          <source>original storage of expression in data environment is shared but data environment do not fully contain mapped expression storage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4564" name="err_omp_orphaned_device_directive">
        <segment state="initial">
          <source>orphaned 'omp %0' directives are prohibited; perhaps you forget to enclose the directive into a %select{|||target |teams|for, simd, for simd, parallel for, or parallel for simd }1region?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4565" name="err_omp_orphaned_section_directive">
        <segment state="initial">
          <source>%select{orphaned 'omp section' directives are prohibited, it|'omp section' directive}0 must be closely nested to a sections region%select{|, not a %1 region}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4566" name="err_omp_parallel_reduction_in_task_firstprivate">
        <segment state="initial">
          <source>argument of a reduction clause of a %0 construct must not appear in a firstprivate clause on a task construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4567" name="err_omp_param_or_this_in_clause">
        <segment state="initial">
          <source>expected reference to one of the parameters of function %0%select{| or 'this'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4568" name="err_omp_parent_cancel_region_nowait">
        <segment state="initial">
          <source>parent region for 'omp %select{cancellation point|cancel}0' construct cannot be nowait</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4569" name="err_omp_parent_cancel_region_ordered">
        <segment state="initial">
          <source>parent region for 'omp %select{cancellation point|cancel}0' construct cannot be ordered</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4570" name="err_omp_pointer_mapped_along_with_derived_section">
        <segment state="initial">
          <source>pointer cannot be mapped along with a section derived from itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4571" name="err_omp_predefined_allocator_with_traits">
        <segment state="initial">
          <source>predefined allocator cannot have traits specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4572" name="err_omp_private_incomplete_type">
        <segment state="initial">
          <source>a private variable with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4573" name="err_omp_prohibited_region">
        <segment state="initial">
          <source>region cannot be%select{| closely}0 nested inside '%1' region%select{|; perhaps you forget to enclose 'omp %3' directive into a parallel region?|; perhaps you forget to enclose 'omp %3' directive into a for or a parallel for region with 'ordered' clause?|; perhaps you forget to enclose 'omp %3' directive into a target region?|; perhaps you forget to enclose 'omp %3' directive into a teams region?|; perhaps you forget to enclose 'omp %3' directive into a for, simd, for simd, parallel for, or parallel for simd region?}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4574" name="err_omp_prohibited_region_atomic">
        <segment state="initial">
          <source>OpenMP constructs may not be nested inside an atomic region</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4575" name="err_omp_prohibited_region_critical_same_name">
        <segment state="initial">
          <source>cannot nest 'critical' regions having the same name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4576" name="err_omp_prohibited_region_order">
        <segment state="initial">
          <source>construct '%0' not allowed in a region associated with a directive with 'order' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4577" name="err_omp_prohibited_region_simd">
        <segment state="initial">
          <source>OpenMP constructs may not be nested inside a simd region%select{| except for ordered simd, simd, scan, or atomic directive}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4578" name="err_omp_reduction_id_not_compatible">
        <segment state="initial">
          <source>list item of type %0 is not valid for specified reduction operation: unable to provide default initialization value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4579" name="err_omp_reduction_identifier_mismatch">
        <segment state="initial">
          <source>in_reduction variable must have the same reduction operation as in a task_reduction clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4580" name="err_omp_reduction_in_task">
        <segment state="initial">
          <source>reduction variables may not be accessed in an explicit task</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4581" name="err_omp_reduction_incomplete_type">
        <segment state="initial">
          <source>a reduction list item with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4582" name="err_omp_reduction_non_addressable_expression">
        <segment state="initial">
          <source>expected addressable reduction item for the task-based directives</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4583" name="err_omp_reduction_not_inclusive_exclusive">
        <segment state="initial">
          <source>the inscan reduction list item must appear as a list item in an 'inclusive' or 'exclusive' clause on an inner 'omp scan' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4584" name="err_omp_reduction_ref_type_arg">
        <segment state="initial">
          <source>argument of OpenMP clause '%0' must reference the same object in all threads</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4585" name="err_omp_reduction_task_not_parallel_or_worksharing">
        <segment state="initial">
          <source>'reduction' clause with 'task' modifier allowed only on non-simd parallel or worksharing constructs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4586" name="err_omp_reduction_vla_unsupported">
        <segment state="initial">
          <source>cannot generate code for reduction on %select{|array section, which requires a }0variable length array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4587" name="err_omp_reduction_with_nogroup">
        <segment state="initial">
          <source>'reduction' clause cannot be used with 'nogroup' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4588" name="err_omp_reduction_wrong_type">
        <segment state="initial">
          <source>reduction type cannot be %select{qualified with 'const', 'volatile' or 'restrict'|a function|a reference|an array}0 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4589" name="err_omp_ref_type_arg">
        <segment state="initial">
          <source>arguments of '#pragma omp %0' cannot be of reference type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4590" name="err_omp_region_not_file_context">
        <segment state="initial">
          <source>directive must be at file or namespace scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4591" name="err_omp_required_access">
        <segment state="initial">
          <source>%0 variable must be %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4592" name="err_omp_requires_clause_redeclaration">
        <segment state="initial">
          <source>only one %0 clause can appear on a requires directive in a single translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4593" name="err_omp_same_pointer_dereferenced">
        <segment state="initial">
          <source>same pointer dereferenced in multiple different ways in map clause expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4594" name="err_omp_scan_single_clause_expected">
        <segment state="initial">
          <source>exactly one of 'inclusive' or 'exclusive' clauses is expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4595" name="err_omp_schedule_nonmonotonic_static">
        <segment state="initial">
          <source>'nonmonotonic' modifier can only be specified with 'dynamic' or 'guided' schedule kind</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4596" name="err_omp_section_function_type">
        <segment state="initial">
          <source>section of pointer to function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4597" name="err_omp_section_incomplete_type">
        <segment state="initial">
          <source>section of pointer to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4598" name="err_omp_section_length_negative">
        <segment state="initial">
          <source>section length is evaluated to a negative value %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4599" name="err_omp_section_length_undefined">
        <segment state="initial">
          <source>section length is unspecified and cannot be inferred because subscripted value is %select{not an array|an array of unknown bound}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4600" name="err_omp_section_not_subset_of_array">
        <segment state="initial">
          <source>array section must be a subset of the original array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4601" name="err_omp_section_stride_non_positive">
        <segment state="initial">
          <source>section stride is evaluated to a non-positive value %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4602" name="err_omp_sections_not_compound_stmt">
        <segment state="initial">
          <source>the statement for '#pragma omp %0' must be a compound statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4603" name="err_omp_sections_substmt_not_section">
        <segment state="initial">
          <source>statement in 'omp %0' directive must be enclosed into a section region</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4604" name="err_omp_several_directives_in_region">
        <segment state="initial">
          <source>exactly one '%0' directive must appear in the loop body of an enclosing directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4605" name="err_omp_several_mem_order_clauses">
        <segment state="initial">
          <source>directive '#pragma omp %0' cannot contain more than one 'seq_cst',%select{ 'relaxed',|}1 'acq_rel', 'acquire' or 'release' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4606" name="err_omp_shaping_dimension_not_positive">
        <segment state="initial">
          <source>array shaping dimension is evaluated to a non-positive value %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4607" name="err_omp_simd_region_cannot_use_stmt">
        <segment state="initial">
          <source>'%0' statement cannot be used in OpenMP simd region</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4608" name="err_omp_simple_clause_incompatible_with_ordered">
        <segment state="initial">
          <source>'%0' clause with '%1' modifier cannot be specified if an 'ordered' clause is specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4609" name="err_omp_single_copyprivate_with_nowait">
        <segment state="initial">
          <source>the 'copyprivate' clause must not be used with the 'nowait' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4610" name="err_omp_single_decl_in_declare_simd_variant">
        <segment state="initial">
          <source>single declaration is expected after 'declare %select{simd|variant}0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4611" name="err_omp_sink_and_source_not_allowed">
        <segment state="initial">
          <source>'%0(%select{source|sink:vec}1)' clause%select{|s}1 cannot be mixed with '%0(%select{sink:vec|source}1)' clause%select{s|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4612" name="err_omp_step_simple_modifier_exclusive">
        <segment state="initial">
          <source>step simple modifier is exclusive and cannot be use with 'val', 'uval' or 'ref' modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4613" name="err_omp_stmt_depends_on_loop_counter">
        <segment state="initial">
          <source>the loop %select{initializer|condition}0 expression depends on the current loop control variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4614" name="err_omp_target_contains_not_only_teams">
        <segment state="initial">
          <source>target construct with nested teams region contains statements outside of the teams construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4615" name="err_omp_taskwait_depend_mutexinoutset_not_allowed">
        <segment state="initial">
          <source>'mutexinoutset' modifier not allowed in 'depend' clause on 'taskwait' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4616" name="err_omp_threadprivate_in_clause">
        <segment state="initial">
          <source>threadprivate variables are not allowed in '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4617" name="err_omp_threadprivate_in_target">
        <segment state="initial">
          <source>threadprivate variables cannot be used in target constructs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4618" name="err_omp_threadprivate_incomplete_type">
        <segment state="initial">
          <source>threadprivate variable with incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4619" name="err_omp_typecheck_section_not_integer">
        <segment state="initial">
          <source>array section %select{lower bound|length}0 is not an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4620" name="err_omp_typecheck_section_value">
        <segment state="initial">
          <source>subscripted value is not an array or pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4621" name="err_omp_typecheck_shaping_not_integer">
        <segment state="initial">
          <source>array shaping operation dimension is not an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4622" name="err_omp_unexpected_call_to_omp_runtime_api">
        <segment state="initial">
          <source>calls to OpenMP runtime API are not allowed within a region that corresponds to a construct with an order clause that specifies concurrent</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4623" name="err_omp_unexpected_clause_value">
        <segment state="initial">
          <source>expected %0 in OpenMP clause '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4624" name="err_omp_unexpected_schedule_modifier">
        <segment state="initial">
          <source>modifier '%0' cannot be used along with modifier '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4625" name="err_omp_union_type_not_allowed">
        <segment state="initial">
          <source>mapping of union members is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4626" name="err_omp_unknown_reduction_identifier_prior_omp_6_0">
        <segment state="initial">
          <source>incorrect reduction identifier, expected one of '+', '-', '*', '&amp;', '|', '^', '&amp;&amp;', '||', 'min' or 'max' or declare reduction for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4627" name="err_omp_unknown_reduction_identifier_since_omp_6_0">
        <segment state="initial">
          <source>incorrect reduction identifier, expected one of '+', '*', '&amp;', '|', '^', '&amp;&amp;', '||', 'min' or 'max' or declare reduction for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4628" name="err_omp_unnamed_if_clause">
        <segment state="initial">
          <source>expected%select{| one of}0 %1 directive name modifier%select{|s}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4629" name="err_omp_unroll_full_variable_trip_count">
        <segment state="initial">
          <source>loop to be fully unrolled must have a constant trip count</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4630" name="err_omp_used_in_clause_twice">
        <segment state="initial">
          <source>%select{a variable|a parameter|'this'}0 cannot appear in more than one %1 clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4631" name="err_omp_usedeviceptr_not_a_pointer">
        <segment state="initial">
          <source>expected pointer or reference to pointer in 'use_device_ptr' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4632" name="err_omp_var_expected">
        <segment state="initial">
          <source>expected variable of the '%0' type%select{|, not %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4633" name="err_omp_var_scope">
        <segment state="initial">
          <source>'#pragma omp %0' must appear in the scope of the %q1 variable declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4634" name="err_omp_var_thread_local">
        <segment state="initial">
          <source>variable %0 cannot be threadprivate because it is %select{thread-local|a global named register variable}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4635" name="err_omp_var_used">
        <segment state="initial">
          <source>'#pragma omp %0' must precede all references to variable %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4636" name="err_omp_variable_in_given_clause_and_dsa">
        <segment state="initial">
          <source>%0 variable cannot be in a %1 clause in '#pragma omp %2' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4637" name="err_omp_variably_modified_type_not_supported">
        <segment state="initial">
          <source>arguments of OpenMP clause '%0' in '#pragma omp %2' directive cannot be of variably-modified type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4638" name="err_omp_wrong_cancel_region">
        <segment state="initial">
          <source>one of 'for', 'parallel', 'sections' or 'taskgroup' is expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4639" name="err_omp_wrong_dependency_iterator_type">
        <segment state="initial">
          <source>expected an integer or a pointer type of the outer loop counter '%0' for non-rectangular nests</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4640" name="err_omp_wrong_device_function_call">
        <segment state="initial">
          <source>function with 'device_type(%0)' is not available on %select{device|host}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4641" name="err_omp_wrong_dsa">
        <segment state="initial">
          <source>%0 variable cannot be %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4642" name="err_omp_wrong_if_directive_name_modifier">
        <segment state="initial">
          <source>directive name modifier '%0' is not allowed for '#pragma omp %1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4643" name="err_omp_wrong_inscan_reduction">
        <segment state="initial">
          <source>'inscan' modifier can be used only in 'omp for', 'omp simd', 'omp for simd', 'omp parallel for', or 'omp parallel for simd' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4644" name="err_omp_wrong_linear_modifier">
        <segment state="initial">
          <source>expected %select{'val' modifier|one of 'ref', val' or 'uval' modifiers}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4645" name="err_omp_wrong_linear_modifier_non_reference">
        <segment state="initial">
          <source>variable of non-reference type %0 can be used only with 'val' modifier, but used with '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4646" name="err_omp_wrong_ordered_loop_count">
        <segment state="initial">
          <source>the parameter of the 'ordered' clause must be greater than or equal to the parameter of the 'collapse' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4647" name="err_omp_wrong_simdlen_safelen_values">
        <segment state="initial">
          <source>the value of 'simdlen' parameter must be less than or equal to the value of the 'safelen' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4648" name="err_omp_wrong_var_in_declare_reduction">
        <segment state="initial">
          <source>only %select{'omp_priv' or 'omp_orig'|'omp_in' or 'omp_out'}0 variables are allowed in %select{initializer|combiner}0 expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4649" name="err_ompx_bare_no_grid">
        <segment state="initial">
          <source>'ompx_bare' clauses requires explicit grid size via 'num_teams' and 'thread_limit' clauses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4650" name="err_ompx_more_than_three_expr_not_allowed">
        <segment state="initial">
          <source>at most three expressions are allowed in '%0' clause in 'target teams ompx_bare' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4651" name="err_only_annotate_after_access_spec">
        <segment state="initial">
          <source>access specifier can only have annotation attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4652" name="err_only_constructors_take_base_inits">
        <segment state="initial">
          <source>only constructors take base initializers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4653" name="err_only_enums_have_underlying_types">
        <segment state="initial">
          <source>only enumeration types have underlying types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4654" name="err_opencl_addrspace_scope">
        <segment state="initial">
          <source>variables in the %0 address space can only be declared in the outermost scope of a kernel function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4655" name="err_opencl_atomic_init">
        <segment state="initial">
          <source>atomic variable can be %select{assigned|initialized}0 to a variable only in global address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4656" name="err_opencl_bitfields">
        <segment state="initial">
          <source>bit-fields are not supported in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4657" name="err_opencl_block_ref_block">
        <segment state="initial">
          <source>cannot refer to a block inside block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4658" name="err_opencl_block_storage_type">
        <segment state="initial">
          <source>the __block storage type is not permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4659" name="err_opencl_builtin_expected_type">
        <segment state="initial">
          <source>illegal call to %0, expected %1 argument type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4660" name="err_opencl_builtin_pipe_arg_num">
        <segment state="initial">
          <source>invalid number of arguments to function: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4661" name="err_opencl_builtin_pipe_first_arg">
        <segment state="initial">
          <source>first argument to %0 must be a pipe type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4662" name="err_opencl_builtin_pipe_invalid_access_modifier">
        <segment state="initial">
          <source>invalid pipe access modifier (expecting %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4663" name="err_opencl_builtin_pipe_invalid_arg">
        <segment state="initial">
          <source>invalid argument type to function %0 (expecting %1 having %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4664" name="err_opencl_builtin_to_addr_invalid_arg">
        <segment state="initial">
          <source>invalid argument %0 to function: %1, expecting a generic pointer argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4665" name="err_opencl_cast_non_zero_to_event_t">
        <segment state="initial">
          <source>cannot cast non-zero value '%0' to 'event_t'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4666" name="err_opencl_cast_to_half">
        <segment state="initial">
          <source>casting to type %0 is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4667" name="err_opencl_constant_no_init">
        <segment state="initial">
          <source>variable in constant address space must be initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4668" name="err_opencl_enqueue_kernel_blocks_no_args">
        <segment state="initial">
          <source>blocks with parameters are not accepted in this prototype of enqueue_kernel call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4669" name="err_opencl_enqueue_kernel_blocks_non_local_void_args">
        <segment state="initial">
          <source>blocks used in enqueue_kernel call are expected to have parameters of type 'local void*'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4670" name="err_opencl_enqueue_kernel_incorrect_args">
        <segment state="initial">
          <source>illegal call to enqueue_kernel, incorrect argument types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4671" name="err_opencl_enqueue_kernel_invalid_local_size_type">
        <segment state="initial">
          <source>illegal call to enqueue_kernel, parameter needs to be specified as integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4672" name="err_opencl_enqueue_kernel_local_size_args">
        <segment state="initial">
          <source>mismatch in number of block parameters and local size arguments passed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4673" name="err_opencl_ext_vector_component_invalid_length">
        <segment state="initial">
          <source>vector component access has invalid length %0; supported lengths are: 1,2,3,4,8,16</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4674" name="err_opencl_extern_block_declaration">
        <segment state="initial">
          <source>invalid block variable declaration - using 'extern' storage class is disallowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4675" name="err_opencl_function_pointer">
        <segment state="initial">
          <source>%select{pointers|references}0 to functions are not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4676" name="err_opencl_function_variable">
        <segment state="initial">
          <source>%select{non-kernel function|function scope}0 variable cannot be declared in %1 address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4677" name="err_opencl_global_invalid_addr_space">
        <segment state="initial">
          <source>%select{program scope|static local|extern}0 variable must reside in %1 address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4678" name="err_opencl_half_declaration">
        <segment state="initial">
          <source>declaring variable of type %0 is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4679" name="err_opencl_half_load_store">
        <segment state="initial">
          <source>%select{loading directly from|assigning directly to}0 pointer to type %1 requires cl_khr_fp16. Use vector data %select{load|store}0 builtin functions instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4680" name="err_opencl_implicit_vector_conversion">
        <segment state="initial">
          <source>implicit conversions between vector types (%0 and %1) are not permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4681" name="err_opencl_invalid_access_qualifier">
        <segment state="initial">
          <source>access qualifier can only be used for pipe and image type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4682" name="err_opencl_invalid_block_declaration">
        <segment state="initial">
          <source>invalid block variable declaration - must be %select{const qualified|initialized}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4683" name="err_opencl_invalid_param">
        <segment state="initial">
          <source>declaring function parameter of type %0 is not allowed%select{; did you forget * ?|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4684" name="err_opencl_invalid_read_write">
        <segment state="initial">
          <source>access qualifier %0 cannot be used for %1 %select{|prior to OpenCL C version 2.0 or in version 3.0 and without __opencl_c_read_write_images feature}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4685" name="err_opencl_invalid_return">
        <segment state="initial">
          <source>declaring function return value of type %0 is not allowed %select{; did you forget * ?|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4686" name="err_opencl_invalid_type_array">
        <segment state="initial">
          <source>array of %0 type is invalid in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4687" name="err_opencl_kernel_attr">
        <segment state="initial">
          <source>attribute %0 can only be applied to an OpenCL kernel function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4688" name="err_opencl_multiple_access_qualifiers">
        <segment state="initial">
          <source>multiple access qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4689" name="err_opencl_no_main">
        <segment state="initial">
          <source>%select{function|kernel}0 cannot be called 'main'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4690" name="err_opencl_nonconst_global_sampler">
        <segment state="initial">
          <source>global sampler requires a const or constant address space qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4691" name="err_opencl_pointer_to_type">
        <segment state="initial">
          <source>pointer to type %0 is invalid in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4692" name="err_opencl_ptrptr_kernel_param">
        <segment state="initial">
          <source>kernel parameter cannot be declared as a pointer to a pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4693" name="err_opencl_requires_extension">
        <segment state="initial">
          <source>use of %select{type|declaration}0 %1 requires %2 support</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4694" name="err_opencl_scalar_type_rank_greater_than_vector_type">
        <segment state="initial">
          <source>scalar operand type has greater rank than the type of the vector element. (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4695" name="err_opencl_sizeof_alignof_type">
        <segment state="initial">
          <source>invalid application of '%0' to a void type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4696" name="err_opencl_taking_address_capture">
        <segment state="initial">
          <source>taking address of a capture is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4697" name="err_opencl_ternary_with_block">
        <segment state="initial">
          <source>block type cannot be used as expression in ternary expression in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4698" name="err_opencl_type_can_only_be_used_as_function_parameter">
        <segment state="initial">
          <source>type %0 can only be used as a function parameter in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4699" name="err_opencl_type_not_found">
        <segment state="initial">
          <source>%0 type %1 not found; include the base header with -finclude-default-header</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4700" name="err_opencl_type_struct_or_union_field">
        <segment state="initial">
          <source>the %0 type cannot be used to declare a structure or union field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4701" name="err_opencl_variadic_function">
        <segment state="initial">
          <source>invalid prototype, variadic arguments are not allowed in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4702" name="err_opencl_vla">
        <segment state="initial">
          <source>variable length arrays are not supported in OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4703" name="err_openclcxx_placement_new">
        <segment state="initial">
          <source>use of placement new requires explicit declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4704" name="err_openmp_default_simd_align_expr">
        <segment state="initial">
          <source>invalid application of '__builtin_omp_required_simd_align' to an expression, only type is allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4705" name="err_openmp_vla_in_task_untied">
        <segment state="initial">
          <source>variable length arrays are not supported in OpenMP tasking regions with 'untied' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4706" name="err_operator_arrow_circular">
        <segment state="initial">
          <source>circular pointer delegation detected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4707" name="err_operator_arrow_depth_exceeded">
        <segment state="initial">
          <source>use of 'operator-&gt;' on type %0 would invoke a sequence of more than %1 'operator-&gt;' calls</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4708" name="err_operator_delete_dependent_param_type">
        <segment state="initial">
          <source>%select{|type aware }0%select{|destroying }1%2 cannot take a dependent type as its %ordinal3 parameter; use %4 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4709" name="err_operator_delete_param_type">
        <segment state="initial">
          <source>%ordinal3 parameter of%select{| type aware}0%select{| destroying}1 %2 must have type %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4710" name="err_operator_new_default_arg">
        <segment state="initial">
          <source>parameter of %0 cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4711" name="err_operator_new_delete_declared_in_namespace">
        <segment state="initial">
          <source>%0 cannot be declared inside a namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4712" name="err_operator_new_delete_declared_static">
        <segment state="initial">
          <source>%0 cannot be declared static in global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4713" name="err_operator_new_delete_dependent_result_type">
        <segment state="initial">
          <source>%0 cannot have a dependent return type; use %1 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4714" name="err_operator_new_delete_invalid_result_type">
        <segment state="initial">
          <source>%0 must return type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4715" name="err_operator_new_delete_template_too_few_parameters">
        <segment state="initial">
          <source>%0 template must have at least two parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4716" name="err_operator_new_delete_too_few_parameters">
        <segment state="initial">
          <source>%select{|type aware }0%select{|destroying }1%2 must have at least %select{|one|two|three|four|five}3 parameter%s3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4717" name="err_operator_new_dependent_param_type">
        <segment state="initial">
          <source>%select{|type aware }0%select{|destroying }1%2 cannot take a dependent type as its %ordinal3 parameter; use %5 (%4) instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4718" name="err_operator_new_param_type">
        <segment state="initial">
          <source>%select{|type aware }0%select{|destroying }1%2 takes type %5 (%4) as %ordinal3 parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4719" name="err_operator_overload_default_arg">
        <segment state="initial">
          <source>parameter of overloaded %0 cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4720" name="err_operator_overload_must_be">
        <segment state="initial">
          <source>overloaded %0 must be a %select{unary|binary|unary or binary}2 operator (has %1 parameter%s1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4721" name="err_operator_overload_must_be_member">
        <segment state="initial">
          <source>overloaded %0 must be a non-static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4722" name="err_operator_overload_needs_class_or_enum">
        <segment state="initial">
          <source>overloaded %0 must have at least one parameter of class or enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4723" name="err_operator_overload_post_incdec_must_be_int">
        <segment state="initial">
          <source>parameter of overloaded post-%select{increment|decrement}1 operator must have type 'int' (not %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4724" name="err_operator_overload_static">
        <segment state="initial">
          <source>overloaded %0 cannot be a static member function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4725" name="err_operator_overload_variadic">
        <segment state="initial">
          <source>overloaded %0 cannot be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4726" name="err_os_log_argument_too_big">
        <segment state="initial">
          <source>os_log() argument %0 is too big (%1 bytes, max %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4727" name="err_os_log_format_not_string_constant">
        <segment state="initial">
          <source>os_log() format argument is not a string constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4728" name="err_out_of_line_default_deletes">
        <segment state="initial">
          <source>defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 would delete it after its first declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4729" name="err_out_of_line_qualified_id_type_names_constructor">
        <segment state="initial">
          <source>qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4730" name="err_overflow_builtin_bit_int_max_size">
        <segment state="initial">
          <source>__builtin_mul_overflow does not support 'signed _BitInt' operands of more than %0 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4731" name="err_overflow_builtin_must_be_int">
        <segment state="initial">
          <source>operand argument to %select{overflow builtin|checked integer operation}0 must be an integer type %select{|other than plain 'char', 'bool', bit-precise, or an enumeration }0(%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4732" name="err_overflow_builtin_must_be_ptr_int">
        <segment state="initial">
          <source>result argument to %select{overflow builtin|checked integer operation}0 must be a pointer to a non-const integer type %select{|other than plain 'char', 'bool', bit-precise, or an enumeration }0(%1 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4733" name="err_override_exception_spec">
        <segment state="initial">
          <source>exception specification of overriding function is more lax than base version</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4734" name="err_ovl_ambiguous_call">
        <segment state="initial">
          <source>call to %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4735" name="err_ovl_ambiguous_conversion_in_cast">
        <segment state="initial">
          <source>ambiguous conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4736" name="err_ovl_ambiguous_init">
        <segment state="initial">
          <source>call to constructor of %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4737" name="err_ovl_ambiguous_member_call">
        <segment state="initial">
          <source>call to member function %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4738" name="err_ovl_ambiguous_object_call">
        <segment state="initial">
          <source>call to object of type %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4739" name="err_ovl_ambiguous_oper_binary">
        <segment state="initial">
          <source>use of overloaded operator '%0' is ambiguous (with operand types %1 and %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4740" name="err_ovl_ambiguous_oper_unary">
        <segment state="initial">
          <source>use of overloaded operator '%0' is ambiguous (operand type %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4741" name="err_ovl_ambiguous_subscript_call">
        <segment state="initial">
          <source>call to subscript operator of type %0 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4742" name="err_ovl_deleted_call">
        <segment state="initial">
          <source>call to deleted%select{| member}0 function %1%select{|: %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4743" name="err_ovl_deleted_comparison">
        <segment state="initial">
          <source>object of type %0 cannot be compared because its %1 is implicitly deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4744" name="err_ovl_deleted_conversion_in_cast">
        <segment state="initial">
          <source>%select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 uses deleted function%select{|: %4}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4745" name="err_ovl_deleted_init">
        <segment state="initial">
          <source>call to deleted constructor of %0%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4746" name="err_ovl_deleted_object_call">
        <segment state="initial">
          <source>call to deleted function call operator in type %0%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4747" name="err_ovl_deleted_oper">
        <segment state="initial">
          <source>overload resolution selected deleted operator '%0'%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4748" name="err_ovl_deleted_special_init">
        <segment state="initial">
          <source>call to implicitly-deleted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0 of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4749" name="err_ovl_deleted_special_oper">
        <segment state="initial">
          <source>object of type %0 cannot be %select{constructed|copied|moved|assigned|assigned|destroyed}1 because its %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 is implicitly deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4750" name="err_ovl_diff_return_type">
        <segment state="initial">
          <source>functions that differ only in their return type cannot be overloaded</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4751" name="err_ovl_no_conversion_in_cast">
        <segment state="initial">
          <source>cannot convert %1 to %2 without a conversion operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4752" name="err_ovl_no_oper">
        <segment state="initial">
          <source>type %0 does not provide a %select{subscript|call}1 operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4753" name="err_ovl_no_viable_conversion_in_cast">
        <segment state="initial">
          <source>no matching conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4754" name="err_ovl_no_viable_function_in_call">
        <segment state="initial">
          <source>no matching function for call to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4755" name="err_ovl_no_viable_function_in_init">
        <segment state="initial">
          <source>no matching constructor for initialization of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4756" name="err_ovl_no_viable_literal_operator">
        <segment state="initial">
          <source>no matching literal operator for call to %0%select{| with argument of type %2| with arguments of types %2 and %3}1%select{| or 'const char *'}4%select{|, and no matching literal operator template}5</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4757" name="err_ovl_no_viable_member_function_in_call">
        <segment state="initial">
          <source>no matching member function for call to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4758" name="err_ovl_no_viable_object_call">
        <segment state="initial">
          <source>no matching function for call to object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4759" name="err_ovl_no_viable_oper">
        <segment state="initial">
          <source>no viable overloaded '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4760" name="err_ovl_no_viable_subscript">
        <segment state="initial">
          <source>no viable overloaded operator[] for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4761" name="err_ovl_rewrite_equalequal_not_bool">
        <segment state="initial">
          <source>return type %0 of selected 'operator==' function for rewritten '%1' comparison is not 'bool'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4762" name="err_ovl_static_nonstatic_member">
        <segment state="initial">
          <source>static and non-static member functions with the same parameter types cannot be overloaded</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4763" name="err_ovl_unresolvable">
        <segment state="initial">
          <source>reference to %select{overloaded|multiversioned}1 function could not be resolved; did you mean to call it%select{| with no arguments}0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4764" name="err_ownership_returns_index_mismatch">
        <segment state="initial">
          <source>'ownership_returns' attribute index does not match; here it is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4765" name="err_ownership_takes_class_mismatch">
        <segment state="initial">
          <source>'ownership_takes' attribute class does not match; here it is '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4766" name="err_ownership_takes_return_type">
        <segment state="initial">
          <source>'ownership_returns' attribute only applies to functions that return a pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4767" name="err_ownership_type">
        <segment state="initial">
          <source>%0 attribute only applies to %select{pointer|integer}1 arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4768" name="err_pack_expansion_length_conflict">
        <segment state="initial">
          <source>pack expansion contains parameter packs %0 and %1 that have different lengths (%2 vs. %select{|at least }3%4)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4769" name="err_pack_expansion_length_conflict_multilevel">
        <segment state="initial">
          <source>pack expansion contains parameter pack %0 that has a different length (%1 vs. %select{|at least }2%3) from outer parameter packs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4770" name="err_pack_expansion_length_conflict_partial">
        <segment state="initial">
          <source>pack expansion contains parameter pack %0 that has a different length (at least %1 vs. %2) from outer parameter packs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4771" name="err_pack_expansion_member_init">
        <segment state="initial">
          <source>pack expansion for initialization of member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4772" name="err_pack_expansion_without_parameter_packs">
        <segment state="initial">
          <source>pack expansion does not contain any unexpanded parameter packs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4773" name="err_pack_index_out_of_bound">
        <segment state="initial">
          <source>invalid index %0 for pack %1 of size %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4774" name="err_pack_outside_template">
        <segment state="initial">
          <source>pack declaration outside of template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4775" name="err_param_default_argument">
        <segment state="initial">
          <source>C does not support default arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4776" name="err_param_default_argument_member_template_redecl">
        <segment state="initial">
          <source>default arguments cannot be added to an out-of-line definition of a member of a %select{class template|class template partial specialization|nested class in a template}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4777" name="err_param_default_argument_missing">
        <segment state="initial">
          <source>missing default argument on parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4778" name="err_param_default_argument_missing_name">
        <segment state="initial">
          <source>missing default argument on parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4779" name="err_param_default_argument_nonfunc">
        <segment state="initial">
          <source>default arguments can only be specified for parameters in a function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4780" name="err_param_default_argument_on_parameter_pack">
        <segment state="initial">
          <source>parameter pack cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4781" name="err_param_default_argument_redefinition">
        <segment state="initial">
          <source>redefinition of default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4782" name="err_param_default_argument_references_local">
        <segment state="initial">
          <source>default argument references local variable %0 of enclosing function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4783" name="err_param_default_argument_references_param">
        <segment state="initial">
          <source>default argument references parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4784" name="err_param_default_argument_references_this">
        <segment state="initial">
          <source>default argument references 'this'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4785" name="err_param_default_argument_template_redecl">
        <segment state="initial">
          <source>default arguments cannot be added to a function template that has already been declared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4786" name="err_param_with_void_type">
        <segment state="initial">
          <source>argument may not have 'void' type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4787" name="err_parameter_shadow_capture">
        <segment state="initial">
          <source>a lambda parameter cannot shadow an explicitly captured entity</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4788" name="err_parameters_retval_cannot_have_fp16_type">
        <segment state="initial">
          <source>%select{parameters|function return value}0 cannot have __fp16 type; did you forget * ?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4789" name="err_parens_pointer_member_function">
        <segment state="initial">
          <source>cannot parenthesize the name of a method when forming a member pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4790" name="err_partial_spec_args_match_primary_template">
        <segment state="initial">
          <source>%select{class|variable}0 template partial specialization does not specialize any template argument; to %select{declare|define}1 the primary template, remove the template argument list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4791" name="err_partial_spec_fully_specialized">
        <segment state="initial">
          <source>partial specialization of %0 does not use any of its template parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4792" name="err_partial_spec_ordering_ambiguous">
        <segment state="initial">
          <source>ambiguous partial specializations of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4793" name="err_partial_spec_redeclared">
        <segment state="initial">
          <source>class template partial specialization %0 cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4794" name="err_partial_specialization_friend">
        <segment state="initial">
          <source>partial specialization cannot be declared as a friend</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4795" name="err_placeholder_constraints_not_satisfied">
        <segment state="initial">
          <source>deduced type %0 does not satisfy %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4796" name="err_placement_new_non_placement_delete">
        <segment state="initial">
          <source>'new' expression with placement arguments refers to non-placement 'operator delete'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4797" name="err_pointer_to_member_call_drops_quals">
        <segment state="initial">
          <source>call to pointer to member function of type %0 drops '%1' qualifier%s2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4798" name="err_pointer_to_member_oper_value_classify">
        <segment state="initial">
          <source>pointer-to-member function type %0 can only be called on an %select{rvalue|lvalue}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4799" name="err_pointer_to_member_type">
        <segment state="initial">
          <source>invalid use of pointer to member type after %select{.*|-&gt;*}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4800" name="err_ppc_builtin_requires_abi">
        <segment state="initial">
          <source>this builtin requires ABI -mabi=%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4801" name="err_ppc_invalid_test_data_class_type">
        <segment state="initial">
          <source>expected a 'float', 'double' or '__float128' for the first argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4802" name="err_ppc_invalid_use_mma_type">
        <segment state="initial">
          <source>invalid use of PPC MMA type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4803" name="err_pragma_alloc_text_c_linkage">
        <segment state="initial">
          <source>'#pragma alloc_text' is applicable only to functions with C linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4804" name="err_pragma_alloc_text_not_function">
        <segment state="initial">
          <source>'#pragma alloc_text' is applicable only to functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4805" name="err_pragma_attr_attr_no_push">
        <segment state="initial">
          <source>'#pragma clang attribute' attribute with no matching '#pragma clang attribute push'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4806" name="err_pragma_attribute_invalid_matchers">
        <segment state="initial">
          <source>attribute %0 cannot be applied to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4807" name="err_pragma_attribute_matcher_negated_subrule_contradicts_subrule">
        <segment state="initial">
          <source>negated attribute subject matcher sub-rule '%0' contradicts sub-rule '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4808" name="err_pragma_attribute_matcher_subrule_contradicts_rule">
        <segment state="initial">
          <source>redundant attribute subject matcher sub-rule '%0'; '%1' already matches those declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4809" name="err_pragma_attribute_no_pop_eof">
        <segment state="initial">
          <source>unterminated '#pragma clang attribute push' at end of file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4810" name="err_pragma_attribute_stack_mismatch">
        <segment state="initial">
          <source>'#pragma clang attribute %select{%1.|}0pop' with no matching '#pragma clang attribute %select{%1.|}0push'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4811" name="err_pragma_expected_file_scope">
        <segment state="initial">
          <source>'#pragma %0' can only appear at file scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4812" name="err_pragma_fc_except_requires_precise">
        <segment state="initial">
          <source>'#pragma float_control(except, on)' is illegal when precise is disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4813" name="err_pragma_fc_noprecise_requires_noexcept">
        <segment state="initial">
          <source>'#pragma float_control(precise, off)' is illegal when except is enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4814" name="err_pragma_fc_noprecise_requires_nofenv">
        <segment state="initial">
          <source>'#pragma float_control(precise, off)' is illegal when fenv_access is enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4815" name="err_pragma_fc_pp_scope">
        <segment state="initial">
          <source>'#pragma float_control push/pop' can only appear at file or namespace scope or within a language linkage specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4816" name="err_pragma_fenv_requires_precise">
        <segment state="initial">
          <source>'#pragma STDC FENV_ACCESS ON' is illegal when precise is disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4817" name="err_pragma_loop_compatibility">
        <segment state="initial">
          <source>%select{incompatible|duplicate}0 directives '%1' and '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4818" name="err_pragma_loop_invalid_argument_type">
        <segment state="initial">
          <source>invalid argument of type %0; expected an integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4819" name="err_pragma_loop_precedes_nonloop">
        <segment state="initial">
          <source>expected a for, while, or do-while loop to follow '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4820" name="err_pragma_options_align_mac68k_target_unsupported">
        <segment state="initial">
          <source>mac68k alignment pragma is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4821" name="err_pragma_pack_identifer_not_supported">
        <segment state="initial">
          <source>specifying an identifier within `#pragma pack` is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4822" name="err_pragma_pack_invalid_alignment">
        <segment state="initial">
          <source>expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4823" name="err_pragma_pop_visibility_mismatch">
        <segment state="initial">
          <source>#pragma visibility pop with no matching #pragma visibility push</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4824" name="err_pragma_push_visibility_mismatch">
        <segment state="initial">
          <source>#pragma visibility push with no matching #pragma visibility pop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4825" name="err_pragma_section_invalid_for_target">
        <segment state="initial">
          <source>argument to #pragma section is not valid for this target: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4826" name="err_preserve_enum_value_invalid">
        <segment state="initial">
          <source>__builtin_preserve_enum_value argument %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4827" name="err_preserve_enum_value_not_const">
        <segment state="initial">
          <source>__builtin_preserve_enum_value argument %0 not a constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4828" name="err_preserve_field_info_not_const">
        <segment state="initial">
          <source>__builtin_preserve_field_info argument %0 not a constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4829" name="err_preserve_field_info_not_field">
        <segment state="initial">
          <source>__builtin_preserve_field_info argument %0 not a field access</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4830" name="err_preserve_type_info_invalid">
        <segment state="initial">
          <source>__builtin_preserve_type_info argument %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4831" name="err_preserve_type_info_not_const">
        <segment state="initial">
          <source>__builtin_preserve_type_info argument %0 not a constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4832" name="err_private_ivar_access">
        <segment state="initial">
          <source>instance variable %0 is private</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4833" name="err_private_module_fragment_not_module">
        <segment state="initial">
          <source>private module fragment declaration with no preceding module declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4834" name="err_private_module_fragment_not_module_interface">
        <segment state="initial">
          <source>private module fragment in module implementation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4835" name="err_private_module_fragment_redefined">
        <segment state="initial">
          <source>private module fragment redefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4836" name="err_probability_not_constant_float">
        <segment state="initial">
          <source>probability argument to __builtin_expect_with_probability must be constant floating-point expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4837" name="err_probability_out_of_range">
        <segment state="initial">
          <source>probability argument to __builtin_expect_with_probability is outside the range [0.0, 1.0]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4838" name="err_property_accessor_type">
        <segment state="initial">
          <source>type of property %0 (%1) does not match type of accessor %2 (%3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4839" name="err_property_found_suggest">
        <segment state="initial">
          <source>property %0 found on object of type %1; did you mean to access it with the "." operator?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4840" name="err_property_function_in_objc_container">
        <segment state="initial">
          <source>use of Objective-C property in function nested in Objective-C container not supported, move function outside its container</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4841" name="err_property_implemented">
        <segment state="initial">
          <source>property %0 is already implemented</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4842" name="err_property_is_variably_modified">
        <segment state="initial">
          <source>property %0 has a variably modified type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4843" name="err_property_ivar_type">
        <segment state="initial">
          <source>type of property %0 (%1) does not match type of instance variable %2 (%3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4844" name="err_property_method_unavailable">
        <segment state="initial">
          <source>property access is using %0 method which is unavailable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4845" name="err_property_not_as_forward_class">
        <segment state="initial">
          <source>property %0 refers to an incomplete Objective-C class %1 (with no @interface available)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4846" name="err_property_not_found">
        <segment state="initial">
          <source>property %0 not found on object of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4847" name="err_property_not_found_forward_class">
        <segment state="initial">
          <source>property %0 cannot be found in forward class object %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4848" name="err_property_not_found_suggest">
        <segment state="initial">
          <source>property %0 not found on object of type %1; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4849" name="err_property_setter_ambiguous_use">
        <segment state="initial">
          <source>synthesized properties %0 and %1 both claim setter %2 - use of this setter will cause unexpected behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4850" name="err_property_type">
        <segment state="initial">
          <source>property cannot have array or function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4851" name="err_protected_ivar_access">
        <segment state="initial">
          <source>instance variable %0 is protected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4852" name="err_protocol_has_circular_dependency">
        <segment state="initial">
          <source>protocol has circular dependency</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4853" name="err_protocol_property_mismatch">
        <segment state="initial">
          <source>property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4854" name="err_pseudo_dtor_base_not_scalar">
        <segment state="initial">
          <source>object expression of non-scalar type %0 cannot be used in a pseudo-destructor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4855" name="err_pseudo_dtor_call_with_args">
        <segment state="initial">
          <source>call to pseudo-destructor cannot have any arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4856" name="err_pseudo_dtor_destructor_non_type">
        <segment state="initial">
          <source>%0 does not refer to a type name in pseudo-destructor expression; expected the name of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4857" name="err_pseudo_dtor_type_mismatch">
        <segment state="initial">
          <source>the type of object expression %diff{($) does not match the type being destroyed ($)|does not match the type being destroyed}0,1 in pseudo-destructor expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4858" name="err_ptrauth_address_discrimination_invalid">
        <segment state="initial">
          <source>invalid address discrimination flag '%0'; '__ptrauth' requires '0' or '1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4859" name="err_ptrauth_arg_not_ice">
        <segment state="initial">
          <source>argument to '__ptrauth' must be an integer constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4860" name="err_ptrauth_bad_constant_discriminator">
        <segment state="initial">
          <source>discriminator argument to ptrauth_sign_constant must be a constant integer, the address of the global variable where the result will be stored, or a blend of the two</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4861" name="err_ptrauth_bad_constant_pointer">
        <segment state="initial">
          <source>argument to ptrauth_sign_constant must refer to a global variable or function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4862" name="err_ptrauth_disabled">
        <segment state="initial">
          <source>this target does not support pointer authentication</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4863" name="err_ptrauth_extra_discriminator_invalid">
        <segment state="initial">
          <source>invalid extra discriminator flag '%0'; '__ptrauth' requires a value between '0' and '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4864" name="err_ptrauth_indirect_goto_addrlabel_arithmetic">
        <segment state="initial">
          <source>%select{subtraction|addition}0 of address-of-label expressions is not supported with ptrauth indirect gotos</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4865" name="err_ptrauth_invalid_key">
        <segment state="initial">
          <source>%0 does not identify a valid pointer authentication key for the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4866" name="err_ptrauth_qualifier_cast">
        <segment state="initial">
          <source>cannot cast to '__ptrauth'-qualified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4867" name="err_ptrauth_qualifier_invalid">
        <segment state="initial">
          <source>%select{return type|parameter type|property}1 may not be qualified with '__ptrauth'; type is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4868" name="err_ptrauth_qualifier_invalid_target">
        <segment state="initial">
          <source>'__ptrauth' qualifier only applies to pointer or pointer sized integer types; %0 is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4869" name="err_ptrauth_qualifier_redundant">
        <segment state="initial">
          <source>type %0 is already '__ptrauth'-qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4870" name="err_ptrauth_string_not_literal">
        <segment state="initial">
          <source>argument must be a string literal%select{| of char type}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4871" name="err_ptrauth_type_disc_undiscriminated">
        <segment state="initial">
          <source>cannot pass undiscriminated type %0 to '__builtin_ptrauth_type_discriminator'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4872" name="err_ptrauth_value_bad_type">
        <segment state="initial">
          <source>%select{signed value|extra discriminator|blended pointer|blended integer}0 must have %select{pointer|integer|pointer or integer}1 type; type here is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4873" name="err_pure_friend">
        <segment state="initial">
          <source>friend declaration cannot have a pure-specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4874" name="err_qualified_catch_declarator">
        <segment state="initial">
          <source>exception declarator cannot be qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4875" name="err_qualified_friend_def">
        <segment state="initial">
          <source>friend function definition cannot be qualified with %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4876" name="err_qualified_friend_no_match">
        <segment state="initial">
          <source>friend declaration of %0 does not match any declaration in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4877" name="err_qualified_function_typeid">
        <segment state="initial">
          <source>type operand %0 of 'typeid' cannot have '%1' qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4878" name="err_qualified_member_nonclass">
        <segment state="initial">
          <source>qualified member access refers to a member in %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4879" name="err_qualified_member_of_unrelated">
        <segment state="initial">
          <source>%q0 is not a member of class %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4880" name="err_qualified_objc_access">
        <segment state="initial">
          <source>%select{property|instance variable}0 access cannot be qualified with %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4881" name="err_qualified_objc_catch_parm">
        <segment state="initial">
          <source>@catch parameter declarator cannot be qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4882" name="err_qualified_param_declarator">
        <segment state="initial">
          <source>parameter declarator cannot be qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4883" name="err_qualified_typedef_declarator">
        <segment state="initial">
          <source>typedef declarator cannot be qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4884" name="err_range_on_array_parameter">
        <segment state="initial">
          <source>cannot build range expression with array function parameter %0 since parameter with array type %1 is treated as pointer type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4885" name="err_readonly_message_assignment">
        <segment state="initial">
          <source>assigning to 'readonly' return result of an Objective-C message not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4886" name="err_realimag_invalid_type">
        <segment state="initial">
          <source>invalid type %0 to %1 operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4887" name="err_record_with_pointers_kernel_param">
        <segment state="initial">
          <source>%select{struct|union}0 kernel parameters may not contain pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4888" name="err_recursive_concept">
        <segment state="initial">
          <source>a concept definition cannot refer to itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4889" name="err_recursive_default_argument">
        <segment state="initial">
          <source>recursive evaluation of default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4890" name="err_recursive_superclass">
        <segment state="initial">
          <source>trying to recursively use %0 as superclass of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4891" name="err_redeclaration_different_type">
        <segment state="initial">
          <source>redeclaration of %0 with a different type%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4892" name="err_redeclaration_non_exported">
        <segment state="initial">
          <source>cannot export redeclaration %0 here since the previous declaration %select{is not exported|has internal linkage|has module linkage}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4893" name="err_redefinition">
        <segment state="initial">
          <source>redefinition of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4894" name="err_redefinition_different_concept">
        <segment state="initial">
          <source>redefinition of concept %0 with different template parameters or requirements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4895" name="err_redefinition_different_kind">
        <segment state="initial">
          <source>redefinition of %0 as different kind of symbol</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4896" name="err_redefinition_different_namespace_alias">
        <segment state="initial">
          <source>redefinition of %0 as an alias for a different namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4897" name="err_redefinition_different_type">
        <segment state="initial">
          <source>redefinition of %0 with a different type%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4898" name="err_redefinition_different_typedef">
        <segment state="initial">
          <source>%select{typedef|type alias|type alias template}0 redefinition with different types%diff{ ($ vs $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4899" name="err_redefinition_extern_inline">
        <segment state="initial">
          <source>redefinition of a 'extern inline' function %0 is not supported in %select{C99 mode|C++}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4900" name="err_redefinition_of_enumerator">
        <segment state="initial">
          <source>redefinition of enumerator %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4901" name="err_redefinition_of_label">
        <segment state="initial">
          <source>redefinition of label %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4902" name="err_redefinition_variably_modified_typedef">
        <segment state="initial">
          <source>redefinition of %select{typedef|type alias}0 for variably-modified type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4903" name="err_reduction_op_mismatch">
        <segment state="initial">
          <source>OpenACC 'reduction' variable must have the same operator in all nested constructs (%0 vs %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4904" name="err_ref_array_type">
        <segment state="initial">
          <source>cannot refer to declaration with an array type inside block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4905" name="err_ref_bad_target">
        <segment state="initial">
          <source>reference to %select{__device__|__global__|__host__|__host__ __device__}0 %select{function|variable}1 %2 in %select{__device__|__global__|__host__|__host__ __device__}3 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4906" name="err_ref_bad_target_global_initializer">
        <segment state="initial">
          <source>reference to %select{__device__|__global__|__host__|__host__ __device__}0 function %1 in global initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4907" name="err_ref_flexarray_type">
        <segment state="initial">
          <source>cannot refer to declaration of structure variable with flexible array member inside block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4908" name="err_ref_init_ambiguous">
        <segment state="initial">
          <source>reference initialization of type %0 with initializer of type %1 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4909" name="err_ref_non_value">
        <segment state="initial">
          <source>%0 does not refer to a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4910" name="err_ref_qualifier_comparison_operator">
        <segment state="initial">
          <source>ref-qualifier '&amp;&amp;' is not allowed on a defaulted comparison operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4911" name="err_ref_qualifier_constructor">
        <segment state="initial">
          <source>ref-qualifier '%select{&amp;&amp;|&amp;}0' is not allowed on a constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4912" name="err_ref_qualifier_destructor">
        <segment state="initial">
          <source>ref-qualifier '%select{&amp;&amp;|&amp;}0' is not allowed on a destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4913" name="err_ref_qualifier_overload">
        <segment state="initial">
          <source>cannot overload a member function %select{without a ref-qualifier|with ref-qualifier '&amp;'|with ref-qualifier '&amp;&amp;'}0 with a member function %select{without a ref-qualifier|with ref-qualifier '&amp;'|with ref-qualifier '&amp;&amp;'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4914" name="err_ref_vm_type">
        <segment state="initial">
          <source>cannot refer to declaration with a variably modified type inside block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4915" name="err_reference_bind_drops_quals">
        <segment state="initial">
          <source>binding reference %diff{of type $ to value of type $|to value}0,1 %select{drops %3 qualifier%plural{1:|2:|4:|:s}4|changes address space|not permitted due to incompatible qualifiers}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4916" name="err_reference_bind_failed">
        <segment state="initial">
          <source>reference %diff{to %select{type|incomplete type}1 $ could not bind to an %select{rvalue|lvalue}2 of type $|could not bind to %select{rvalue|lvalue}2 of incompatible type}0,3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4917" name="err_reference_bind_init_list">
        <segment state="initial">
          <source>reference to type %0 cannot bind to an initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4918" name="err_reference_bind_temporary_addrspace">
        <segment state="initial">
          <source>reference of type %0 cannot bind to a temporary object because of address space mismatch</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4919" name="err_reference_bind_to_bitfield">
        <segment state="initial">
          <source>%select{non-const|volatile}0 reference cannot bind to bit-field%select{| %1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4920" name="err_reference_bind_to_bitfield_in_cce">
        <segment state="initial">
          <source>reference cannot bind to bit-field in converted constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4921" name="err_reference_bind_to_matrix_element">
        <segment state="initial">
          <source>%select{non-const|volatile}0 reference cannot bind to matrix element</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4922" name="err_reference_bind_to_vector_element">
        <segment state="initial">
          <source>%select{non-const|volatile}0 reference cannot bind to vector element</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4923" name="err_reference_capture_with_reference_default">
        <segment state="initial">
          <source>'&amp;' cannot precede a capture when the capture default is '&amp;'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4924" name="err_reference_has_multiple_inits">
        <segment state="initial">
          <source>reference cannot be initialized with multiple values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4925" name="err_reference_pipe_type">
        <segment state="initial">
          <source>pipes packet types cannot be of reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4926" name="err_reference_to_function_with_unsatisfied_constraints">
        <segment state="initial">
          <source>invalid reference to function %0: constraints not satisfied</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4927" name="err_reference_to_local_in_enclosing_context">
        <segment state="initial">
          <source>reference to local %select{variable|binding}1 %0 declared in enclosing %select{%3|block literal|lambda expression|context}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4928" name="err_reference_to_void">
        <segment state="initial">
          <source>cannot form a reference to 'void'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4929" name="err_reference_var_requires_init">
        <segment state="initial">
          <source>declaration of reference variable %0 requires an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4930" name="err_reference_without_init">
        <segment state="initial">
          <source>reference to type %0 requires an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4931" name="err_regparm_mismatch">
        <segment state="initial">
          <source>function declared with regparm(%0) attribute was previously declared %plural{0:without the regparm|:with the regparm(%1)}1 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4932" name="err_repeat_attribute">
        <segment state="initial">
          <source>%0 attribute cannot be repeated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4933" name="err_require_constant_init_failed">
        <segment state="initial">
          <source>variable does not have a constant initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4934" name="err_requires_expr_local_parameter_default_argument">
        <segment state="initial">
          <source>default arguments not allowed for parameters of a requires expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4935" name="err_requires_expr_parameter_referenced_in_evaluated_context">
        <segment state="initial">
          <source>constraint variable %0 cannot be used in an evaluated context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4936" name="err_restricted_superclass_mismatch">
        <segment state="initial">
          <source>cannot subclass a class that was declared with the 'objc_subclassing_restricted' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4937" name="err_ret_local_block">
        <segment state="initial">
          <source>returning block that lives on the local stack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4938" name="err_ret_local_temp_ref">
        <segment state="initial">
          <source>returning reference to local temporary object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4939" name="err_rethrow_used_outside_catch">
        <segment state="initial">
          <source>@throw (rethrow) used outside of a @catch block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4940" name="err_return_block_has_expr">
        <segment state="initial">
          <source>void block should not return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4941" name="err_return_in_captured_stmt">
        <segment state="initial">
          <source>cannot return from %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4942" name="err_return_in_constructor_handler">
        <segment state="initial">
          <source>return in the catch of a function try block of a constructor is illegal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4943" name="err_return_in_coroutine">
        <segment state="initial">
          <source>return statement not allowed in coroutine; did you mean 'co_return'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4944" name="err_return_init_list">
        <segment state="initial">
          <source>%select{void function|void method|constructor|destructor}1 %0 must not return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4945" name="err_return_value_with_address_space">
        <segment state="initial">
          <source>return type cannot be qualified with address space</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4946" name="err_riscv_attribute_interrupt_invalid_combination">
        <segment state="initial">
          <source>RISC-V 'interrupt' attribute contains invalid combination of interrupt types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4947" name="err_riscv_attribute_interrupt_requires_extension">
        <segment state="initial">
          <source>RISC-V 'interrupt' attribute '%0' requires extension '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4948" name="err_riscv_builtin_invalid_lmul">
        <segment state="initial">
          <source>LMUL argument must be in the range [0,3] or [5,7]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4949" name="err_riscv_builtin_requires_extension">
        <segment state="initial">
          <source>builtin requires%select{| at least one of the following extensions}0: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4950" name="err_riscv_type_requires_extension">
        <segment state="initial">
          <source>RISC-V type %0 requires the '%1' extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4951" name="err_root_class_cannot_use_super">
        <segment state="initial">
          <source>%0 cannot use 'super' because it is a root class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4952" name="err_rotation_argument_to_cadd">
        <segment state="initial">
          <source>argument should be the value 90 or 270</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4953" name="err_rotation_argument_to_cmla">
        <segment state="initial">
          <source>argument should be the value 0, 90, 180 or 270</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4954" name="err_rref_in_exception_spec">
        <segment state="initial">
          <source>rvalue reference type %0 is not allowed in exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4955" name="err_sampler_argument_required">
        <segment state="initial">
          <source>sampler_t variable required - got %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4956" name="err_sampler_initializer_not_integer">
        <segment state="initial">
          <source>sampler_t initialization requires 32-bit integer, not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4957" name="err_second_argument_to_cwsc_not_pointer">
        <segment state="initial">
          <source>second argument to __builtin_call_with_static_chain must be of pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4958" name="err_second_parameter_to_va_arg_abstract">
        <segment state="initial">
          <source>second argument to 'va_arg' is of abstract type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4959" name="err_second_parameter_to_va_arg_incomplete">
        <segment state="initial">
          <source>second argument to 'va_arg' is of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4960" name="err_section_conflict">
        <segment state="initial">
          <source>%0 causes a section type conflict with %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4961" name="err_seh_in_a_coroutine_with_cxx_exceptions">
        <segment state="initial">
          <source>cannot use SEH '__try' in a coroutine when C++ exceptions are enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4962" name="err_seh_try_outside_functions">
        <segment state="initial">
          <source>cannot use SEH '__try' in blocks, captured regions, or Obj-C method decls</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4963" name="err_seh_try_unsupported">
        <segment state="initial">
          <source>SEH '__try' is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4964" name="err_selected_explicit_constructor">
        <segment state="initial">
          <source>chosen constructor is explicit in copy-initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4965" name="err_selector_element_const_type">
        <segment state="initial">
          <source>selector element of type %0 cannot be a constant lvalue expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4966" name="err_selector_element_not_lvalue">
        <segment state="initial">
          <source>selector element is not a valid lvalue</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4967" name="err_selector_element_type">
        <segment state="initial">
          <source>selector element type %0 is not a valid object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4968" name="err_setter_type_void">
        <segment state="initial">
          <source>type of setter must be void</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4969" name="err_setting_eval_method_used_in_unsafe_context">
        <segment state="initial">
          <source>%select{'#pragma clang fp eval_method'|option 'ffp-eval-method'}0 cannot be used with %select{option 'fapprox-func'|option 'mreassociate'|option 'freciprocal'|option 'ffp-eval-method'|'#pragma clang fp reassociate'|'#pragma clang fp reciprocal'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4970" name="err_shared_var_init">
        <segment state="initial">
          <source>initialization is not supported for __shared__ variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4971" name="err_shift_rhs_only_vector">
        <segment state="initial">
          <source>requested shift is a vector of type %0 but the first operand is not a vector (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4972" name="err_shufflevector_argument_too_large">
        <segment state="initial">
          <source>index for __builtin_shufflevector must be less than the total number of vector elements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4973" name="err_shufflevector_minus_one_is_undefined_behavior_constexpr">
        <segment state="initial">
          <source>index for __builtin_shufflevector not within the bounds of the input vectors; index of -1 found at position %0 is not permitted in a constexpr context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4974" name="err_shufflevector_nonconstant_argument">
        <segment state="initial">
          <source>index for __builtin_shufflevector must be a constant integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4975" name="err_sizeless_in_exception_spec">
        <segment state="initial">
          <source>%select{|reference to }0sizeless type %1 is not allowed in exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4976" name="err_sizeless_nonlocal">
        <segment state="initial">
          <source>non-local variable with sizeless type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4977" name="err_sizeof_alignof_function_type">
        <segment state="initial">
          <source>invalid application of '%0' to a function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4978" name="err_sizeof_alignof_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>invalid application of '%0' to %select{an incomplete|sizeless}1 type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4979" name="err_sizeof_alignof_typeof_bitfield">
        <segment state="initial">
          <source>invalid application of '%select{sizeof|alignof|typeof|typeof_unqual}0' to bit-field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4980" name="err_sizeof_nonfragile_interface">
        <segment state="initial">
          <source>application of '%select{alignof|sizeof}1' to interface %0 is not supported on this architecture and platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4981" name="err_sizeof_pack_no_pack_name_suggest">
        <segment state="initial">
          <source>%0 does not refer to the name of a parameter pack; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4982" name="err_sme_attr_mismatch">
        <segment state="initial">
          <source>function declared %0 was previously declared %1, which has different SME function attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4983" name="err_sme_call_in_non_sme_target">
        <segment state="initial">
          <source>call to a streaming function requires 'sme'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4984" name="err_sme_definition_using_sm_in_non_sme_target">
        <segment state="initial">
          <source>function executed in streaming-SVE mode requires 'sme'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4985" name="err_sme_definition_using_za_in_non_sme_target">
        <segment state="initial">
          <source>function using ZA state requires 'sme'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4986" name="err_sme_definition_using_zt0_in_non_sme2_target">
        <segment state="initial">
          <source>function using ZT0 state requires 'sme2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4987" name="err_sme_openmp_captured_region">
        <segment state="initial">
          <source>OpenMP captured regions are not yet supported in %select{streaming functions|functions with ZA state|functions with ZT0 state}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4988" name="err_sme_unimplemented_za_save_restore">
        <segment state="initial">
          <source>call to a function that shares state other than 'za' from a function that has live 'za' state requires a spill/fill of ZA, which is not yet implemented</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4989" name="err_sme_unsupported_agnostic_new">
        <segment state="initial">
          <source>__arm_agnostic("sme_za_state") is not supported together with __arm_new("za") or __arm_new("zt0")</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4990" name="err_sme_za_call_no_za_state">
        <segment state="initial">
          <source>call to a shared ZA function requires the caller to have ZA state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4991" name="err_sme_zt0_call_no_zt0_state">
        <segment state="initial">
          <source>call to a shared ZT0 function requires the caller to have ZT0 state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4992" name="err_spaceship_argument_narrowing">
        <segment state="initial">
          <source>argument to 'operator&lt;=&gt;' %select{cannot be narrowed from type %1 to %2|evaluates to %1, which cannot be narrowed to type %2}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4993" name="err_spec_member_not_instantiated">
        <segment state="initial">
          <source>specialization of member %q0 does not specialize an instantiated member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4994" name="err_specialization_after_instantiation">
        <segment state="initial">
          <source>explicit specialization of %0 after instantiation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4995" name="err_specialization_not_primary_template">
        <segment state="initial">
          <source>cannot reference member of primary template because deduced class template specialization %0 is %select{instantiated from a partial|an explicit}1 specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4996" name="err_specialize_member_of_template">
        <segment state="initial">
          <source>cannot specialize %select{|(with 'template&lt;&gt;') }0a member of an unspecialized template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4997" name="err_standalone_class_nested_name_specifier">
        <segment state="initial">
          <source>forward declaration of %0 cannot have a nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4998" name="err_static_assert_expression_is_not_constant">
        <segment state="initial">
          <source>static assertion expression is not an integral constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="4999" name="err_static_assert_failed">
        <segment state="initial">
          <source>static assertion failed%select{: %1|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5000" name="err_static_assert_requirement_failed">
        <segment state="initial">
          <source>static assertion failed due to requirement '%0'%select{: %2|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5001" name="err_static_block_func">
        <segment state="initial">
          <source>function declared in block scope cannot have 'static' storage class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5002" name="err_static_data_member_not_allowed_in_anon_struct">
        <segment state="initial">
          <source>static data member %0 not allowed in anonymous %select{struct|interface|union|class|enum}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5003" name="err_static_data_member_not_allowed_in_local_class">
        <segment state="initial">
          <source>static data member %0 not allowed in local %select{struct|interface|union|class|enum}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5004" name="err_static_data_member_reinitialization">
        <segment state="initial">
          <source>static data member %0 already has an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5005" name="err_static_downcast_via_virtual">
        <segment state="initial">
          <source>cannot cast %0 to %1 via virtual base %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5006" name="err_static_function_scope">
        <segment state="initial">
          <source>variables in function scope cannot be declared static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5007" name="err_static_illegal_in_new">
        <segment state="initial">
          <source>the 'static' modifier for the array size is not legal in new expressions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5008" name="err_static_kernel">
        <segment state="initial">
          <source>kernel functions cannot be declared static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5009" name="err_static_main">
        <segment state="initial">
          <source>'main' is not allowed to be declared static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5010" name="err_static_non_static">
        <segment state="initial">
          <source>static declaration of %0 follows non-static declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5011" name="err_static_not_bitfield">
        <segment state="initial">
          <source>static member %0 cannot be a bit-field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5012" name="err_static_out_of_line">
        <segment state="initial">
          <source>'static' can only be specified inside the class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5013" name="err_static_overrides_virtual">
        <segment state="initial">
          <source>'static' member function %0 overrides a virtual function in a base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5014" name="err_statically_allocated_object">
        <segment state="initial">
          <source>interface type cannot be statically allocated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5015" name="err_std_compare_type_not_supported">
        <segment state="initial">
          <source>standard library implementation of %0 is not supported; %select{member '%2' does not have expected form|member '%2' is missing|the type is not trivially copyable|the type does not have the expected form}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5016" name="err_std_initializer_list_malformed">
        <segment state="initial">
          <source>%0 layout not recognized. Must be a non-polymorphic class type with no bases and two fields: a 'const E *' and either another 'const E *' or a 'std::size_t'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5017" name="err_std_source_location_impl_malformed">
        <segment state="initial">
          <source>'std::source_location::__impl' must be standard-layout and have only two 'const char *' fields '_M_file_name' and '_M_function_name', and two integral fields '_M_line' and '_M_column'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5018" name="err_std_source_location_impl_not_found">
        <segment state="initial">
          <source>'std::source_location::__impl' was not found; it must be defined before '__builtin_source_location' is called</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5019" name="err_std_type_trait_not_class_template">
        <segment state="initial">
          <source>unsupported standard library implementation: 'std::%0' is not a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5020" name="err_stmt_expr_in_default_arg">
        <segment state="initial">
          <source>default %select{argument|non-type template argument}0 may not use a GNU statement expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5021" name="err_storage_class_for_static_member">
        <segment state="initial">
          <source>static data member definition cannot specify a storage class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5022" name="err_storage_spec_on_catch_parm">
        <segment state="initial">
          <source>@catch parameter cannot have storage specifier '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5023" name="err_storageclass_invalid_for_member">
        <segment state="initial">
          <source>storage class specified for a member declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5024" name="err_store_value_to_reg">
        <segment state="initial">
          <source>impossible constraint in asm: cannot store value into a register</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5025" name="err_strong_property">
        <segment state="initial">
          <source>existing instance variable %1 for strong property %0 may not be __weak</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5026" name="err_subscript_function_type">
        <segment state="initial">
          <source>subscript of pointer to function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5027" name="err_subscript_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>subscript of pointer to %select{incomplete|sizeless}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5028" name="err_subscript_nonfragile_interface">
        <segment state="initial">
          <source>subscript requires size of interface %0, which is not constant for this architecture and platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5029" name="err_subscript_svbool_t">
        <segment state="initial">
          <source>subscript of svbool_t is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5030" name="err_super_in_lambda_unsupported">
        <segment state="initial">
          <source>use of '__super' inside a lambda is unsupported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5031" name="err_sve_vector_in_non_streaming_function">
        <segment state="initial">
          <source>SVE vector type %0 cannot be used in a non-streaming function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5032" name="err_sve_vector_in_non_sve_target">
        <segment state="initial">
          <source>SVE vector type %0 cannot be used in a target without sve</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5033" name="err_swift_abi_parameter_wrong_type">
        <segment state="initial">
          <source>'%0' parameter must have pointer%select{| to unqualified pointer}1 type; type here is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5034" name="err_swift_async_bad_block_type">
        <segment state="initial">
          <source>'swift_async' completion handler parameter must have block type returning 'void', type here is %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5035" name="err_swift_async_error_no_error_parameter">
        <segment state="initial">
          <source>%0 attribute with 'nonnull_error' convention can only be applied to a %select{function|method}1 with a completion handler with an error parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5036" name="err_swift_async_error_non_integral">
        <segment state="initial">
          <source>%0 attribute with '%1' convention must have an integral-typed parameter in completion handler at index %2, type here is %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5037" name="err_swift_async_error_without_swift_async">
        <segment state="initial">
          <source>%0 attribute must be applied to a %select{function|method}1 annotated with non-'none' attribute 'swift_async'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5038" name="err_swift_async_no_access">
        <segment state="initial">
          <source>first argument to 'swift_async' must be either 'none', 'swift_private', or 'not_swift_private'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5039" name="err_swift_error_result_not_after_swift_context">
        <segment state="initial">
          <source>'swift_error_result' parameter must follow 'swift_context' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5040" name="err_swift_indirect_result_not_first">
        <segment state="initial">
          <source>'swift_indirect_result' parameters must be first parameters of function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5041" name="err_swift_param_attr_not_swiftcall">
        <segment state="initial">
          <source>'%0' parameter can only be used with swiftcall%select{ or swiftasynccall|}1 calling convention%select{|s}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5042" name="err_switch_explicit_conversion">
        <segment state="initial">
          <source>switch condition type %0 requires explicit conversion to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5043" name="err_switch_incomplete_class_type">
        <segment state="initial">
          <source>switch condition has incomplete class type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5044" name="err_switch_into_protected_scope">
        <segment state="initial">
          <source>cannot jump from switch statement to this case label</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5045" name="err_switch_multiple_conversions">
        <segment state="initial">
          <source>multiple conversions from switch condition type %0 to an integral or enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5046" name="err_sycl_entry_point_after_definition">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' attribute cannot be added to a function after the function is defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5047" name="err_sycl_entry_point_deduced_return_type">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' attribute only applies to functions with a non-deduced 'void' return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5048" name="err_sycl_entry_point_invalid">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' attribute cannot be applied to a %select{non-static member function|variadic function|deleted function|defaulted function|constexpr function|consteval function|function declared with the 'noreturn' attribute|coroutine|function defined with a function try block}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5049" name="err_sycl_entry_point_invalid_redeclaration">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' kernel name argument does not match prior declaration%diff{: $ vs $|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5050" name="err_sycl_entry_point_return_type">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' attribute only applies to functions with a 'void' return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5051" name="err_sycl_kernel_name_conflict">
        <segment state="initial">
          <source>'sycl_kernel_entry_point' kernel name argument conflicts with a previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5052" name="err_sycl_special_type_num_init_method">
        <segment state="initial">
          <source>types with 'sycl_special_class' attribute must have one and only one '__init' method defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5053" name="err_synthesize_category_decl">
        <segment state="initial">
          <source>@synthesize not allowed in a category's implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5054" name="err_synthesize_on_class_property">
        <segment state="initial">
          <source>@synthesize not allowed on a class property %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5055" name="err_synthesize_variable_sized_ivar">
        <segment state="initial">
          <source>synthesized property with variable size type %0 requires an existing instance variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5056" name="err_synthesizing_arc_weak_property_disabled">
        <segment state="initial">
          <source>cannot synthesize weak property in file using manual reference counting</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5057" name="err_synthesizing_arc_weak_property_no_runtime">
        <segment state="initial">
          <source>cannot synthesize weak property because the current deployment target does not support weak references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5058" name="err_systemz_invalid_tabort_code">
        <segment state="initial">
          <source>invalid transaction abort code</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5059" name="err_tag_definition_of_typedef">
        <segment state="initial">
          <source>definition of type %0 conflicts with %select{typedef|type alias}1 of the same name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5060" name="err_tag_index_out_of_range">
        <segment state="initial">
          <source>%select{type tag|argument}0 index %1 is greater than the number of arguments specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5061" name="err_tag_reference_conflict">
        <segment state="initial">
          <source>implicit declaration introduced by elaborated type conflicts with a %select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}0 of the same name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5062" name="err_tag_reference_non_tag">
        <segment state="initial">
          <source>%select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|alias template|template template argument}1 %0 cannot be referenced with the '%select{struct|interface|union|class|enum}2' specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5063" name="err_tagless_friend_type_template">
        <segment state="initial">
          <source>friend type templates must use an elaborated type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5064" name="err_target_clone_doesnt_match">
        <segment state="initial">
          <source>'target_clones' attribute does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5065" name="err_target_clone_must_have_default">
        <segment state="initial">
          <source>'target_clones' multiversioning requires a default target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5066" name="err_target_unsupported_type">
        <segment state="initial">
          <source>%0 requires %select{|%2 bit size}1 %3 %select{|return }4type support, but target '%5' does not support it</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5067" name="err_tcb_conflicting_attributes">
        <segment state="initial">
          <source>attributes '%0("%2")' and '%1("%2")' are mutually exclusive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5068" name="err_temp_copy_ambiguous">
        <segment state="initial">
          <source>ambiguous constructor call when %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5069" name="err_temp_copy_deleted">
        <segment state="initial">
          <source>%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1 invokes deleted constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5070" name="err_temp_copy_incomplete">
        <segment state="initial">
          <source>copying a temporary object of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5071" name="err_temp_copy_no_viable">
        <segment state="initial">
          <source>no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5072" name="err_template_arg_address_of_non_pointer">
        <segment state="initial">
          <source>address taken in non-type template argument for template parameter of reference type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5073" name="err_template_arg_deduced_incomplete_pack">
        <segment state="initial">
          <source>deduced incomplete pack %0 for template parameter %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5074" name="err_template_arg_field">
        <segment state="initial">
          <source>non-type template argument refers to non-static data member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5075" name="err_template_arg_invalid">
        <segment state="initial">
          <source>non-type template argument '%0' is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5076" name="err_template_arg_list_constraints_not_satisfied">
        <segment state="initial">
          <source>constraints not satisfied for %select{class template|function template|variable template|alias template|template template parameter|template}0 %1%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5077" name="err_template_arg_list_different_arity">
        <segment state="initial">
          <source>%select{too few|too many}0 template arguments for %select{class template|function template|variable template|alias template|template template parameter|concept|template}1 %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5078" name="err_template_arg_method">
        <segment state="initial">
          <source>non-type template argument refers to non-static member function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5079" name="err_template_arg_must_be_expr">
        <segment state="initial">
          <source>template argument for non-type template parameter must be an expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5080" name="err_template_arg_must_be_template">
        <segment state="initial">
          <source>template argument for template template parameter must be a class template%select{| or type alias template}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5081" name="err_template_arg_must_be_type">
        <segment state="initial">
          <source>template argument for template type parameter must be a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5082" name="err_template_arg_must_be_type_suggest">
        <segment state="initial">
          <source>template argument for template type parameter must be a type; did you forget 'typename'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5083" name="err_template_arg_no_ref_bind">
        <segment state="initial">
          <source>non-type template parameter of reference type %diff{$ cannot bind to template argument of type $|cannot bind to template of incompatible argument type}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5084" name="err_template_arg_nontype_ambig">
        <segment state="initial">
          <source>template argument for non-type template parameter is treated as function type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5085" name="err_template_arg_not_address_constant">
        <segment state="initial">
          <source>non-type template argument of type %0 is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5086" name="err_template_arg_not_address_of">
        <segment state="initial">
          <source>non-type template argument for template parameter of pointer type %0 must have its address taken</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5087" name="err_template_arg_not_convertible">
        <segment state="initial">
          <source>non-type template argument of type %0 cannot be converted to a value of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5088" name="err_template_arg_not_decl_ref">
        <segment state="initial">
          <source>non-type template argument does not refer to any declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5089" name="err_template_arg_not_ice">
        <segment state="initial">
          <source>non-type template argument of type %0 is not an integral constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5090" name="err_template_arg_not_integral_or_enumeral">
        <segment state="initial">
          <source>non-type template argument of type %0 must have an integral or enumeration type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5091" name="err_template_arg_not_object_or_func">
        <segment state="initial">
          <source>non-type template argument does not refer to an object or function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5092" name="err_template_arg_not_pointer_to_member_form">
        <segment state="initial">
          <source>non-type template argument is not a pointer to member constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5093" name="err_template_arg_not_valid_template">
        <segment state="initial">
          <source>template argument does not refer to a class or alias template, or template template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5094" name="err_template_arg_object_no_linkage">
        <segment state="initial">
          <source>non-type template argument refers to %select{function|object}0 %1 that does not have linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5095" name="err_template_arg_overload_type">
        <segment state="initial">
          <source>template argument is the type of an unresolved overloaded function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5096" name="err_template_arg_ref_bind_ignores_quals">
        <segment state="initial">
          <source>reference binding of non-type template parameter %diff{of type $ to template argument of type $|to template argument}0,1 ignores qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5097" name="err_template_arg_reference_var">
        <segment state="initial">
          <source>non-type template argument of reference type %0 is not an object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5098" name="err_template_arg_template_params_mismatch">
        <segment state="initial">
          <source>template template argument has different template parameters than its corresponding template template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5099" name="err_template_arg_thread_local">
        <segment state="initial">
          <source>non-type template argument refers to thread-local object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5100" name="err_template_arg_untyped_null_constant">
        <segment state="initial">
          <source>null non-type template argument must be cast to template parameter type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5101" name="err_template_arg_wrongtype_null_constant">
        <segment state="initial">
          <source>null non-type template argument of type %0 does not match template parameter of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5102" name="err_template_different_requires_clause">
        <segment state="initial">
          <source>requires clause differs in template redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5103" name="err_template_different_type_constraint">
        <segment state="initial">
          <source>type constraint differs in template redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5104" name="err_template_expansion_into_fixed_list">
        <segment state="initial">
          <source>pack expansion used as argument for non-pack parameter of %select{alias template|concept}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5105" name="err_template_id_not_a_type">
        <segment state="initial">
          <source>template name refers to non-type template %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5106" name="err_template_inside_local_class">
        <segment state="initial">
          <source>templates cannot be declared inside of a local class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5107" name="err_template_instantiate_undefined">
        <segment state="initial">
          <source>%select{implicit|explicit}0 instantiation of undefined template %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5108" name="err_template_instantiate_within_definition">
        <segment state="initial">
          <source>%select{implicit|explicit}0 instantiation of template %1 within its own definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5109" name="err_template_kernel">
        <segment state="initial">
          <source>kernel functions cannot be used in a template declaration, instantiation or specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5110" name="err_template_kw_missing">
        <segment state="initial">
          <source>missing 'template' keyword prior to dependent template name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5111" name="err_template_kw_refers_to_dependent_non_template">
        <segment state="initial">
          <source>%0%select{| following the 'template' keyword}1 cannot refer to a dependent template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5112" name="err_template_kw_refers_to_non_template">
        <segment state="initial">
          <source>%0%select{| following the 'template' keyword}1 does not refer to a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5113" name="err_template_kw_refers_to_type_template">
        <segment state="initial">
          <source>%0 is expected to be a non-type template, but instantiated to a %select{class|type alias}1 template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5114" name="err_template_linkage">
        <segment state="initial">
          <source>templates must have C++ linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5115" name="err_template_member">
        <segment state="initial">
          <source>non-static data member %0 cannot be declared as a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5116" name="err_template_member_noparams">
        <segment state="initial">
          <source>extraneous 'template&lt;&gt;' in declaration of member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5117" name="err_template_missing_args">
        <segment state="initial">
          <source>use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5118" name="err_template_nontype_parm_bad_structural_type">
        <segment state="initial">
          <source>a non-type template parameter cannot have type %0 before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5119" name="err_template_nontype_parm_bad_type">
        <segment state="initial">
          <source>a non-type template parameter cannot have type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5120" name="err_template_nontype_parm_different_type">
        <segment state="initial">
          <source>template non-type parameter has a different type %0 in template %select{|template parameter }1redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5121" name="err_template_nontype_parm_incomplete">
        <segment state="initial">
          <source>non-type template parameter has incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5122" name="err_template_nontype_parm_not_literal">
        <segment state="initial">
          <source>non-type template parameter has non-literal type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5123" name="err_template_nontype_parm_not_structural">
        <segment state="initial">
          <source>type %0 of non-type template parameter is not a structural type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5124" name="err_template_nontype_parm_rvalue_ref">
        <segment state="initial">
          <source>non-type template parameter has rvalue reference type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5125" name="err_template_outside_namespace_or_class_scope">
        <segment state="initial">
          <source>templates can only be declared in namespace or class scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5126" name="err_template_param_default_arg_inconsistent_redefinition">
        <segment state="initial">
          <source>template parameter default argument is inconsistent with previous definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5127" name="err_template_param_default_arg_missing">
        <segment state="initial">
          <source>template parameter missing a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5128" name="err_template_param_default_arg_redefinition">
        <segment state="initial">
          <source>template parameter redefines default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5129" name="err_template_param_different_kind">
        <segment state="initial">
          <source>template parameter has a different kind in template %select{|template parameter }0redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5130" name="err_template_param_list_different_arity">
        <segment state="initial">
          <source>%select{too few|too many}0 template parameters in template %select{|template parameter }1redeclaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5131" name="err_template_param_list_matches_nontemplate">
        <segment state="initial">
          <source>template parameter list matching the non-templated nested type %0 should be empty ('template&lt;&gt;')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5132" name="err_template_param_pack_default_arg">
        <segment state="initial">
          <source>template parameter pack cannot have a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5133" name="err_template_param_pack_must_be_last_template_parameter">
        <segment state="initial">
          <source>template parameter pack must be the last template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5134" name="err_template_param_shadow">
        <segment state="initial">
          <source>declaration of %0 shadows template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5135" name="err_template_parameter_default_friend_template">
        <segment state="initial">
          <source>default template argument not permitted on a friend template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5136" name="err_template_parameter_default_template_member">
        <segment state="initial">
          <source>cannot add a default template argument to the definition of a member of a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5137" name="err_template_parameter_pack_non_pack">
        <segment state="initial">
          <source>%select{template type|non-type template|template template}0 parameter%select{| pack}1 conflicts with previous %select{template type|non-type template|template template}0 parameter%select{ pack|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5138" name="err_template_qualified_declarator_no_match">
        <segment state="initial">
          <source>nested name specifier %0 for declaration does not refer into a class, class template or class template partial specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5139" name="err_template_recursion_depth_exceeded">
        <segment state="initial">
          <source>recursive template instantiation exceeded maximum depth of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5140" name="err_template_spec_decl_friend">
        <segment state="initial">
          <source>cannot declare an explicit specialization in a friend</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5141" name="err_template_spec_decl_function_scope">
        <segment state="initial">
          <source>explicit specialization of %0 in function scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5142" name="err_template_spec_default_arg">
        <segment state="initial">
          <source>default argument not permitted on an explicit %select{instantiation|specialization}0 of function %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5143" name="err_template_spec_extra_headers">
        <segment state="initial">
          <source>extraneous template parameter list in template specialization or out-of-line template definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5144" name="err_template_spec_friend">
        <segment state="initial">
          <source>template specialization declaration cannot be a friend</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5145" name="err_template_spec_needs_header">
        <segment state="initial">
          <source>template specialization requires 'template&lt;&gt;'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5146" name="err_template_spec_needs_template_parameters">
        <segment state="initial">
          <source>template specialization or definition requires a template parameter list corresponding to the nested type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5147" name="err_template_spec_redecl_global_scope">
        <segment state="initial">
          <source>%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 must occur at global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5148" name="err_template_spec_redecl_out_of_scope">
        <segment state="initial">
          <source>%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5149" name="err_template_spec_unknown_kind">
        <segment state="initial">
          <source>can only provide an explicit specialization for a class template, function template, variable template, or a member function, static data member, %select{or member class|member class, or member enumeration}0 of a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5150" name="err_template_tag_noparams">
        <segment state="initial">
          <source>extraneous 'template&lt;&gt;' in declaration of %0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5151" name="err_template_template_parameter_not_at_least_as_constrained">
        <segment state="initial">
          <source>template template argument %0 is more constrained than template template parameter %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5152" name="err_template_template_parm_no_parms">
        <segment state="initial">
          <source>template template parameter must have its own template parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5153" name="err_template_typedef">
        <segment state="initial">
          <source>a typedef cannot be a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5154" name="err_template_unnamed_class">
        <segment state="initial">
          <source>cannot declare a class template with no name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5155" name="err_template_variable_noparams">
        <segment state="initial">
          <source>extraneous 'template&lt;&gt;' in declaration of variable %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5156" name="err_tentative_def_incomplete_type">
        <segment state="initial">
          <source>tentative definition has type %0 that is never completed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5157" name="err_this_capture">
        <segment state="initial">
          <source>'this' cannot be %select{implicitly |}0captured in this context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5158" name="err_this_static_member_func">
        <segment state="initial">
          <source>'this' cannot be%select{| implicitly}0 used in a static member function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5159" name="err_thread_dynamic_init">
        <segment state="initial">
          <source>initializer for thread-local variable must be a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5160" name="err_thread_non_global">
        <segment state="initial">
          <source>'%0' variables must have global storage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5161" name="err_thread_non_thread">
        <segment state="initial">
          <source>thread-local declaration of %0 follows non-thread-local declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5162" name="err_thread_nontrivial_dtor">
        <segment state="initial">
          <source>type of thread-local variable has non-trivial destruction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5163" name="err_thread_thread_different_kind">
        <segment state="initial">
          <source>thread-local declaration of %0 with %select{static|dynamic}1 initialization follows declaration with %select{dynamic|static}1 initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5164" name="err_thread_unsupported">
        <segment state="initial">
          <source>thread-local storage is not supported for the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5165" name="err_three_way_vector_comparison">
        <segment state="initial">
          <source>three-way comparison between vectors is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5166" name="err_throw_abstract_type">
        <segment state="initial">
          <source>cannot throw an object of abstract type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5167" name="err_throw_incomplete">
        <segment state="initial">
          <source>cannot throw object of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5168" name="err_throw_incomplete_ptr">
        <segment state="initial">
          <source>cannot throw pointer to object of incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5169" name="err_throw_object_throwing_dtor">
        <segment state="initial">
          <source>cannot throw object of type %0 with a potentially-throwing destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5170" name="err_throw_sizeless">
        <segment state="initial">
          <source>cannot throw object of sizeless type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5171" name="err_tls_var_aligned_over_maximum">
        <segment state="initial">
          <source>alignment (%0) of thread-local variable %1 is greater than the maximum supported alignment (%2) for a thread-local variable on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5172" name="err_toomany_element_decls">
        <segment state="initial">
          <source>only one element declaration is allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5173" name="err_trailing_return_in_parens">
        <segment state="initial">
          <source>trailing return type may not be nested within parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5174" name="err_trailing_return_without_auto">
        <segment state="initial">
          <source>function with trailing return type must specify return type 'auto', not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5175" name="err_type_attribute_wrong_type">
        <segment state="initial">
          <source>'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5176" name="err_type_available_only_in_default_eval_method">
        <segment state="initial">
          <source>cannot use type '%0' within '#pragma clang fp eval_method'; type is set according to the default eval method for the translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5177" name="err_type_aware_allocator_missing_matching_operator">
        <segment state="initial">
          <source>declaration of type aware %0 in %1 must have matching type aware %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5178" name="err_type_aware_destroying_operator_delete">
        <segment state="initial">
          <source>destroying delete is not permitted to be type aware</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5179" name="err_type_constraint_missing_arguments">
        <segment state="initial">
          <source>%0 requires more than 1 template argument; provide the remaining arguments explicitly to use it here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5180" name="err_type_constraint_non_type_concept">
        <segment state="initial">
          <source>concept named in type constraint is not a type concept</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5181" name="err_type_defined_in_alias_template">
        <segment state="initial">
          <source>%0 cannot be defined in a type alias template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5182" name="err_type_defined_in_condition">
        <segment state="initial">
          <source>%0 cannot be defined in a condition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5183" name="err_type_defined_in_enum">
        <segment state="initial">
          <source>%0 cannot be defined in an enumeration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5184" name="err_type_defined_in_for_range">
        <segment state="initial">
          <source>types may not be defined in a for range declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5185" name="err_type_defined_in_param_type">
        <segment state="initial">
          <source>%0 cannot be defined in a parameter type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5186" name="err_type_defined_in_result_type">
        <segment state="initial">
          <source>%0 cannot be defined in the result type of a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5187" name="err_type_defined_in_type_specifier">
        <segment state="initial">
          <source>%0 cannot be defined in a type specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5188" name="err_type_mismatch_continuation_class">
        <segment state="initial">
          <source>type of property %0 in class extension does not match property type in primary class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5189" name="err_type_pack_element_out_of_bounds">
        <segment state="initial">
          <source>a parameter pack may not be accessed at an out of bounds index</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5190" name="err_type_tag_for_datatype_not_ice">
        <segment state="initial">
          <source>'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5191" name="err_type_tag_for_datatype_too_large">
        <segment state="initial">
          <source>'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression that can be represented by a 64 bit integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5192" name="err_type_unsupported">
        <segment state="initial">
          <source>%0 is not supported on this target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5193" name="err_typecheck_address_of">
        <segment state="initial">
          <source>address of %select{bit-field|vector element|property expression|register variable|matrix element}0 requested</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5194" name="err_typecheck_addrof_dtor">
        <segment state="initial">
          <source>taking the address of a destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5195" name="err_typecheck_addrof_temporary">
        <segment state="initial">
          <source>taking the address of a temporary object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5196" name="err_typecheck_ambiguous_condition">
        <segment state="initial">
          <source>conversion %diff{from $ to $|between types}0,1 is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5197" name="err_typecheck_arc_assign_externally_retained">
        <segment state="initial">
          <source>variable declared with 'objc_externally_retained' cannot be modified in ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5198" name="err_typecheck_arc_assign_self">
        <segment state="initial">
          <source>cannot assign to 'self' outside of a method in the init family</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5199" name="err_typecheck_arc_assign_self_class_method">
        <segment state="initial">
          <source>cannot assign to 'self' in a class method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5200" name="err_typecheck_arithmetic_incomplete_or_sizeless_type">
        <segment state="initial">
          <source>arithmetic on a pointer to %select{an incomplete|sizeless}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5201" name="err_typecheck_arr_assign_enumeration">
        <segment state="initial">
          <source>fast enumeration variables cannot be modified in ARC by default; declare the variable __strong to allow this</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5202" name="err_typecheck_array_not_modifiable_lvalue">
        <segment state="initial">
          <source>array type %0 is not assignable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5203" name="err_typecheck_assign_const">
        <segment state="initial">
          <source>%select{cannot assign to return value because function %1 returns a const value|cannot assign to variable %1 with const-qualified type %2|cannot assign to %select{non-|}1static data member %2 with const-qualified type %3|cannot assign to non-static data member within const member function %1|cannot assign to %select{variable %2|non-static data member %2|lvalue}1 with %select{|nested }3const-qualified data member %4|read-only variable is not assignable}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5204" name="err_typecheck_bool_condition">
        <segment state="initial">
          <source>value of type %0 is not contextually convertible to 'bool'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5205" name="err_typecheck_call_different_arg_types">
        <segment state="initial">
          <source>arguments are of different types%diff{ ($ vs $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5206" name="err_typecheck_call_invalid_ordered_compare">
        <segment state="initial">
          <source>ordered compare requires two args of floating point type%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5207" name="err_typecheck_call_invalid_unary_fp">
        <segment state="initial">
          <source>floating point classification requires argument of floating point type (passed in %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5208" name="err_typecheck_call_not_function">
        <segment state="initial">
          <source>called object type %0 is not a function or function pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5209" name="err_typecheck_call_requires_real_fp">
        <segment state="initial">
          <source>argument type %0 is not a real floating point type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5210" name="err_typecheck_call_too_few_args">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5211" name="err_typecheck_call_too_few_args_at_least">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5212" name="err_typecheck_call_too_few_args_at_least_one">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }2arguments to %select{function|block|method|kernel function}0 call, at least argument %1 must be specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5213" name="err_typecheck_call_too_few_args_at_least_suggest">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2; did you mean %4?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5214" name="err_typecheck_call_too_few_args_one">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }2arguments to %select{function|block|method|kernel function}0 call, single argument %1 was not specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5215" name="err_typecheck_call_too_few_args_suggest">
        <segment state="initial">
          <source>too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %4?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5216" name="err_typecheck_call_too_many_args">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5217" name="err_typecheck_call_too_many_args_at_most">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5218" name="err_typecheck_call_too_many_args_at_most_one">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most single %select{|non-object }3argument %1, have %2%select{|non-object}3 arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5219" name="err_typecheck_call_too_many_args_at_most_suggest">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2; did you mean %4?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5220" name="err_typecheck_call_too_many_args_one">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected single argument %1, have %2 arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5221" name="err_typecheck_call_too_many_args_suggest">
        <segment state="initial">
          <source>too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %4?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5222" name="err_typecheck_cast_to_incomplete">
        <segment state="initial">
          <source>cast to incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5223" name="err_typecheck_cast_to_union_no_type">
        <segment state="initial">
          <source>cast to union type from type %0 not present in union</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5224" name="err_typecheck_choose_expr_requires_constant">
        <segment state="initial">
          <source>'__builtin_choose_expr' requires a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5225" name="err_typecheck_comparison_of_distinct_blocks">
        <segment state="initial">
          <source>comparison of distinct block types%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5226" name="err_typecheck_comparison_of_distinct_pointers">
        <segment state="initial">
          <source>comparison of distinct pointer types%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5227" name="err_typecheck_comparison_of_fptr_to_void">
        <segment state="initial">
          <source>equality comparison between function pointer and void pointer (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5228" name="err_typecheck_comparison_of_pointer_integer">
        <segment state="initial">
          <source>comparison between pointer and integer (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5229" name="err_typecheck_cond_expect_int_float">
        <segment state="initial">
          <source>used type %0 where integer or floating point type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5230" name="err_typecheck_cond_expect_nonfloat">
        <segment state="initial">
          <source>used type %0 where floating point type is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5231" name="err_typecheck_cond_expect_scalar">
        <segment state="initial">
          <source>used type %0 where arithmetic or pointer type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5232" name="err_typecheck_cond_incompatible_operands">
        <segment state="initial">
          <source>incompatible operand types%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5233" name="err_typecheck_cond_incompatible_operands_null">
        <segment state="initial">
          <source>non-pointer operand type %0 incompatible with %select{NULL|nullptr}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5234" name="err_typecheck_cond_incompatible_ptrauth">
        <segment state="initial">
          <source>'__ptrauth' qualification mismatch%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5235" name="err_typecheck_convert_discards_qualifiers">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5236" name="err_typecheck_convert_incompatible">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5237" name="err_typecheck_convert_incompatible_block_pointer">
        <segment state="initial">
          <source>incompatible block pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5238" name="err_typecheck_convert_incompatible_function_pointer">
        <segment state="initial">
          <source>incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5239" name="err_typecheck_convert_incompatible_pointer">
        <segment state="initial">
          <source>incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5240" name="err_typecheck_convert_incompatible_pointer_sign">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5241" name="err_typecheck_convert_int_pointer">
        <segment state="initial">
          <source>incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5242" name="err_typecheck_convert_pointer_int">
        <segment state="initial">
          <source>incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5243" name="err_typecheck_convert_pointer_void_func">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5244" name="err_typecheck_converted_constant_expression">
        <segment state="initial">
          <source>value of type %0 is not implicitly convertible to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5245" name="err_typecheck_converted_constant_expression_disallowed">
        <segment state="initial">
          <source>conversion from %0 to %1 is not allowed in a converted constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5246" name="err_typecheck_converted_constant_expression_indirect">
        <segment state="initial">
          <source>conversion from %0 to %1 in converted constant expression would bind reference to a temporary</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5247" name="err_typecheck_decl_incomplete_type">
        <segment state="initial">
          <source>variable has incomplete type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5248" name="err_typecheck_deleted_function">
        <segment state="initial">
          <source>conversion function %diff{from $ to $|between types}0,1 invokes a deleted function%select{|: %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5249" name="err_typecheck_duplicate_vector_components_not_mlvalue">
        <segment state="initial">
          <source>vector is not assignable (contains duplicate components)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5250" name="err_typecheck_expect_any_scalar_or_vector">
        <segment state="initial">
          <source>invalid operand of type %0%select{| where a scalar or vector is required}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5251" name="err_typecheck_expect_flt_or_vector">
        <segment state="initial">
          <source>invalid operand of type %0 where floating, complex or a vector of such types is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5252" name="err_typecheck_expect_hlsl_resource">
        <segment state="initial">
          <source>used type %0 where __hlsl_resource_t is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5253" name="err_typecheck_expect_int">
        <segment state="initial">
          <source>used type %0 where integer is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5254" name="err_typecheck_expect_scalar_operand">
        <segment state="initial">
          <source>operand of type %0 where arithmetic or pointer type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5255" name="err_typecheck_expect_scalar_or_vector">
        <segment state="initial">
          <source>invalid operand of type %0 where %1 or a vector of such type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5256" name="err_typecheck_expression_not_modifiable_lvalue">
        <segment state="initial">
          <source>expression is not assignable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5257" name="err_typecheck_field_variable_size">
        <segment state="initial">
          <source>fields must have a constant size: 'variable length array in structure' extension will never be supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5258" name="err_typecheck_illegal_increment_decrement">
        <segment state="initial">
          <source>cannot %select{decrement|increment}1 value of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5259" name="err_typecheck_incompatible_address_space">
        <segment state="initial">
          <source>%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5260" name="err_typecheck_incompatible_nested_address_space">
        <segment state="initial">
          <source>%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of nested pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5261" name="err_typecheck_incompatible_ownership">
        <segment state="initial">
          <source>%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes retain/release properties of pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5262" name="err_typecheck_incompatible_ptrauth">
        <segment state="initial">
          <source>%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes pointer authentication of pointee type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5263" name="err_typecheck_incomplete_array_needs_initializer">
        <segment state="initial">
          <source>definition of variable with array type needs an explicit size or an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5264" name="err_typecheck_incomplete_tag">
        <segment state="initial">
          <source>incomplete definition of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5265" name="err_typecheck_incomplete_type_not_modifiable_lvalue">
        <segment state="initial">
          <source>incomplete type %0 is not assignable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5266" name="err_typecheck_indirection_requires_pointer">
        <segment state="initial">
          <source>indirection requires pointer operand (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5267" name="err_typecheck_indirection_through_void_pointer_cpp">
        <segment state="initial">
          <source>indirection not permitted on operand of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5268" name="err_typecheck_invalid_lvalue_addrof">
        <segment state="initial">
          <source>cannot take the address of an rvalue of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5269" name="err_typecheck_invalid_lvalue_addrof_addrof_function">
        <segment state="initial">
          <source>extra '&amp;' taking address of overloaded function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5270" name="err_typecheck_invalid_operands">
        <segment state="initial">
          <source>invalid operands to binary expression (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5271" name="err_typecheck_invalid_restrict_invalid_pointee">
        <segment state="initial">
          <source>pointer to function type %0 may not be 'restrict' qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5272" name="err_typecheck_invalid_restrict_not_pointer">
        <segment state="initial">
          <source>restrict requires a pointer or reference (%0 is invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5273" name="err_typecheck_invalid_restrict_not_pointer_noarg">
        <segment state="initial">
          <source>restrict requires a pointer or reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5274" name="err_typecheck_ivar_variable_size">
        <segment state="initial">
          <source>instance variables must have a constant size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5275" name="err_typecheck_logical_vector_expr_gnu_cpp_restrict">
        <segment state="initial">
          <source>logical expression with vector %select{type %1 and non-vector type %2|types %1 and %2}0 is only supported in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5276" name="err_typecheck_lvalue_casts_not_supported">
        <segment state="initial">
          <source>assignment to cast is illegal, lvalue casts are not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5277" name="err_typecheck_member_reference_arrow">
        <segment state="initial">
          <source>member reference type %0 is not a pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5278" name="err_typecheck_member_reference_ivar">
        <segment state="initial">
          <source>%0 does not have a member named %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5279" name="err_typecheck_member_reference_ivar_suggest">
        <segment state="initial">
          <source>%0 does not have a member named %1; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5280" name="err_typecheck_member_reference_struct_union">
        <segment state="initial">
          <source>member reference base type %0 is not a structure or union</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5281" name="err_typecheck_member_reference_suggestion">
        <segment state="initial">
          <source>member reference type %0 is %select{a|not a}1 pointer; did you mean to use '%select{-&gt;|.}1'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5282" name="err_typecheck_member_reference_type">
        <segment state="initial">
          <source>cannot refer to type member %0 in %1 with '%select{.|-&gt;}2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5283" name="err_typecheck_member_reference_unknown">
        <segment state="initial">
          <source>cannot refer to member %0 in %1 with '%select{.|-&gt;}2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5284" name="err_typecheck_missing_return_type_incompatible">
        <segment state="initial">
          <source>%diff{return type $ must match previous return type $|return type must match previous return type}0,1 when %select{block literal|lambda expression}2 has unspecified explicit return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5285" name="err_typecheck_negative_array_size">
        <segment state="initial">
          <source>array size is negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5286" name="err_typecheck_non_object_not_modifiable_lvalue">
        <segment state="initial">
          <source>non-object type %0 is not assignable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5287" name="err_typecheck_nonviable_condition">
        <segment state="initial">
          <source>no viable conversion%select{%diff{ from $ to $|}1,2|%diff{ from returned value of type $ to function return type $|}1,2}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5288" name="err_typecheck_nonviable_condition_incomplete">
        <segment state="initial">
          <source>no viable conversion%diff{ from $ to incomplete type $|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5289" name="err_typecheck_op_on_nonoverlapping_address_space_pointers">
        <segment state="initial">
          <source>%select{comparison between %diff{ ($ and $)|}0,1|arithmetic operation with operands of type %diff{ ($ and $)|}0,1|conditional operator with the second and third operands of type %diff{ ($ and $)|}0,1}2 which are pointers to non-overlapping address spaces</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5290" name="err_typecheck_ordered_comparison_of_function_pointers">
        <segment state="initial">
          <source>ordered comparison of function pointers (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5291" name="err_typecheck_ordered_comparison_of_pointer_and_zero">
        <segment state="initial">
          <source>ordered comparison between pointer and zero (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5292" name="err_typecheck_pointer_arith_function_type">
        <segment state="initial">
          <source>arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5293" name="err_typecheck_pointer_arith_void_type">
        <segment state="initial">
          <source>arithmetic on%select{ a|}0 pointer%select{|s}0 to void</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5294" name="err_typecheck_sclass_fscope">
        <segment state="initial">
          <source>illegal storage class on file-scoped variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5295" name="err_typecheck_sclass_func">
        <segment state="initial">
          <source>illegal storage class on function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5296" name="err_typecheck_statement_requires_integer">
        <segment state="initial">
          <source>statement requires expression of integer type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5297" name="err_typecheck_statement_requires_scalar">
        <segment state="initial">
          <source>statement requires expression of scalar type (%0 invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5298" name="err_typecheck_sub_ptr_compatible">
        <segment state="initial">
          <source>%diff{$ and $ are not pointers to compatible types|pointers to incompatible types}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5299" name="err_typecheck_subscript_not_integer">
        <segment state="initial">
          <source>array subscript is not an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5300" name="err_typecheck_subscript_value">
        <segment state="initial">
          <source>subscripted value is not an array, pointer, or vector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5301" name="err_typecheck_sve_rvv_ambiguous">
        <segment state="initial">
          <source>cannot combine fixed-length and sizeless %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5302" name="err_typecheck_sve_rvv_gnu_ambiguous">
        <segment state="initial">
          <source>cannot combine GNU and %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5303" name="err_typecheck_three_way_comparison_of_pointer_and_zero">
        <segment state="initial">
          <source>three-way comparison between pointer and zero</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5304" name="err_typecheck_unary_expr">
        <segment state="initial">
          <source>invalid argument type %0 to unary expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5305" name="err_typecheck_vector_lengths_not_equal">
        <segment state="initial">
          <source>vector operands do not have the same number of elements (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5306" name="err_typecheck_vector_not_convertable">
        <segment state="initial">
          <source>cannot convert between vector values of different size (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5307" name="err_typecheck_vector_not_convertable_implict_truncation">
        <segment state="initial">
          <source>cannot convert between %select{scalar|vector}0 type %1 and vector type %2 as implicit conversion would cause truncation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5308" name="err_typecheck_vector_not_convertable_non_scalar">
        <segment state="initial">
          <source>cannot convert between vector and non-scalar values (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5309" name="err_typecheck_wasm_table_must_have_zero_length">
        <segment state="initial">
          <source>only zero-length WebAssembly tables are currently supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5310" name="err_typecheck_zero_array_size">
        <segment state="initial">
          <source>zero-length arrays are not permitted in %select{C++|SYCL device code|HIP device code}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5311" name="err_typedef_changes_linkage">
        <segment state="initial">
          <source>unsupported: anonymous type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5312" name="err_typedef_not_bitfield">
        <segment state="initial">
          <source>typedef member %0 cannot be a bit-field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5313" name="err_typedef_not_identifier">
        <segment state="initial">
          <source>typedef name must be an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5314" name="err_typename_missing">
        <segment state="initial">
          <source>missing 'typename' prior to dependent type name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5315" name="err_typename_missing_template">
        <segment state="initial">
          <source>missing 'typename' prior to dependent type template name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5316" name="err_typename_nested_not_found">
        <segment state="initial">
          <source>no type named %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5317" name="err_typename_nested_not_found_enable_if">
        <segment state="initial">
          <source>no type named 'type' in %0; 'enable_if' cannot be used to disable this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5318" name="err_typename_nested_not_found_requirement">
        <segment state="initial">
          <source>failed requirement '%0'; 'enable_if' cannot be used to disable this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5319" name="err_typename_nested_not_type">
        <segment state="initial">
          <source>typename specifier refers to non-type member %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5320" name="err_typename_not_type">
        <segment state="initial">
          <source>typename specifier refers to non-type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5321" name="err_typename_refers_to_using_value_decl">
        <segment state="initial">
          <source>typename specifier refers to a dependent using declaration for a value %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5322" name="err_unavailable">
        <segment state="initial">
          <source>%0 is unavailable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5323" name="err_unavailable_in_arc">
        <segment state="initial">
          <source>%0 is unavailable in ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5324" name="err_unavailable_message">
        <segment state="initial">
          <source>%0 is unavailable: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5325" name="err_uncasted_call_of_unknown_any">
        <segment state="initial">
          <source>%0 has unknown return type; cast the call to its declared return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5326" name="err_uncasted_send_to_unknown_any_method">
        <segment state="initial">
          <source>no known method %select{%objcinstance1|%objcclass1}0; cast the message send to the method's return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5327" name="err_uncasted_use_of_unknown_any">
        <segment state="initial">
          <source>%0 has unknown type; cast it to its declared type to use it</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5328" name="err_undeclared_boxing_method">
        <segment state="initial">
          <source>declaration of %0 is missing in %1 class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5329" name="err_undeclared_destructor_name">
        <segment state="initial">
          <source>undeclared identifier %0 in destructor name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5330" name="err_undeclared_label_use">
        <segment state="initial">
          <source>use of undeclared label %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5331" name="err_undeclared_objc_literal_class">
        <segment state="initial">
          <source>definition of class %0 must be available to use Objective-C %select{array literals|dictionary literals|numeric literals|boxed expressions|string literals}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5332" name="err_undeclared_protocol">
        <segment state="initial">
          <source>cannot find protocol declaration for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5333" name="err_undeclared_protocol_suggest">
        <segment state="initial">
          <source>cannot find protocol declaration for %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5334" name="err_undeclared_use">
        <segment state="initial">
          <source>use of undeclared %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5335" name="err_undeclared_use_suggest">
        <segment state="initial">
          <source>use of undeclared %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5336" name="err_undeclared_var_use">
        <segment state="initial">
          <source>use of undeclared identifier %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5337" name="err_undeclared_var_use_suggest">
        <segment state="initial">
          <source>use of undeclared identifier %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5338" name="err_undef_interface">
        <segment state="initial">
          <source>cannot find interface declaration for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5339" name="err_undef_interface_suggest">
        <segment state="initial">
          <source>cannot find interface declaration for %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5340" name="err_undef_superclass">
        <segment state="initial">
          <source>cannot find interface declaration for %0, superclass of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5341" name="err_undef_superclass_suggest">
        <segment state="initial">
          <source>cannot find interface declaration for %0, superclass of %1; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5342" name="err_undefined_inline_var">
        <segment state="initial">
          <source>inline variable %q0 is not defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5343" name="err_undefined_internal_type">
        <segment state="initial">
          <source>%select{function|variable}0 %q1 is used but not defined in this translation unit, and cannot be defined in any other translation unit because its type does not have linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5344" name="err_underlying_type_of_incomplete_enum">
        <segment state="initial">
          <source>cannot determine underlying type of incomplete enumeration type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5345" name="err_unexpanded_parameter_pack">
        <segment state="initial">
          <source>%select{expression|base type|declaration type|data member type|bit-field size|static assertion|fixed underlying type|enumerator value|using declaration|friend declaration|qualifier|initializer|default argument|non-type template parameter type|exception type|explicit specialization|partial specialization|__if_exists name|__if_not_exists name|lambda|block|type constraint|requirement|requires clause}0 contains%plural{0: an|:}1 unexpanded parameter pack%plural{0:|1: %2|2:s %2 and %3|:s %2, %3, ...}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5346" name="err_unexpected_friend">
        <segment state="initial">
          <source>friends can only be classes or functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5347" name="err_unexpected_interface">
        <segment state="initial">
          <source>unexpected interface name %0: expected expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5348" name="err_unexpected_namespace">
        <segment state="initial">
          <source>unexpected namespace name %0: expected expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5349" name="err_unexpected_typedef">
        <segment state="initial">
          <source>unexpected type name %0: expected expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5350" name="err_uninitialized_member_for_assign">
        <segment state="initial">
          <source>cannot define the implicit copy assignment operator for %0, because non-static %select{reference|const}1 member %2 cannot use copy assignment operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5351" name="err_uninitialized_member_in_ctor">
        <segment state="initial">
          <source>%select{constructor for %1|implicit default constructor for %1|cannot use constructor inherited from %1:}0 must explicitly initialize the %select{reference|const}2 member %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5352" name="err_union_as_base_class">
        <segment state="initial">
          <source>unions cannot be base classes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5353" name="err_union_member_of_reference_type">
        <segment state="initial">
          <source>union member %0 has reference type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5354" name="err_unknown_any_addrof">
        <segment state="initial">
          <source>the address of a declaration with unknown type can only be cast to a pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5355" name="err_unknown_any_addrof_call">
        <segment state="initial">
          <source>address-of operator cannot be applied to a call to a function with unknown return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5356" name="err_unknown_any_function">
        <segment state="initial">
          <source>function %0 with unknown type must be given a function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5357" name="err_unknown_any_var_function_type">
        <segment state="initial">
          <source>variable %0 with unknown type cannot be given a function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5358" name="err_unknown_arm_state">
        <segment state="initial">
          <source>unknown state '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5359" name="err_unknown_nested_typename_suggest">
        <segment state="initial">
          <source>no type named %0 in %1; did you mean %select{|simply }2%3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5360" name="err_unknown_receiver_suggest">
        <segment state="initial">
          <source>unknown receiver %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5361" name="err_unknown_type_or_class_name_suggest">
        <segment state="initial">
          <source>unknown %select{type|class}1 name %0; did you mean %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5362" name="err_unknown_typename">
        <segment state="initial">
          <source>unknown type name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5363" name="err_unknown_typename_suggest">
        <segment state="initial">
          <source>unknown type name %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5364" name="err_unqualified_pointer_member_function">
        <segment state="initial">
          <source>must explicitly qualify name of member function when taking its address</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5365" name="err_unsupported_placeholder_constraint">
        <segment state="initial">
          <source>constrained placeholder types other than simple 'auto' on non-type template parameters not supported yet</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5366" name="err_unsupported_unknown_any_call">
        <segment state="initial">
          <source>call to unsupported expression with unknown type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5367" name="err_unsupported_unknown_any_decl">
        <segment state="initial">
          <source>%0 has unknown type, which is not supported for this kind of declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5368" name="err_unsupported_unknown_any_expr">
        <segment state="initial">
          <source>unsupported expression with unknown type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5369" name="err_upcast_to_inaccessible_base">
        <segment state="initial">
          <source>cannot cast %0 to its %select{private|protected}2 base class %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5370" name="err_use_continuation_class">
        <segment state="initial">
          <source>illegal redeclaration of property in class extension %0 (attribute must be 'readwrite', while its primary must be 'readonly')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5371" name="err_use_continuation_class_redeclaration_readwrite">
        <segment state="initial">
          <source>illegal redeclaration of 'readwrite' property in class extension %0 (perhaps you intended this to be a 'readwrite' redeclaration of a 'readonly' public property?)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5372" name="err_use_of_default_argument_to_function_declared_later">
        <segment state="initial">
          <source>use of default argument to function %0 that is declared later in class %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5373" name="err_use_of_empty_using_if_exists">
        <segment state="initial">
          <source>reference to unresolved using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5374" name="err_use_of_unaddressable_function">
        <segment state="initial">
          <source>taking address of non-addressable standard library function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5375" name="err_use_with_wrong_tag">
        <segment state="initial">
          <source>use of %0 with tag type that does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5376" name="err_user_defined_msg_constexpr">
        <segment state="initial">
          <source>%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must be produced by a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5377" name="err_user_defined_msg_invalid">
        <segment state="initial">
          <source>%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must be a string literal or an object with 'data()' and 'size()' member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5378" name="err_user_defined_msg_invalid_mem_fn_ret_ty">
        <segment state="initial">
          <source>%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must have a '%select{size|data}1()' member function returning an object convertible to '%select{std::size_t|const char *}1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5379" name="err_user_defined_msg_missing_member_function">
        <segment state="initial">
          <source>the %select{message|string}0 object in %select{this static assertion|this asm operand}0 is missing %select{a 'size()' member function|a 'data()' member function|'data()' and 'size()' member functions}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5380" name="err_using_decl_can_not_refer_to_class_member">
        <segment state="initial">
          <source>using declaration cannot refer to class member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5381" name="err_using_decl_can_not_refer_to_namespace">
        <segment state="initial">
          <source>using declaration cannot refer to a namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5382" name="err_using_decl_conflict">
        <segment state="initial">
          <source>target of using declaration conflicts with declaration already in scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5383" name="err_using_decl_conflict_reverse">
        <segment state="initial">
          <source>declaration conflicts with target of using declaration already in scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5384" name="err_using_decl_constructor">
        <segment state="initial">
          <source>using declaration cannot refer to a constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5385" name="err_using_decl_constructor_not_in_direct_base">
        <segment state="initial">
          <source>%0 is not a direct base of %1, cannot inherit constructors</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5386" name="err_using_decl_destructor">
        <segment state="initial">
          <source>using declaration cannot refer to a destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5387" name="err_using_decl_friend">
        <segment state="initial">
          <source>cannot befriend target of using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5388" name="err_using_decl_nested_name_specifier_is_current_class">
        <segment state="initial">
          <source>using declaration refers to its own class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5389" name="err_using_decl_nested_name_specifier_is_not_base_class">
        <segment state="initial">
          <source>using declaration refers into %0, which is not a base class of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5390" name="err_using_decl_nested_name_specifier_is_not_class">
        <segment state="initial">
          <source>using declaration in class refers into %0, which is not a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5391" name="err_using_decl_redeclaration">
        <segment state="initial">
          <source>redeclaration of using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5392" name="err_using_decl_redeclaration_expansion">
        <segment state="initial">
          <source>using declaration pack expansion at block scope produces multiple values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5393" name="err_using_decl_template_id">
        <segment state="initial">
          <source>using declaration cannot refer to a template specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5394" name="err_using_dependent_value_is_type">
        <segment state="initial">
          <source>dependent using declaration resolved to type without 'typename'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5395" name="err_using_directive_member_suggest">
        <segment state="initial">
          <source>no namespace named %0 in %1; did you mean %select{|simply }2%3?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5396" name="err_using_directive_suggest">
        <segment state="initial">
          <source>no namespace named %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5397" name="err_using_enum_decl_redeclaration">
        <segment state="initial">
          <source>redeclaration of using-enum declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5398" name="err_using_enum_is_dependent">
        <segment state="initial">
          <source>using-enum cannot name a dependent type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5399" name="err_using_enum_not_enum">
        <segment state="initial">
          <source>%0 is not an enumerated type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5400" name="err_using_if_exists_on_ctor">
        <segment state="initial">
          <source>'using_if_exists' attribute cannot be applied to an inheriting constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5401" name="err_using_pack_expansion_empty">
        <segment state="initial">
          <source>%select{|member}0 using declaration %1 instantiates to an empty pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5402" name="err_using_placeholder_variable">
        <segment state="initial">
          <source>ambiguous reference to placeholder '_', which is defined multiple times</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5403" name="err_using_requires_qualname">
        <segment state="initial">
          <source>using declaration requires a qualified name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5404" name="err_using_typename_non_type">
        <segment state="initial">
          <source>'typename' keyword used on a non-type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5405" name="err_uuidof_with_multiple_guids">
        <segment state="initial">
          <source>cannot call operator __uuidof on a type with multiple GUIDs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5406" name="err_uuidof_without_guid">
        <segment state="initial">
          <source>cannot call operator __uuidof on a type with no GUID</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5407" name="err_va_arg_in_device">
        <segment state="initial">
          <source>CUDA device code does not support va_arg</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5408" name="err_va_start_captured_stmt">
        <segment state="initial">
          <source>'va_start' cannot be used in a captured statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5409" name="err_va_start_fixed_function">
        <segment state="initial">
          <source>'va_start' used in function with fixed args</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5410" name="err_va_start_outside_function">
        <segment state="initial">
          <source>'va_start' cannot be used outside a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5411" name="err_va_start_used_in_wrong_abi_function">
        <segment state="initial">
          <source>'va_start' used in %select{System V|Win64}0 ABI function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5412" name="err_value_init_for_array_type">
        <segment state="initial">
          <source>array types cannot be value-initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5413" name="err_var_partial_spec_redeclared">
        <segment state="initial">
          <source>variable template partial specialization %0 cannot be redefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5414" name="err_var_spec_no_template">
        <segment state="initial">
          <source>no variable template matches%select{| partial}0 specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5415" name="err_var_spec_no_template_but_method">
        <segment state="initial">
          <source>no variable template matches specialization; did you mean to use %0 as function template instead?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5416" name="err_var_template_spec_type_depends_on_self">
        <segment state="initial">
          <source>the type of variable template specialization %0 declared with deduced type %1 depends on itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5417" name="err_variable_instantiates_to_function">
        <segment state="initial">
          <source>%select{variable|static data member}0 instantiated with function type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5418" name="err_variable_object_no_init">
        <segment state="initial">
          <source>variable-sized object may not be initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5419" name="err_variably_modified_new_type">
        <segment state="initial">
          <source>'new' cannot allocate object of variably modified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5420" name="err_variably_modified_nontype_template_param">
        <segment state="initial">
          <source>non-type template parameter of variably modified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5421" name="err_variably_modified_template_arg">
        <segment state="initial">
          <source>variably modified type %0 cannot be used as a template argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5422" name="err_variably_modified_typeid">
        <segment state="initial">
          <source>'typeid' of variably modified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5423" name="err_variadic_device_fn">
        <segment state="initial">
          <source>CUDA device code does not support variadic functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5424" name="err_vec_builtin_incompatible_vector">
        <segment state="initial">
          <source>%select{first two|all}1 arguments to %0 must have the same type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5425" name="err_vec_builtin_non_vector">
        <segment state="initial">
          <source>%select{first two|all}1 arguments to %0 must be vectors</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5426" name="err_vecstep_non_scalar_vector_type">
        <segment state="initial">
          <source>'vec_step' requires built-in scalar or vector type, %0 invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5427" name="err_vector_incorrect_bit_count">
        <segment state="initial">
          <source>incorrect number of bits in vector operand (expected %select{|a multiple of}0 %1 bits, have %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5428" name="err_vector_incorrect_num_elements">
        <segment state="initial">
          <source>%select{too many|too few}0 elements in vector %select{initialization|operand}3 (expected %1 elements, have %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5429" name="err_virtual_in_union">
        <segment state="initial">
          <source>unions cannot have virtual functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5430" name="err_virtual_member_function_template">
        <segment state="initial">
          <source>'virtual' cannot be specified on member function templates</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5431" name="err_virtual_non_function">
        <segment state="initial">
          <source>'virtual' can only appear on non-static member functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5432" name="err_virtual_out_of_class">
        <segment state="initial">
          <source>'virtual' can only be specified inside the class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5433" name="err_vla_decl_has_extern_linkage">
        <segment state="initial">
          <source>variable length array declaration cannot have 'extern' linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5434" name="err_vla_decl_has_static_storage">
        <segment state="initial">
          <source>variable length array declaration cannot have 'static' storage duration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5435" name="err_vla_decl_in_file_scope">
        <segment state="initial">
          <source>variable length array declaration not allowed at file scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5436" name="err_vla_in_coroutine_unsupported">
        <segment state="initial">
          <source>variable length arrays in a coroutine are not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5437" name="err_vla_in_sfinae">
        <segment state="initial">
          <source>variable length array cannot be formed during template argument deduction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5438" name="err_vla_unsupported">
        <segment state="initial">
          <source>variable length arrays are not supported %select{for the current target|in '%1'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5439" name="err_vm_decl_has_extern_linkage">
        <segment state="initial">
          <source>variably modified type declaration cannot have 'extern' linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5440" name="err_vm_decl_in_file_scope">
        <segment state="initial">
          <source>variably modified type declaration not allowed at file scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5441" name="err_vm_func_decl">
        <segment state="initial">
          <source>function declaration cannot have variably modified type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5442" name="err_void_explicit_object_param">
        <segment state="initial">
          <source>explicit object parameter cannot have 'void' type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5443" name="err_void_only_param">
        <segment state="initial">
          <source>'void' must be the first and only parameter if specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5444" name="err_void_param_qualified">
        <segment state="initial">
          <source>'void' as parameter must not have type qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5445" name="err_volatile_comparison_operator">
        <segment state="initial">
          <source>defaulted comparison function must not be volatile</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5446" name="err_vsx_builtin_nonconstant_argument">
        <segment state="initial">
          <source>argument %0 to %1 must be a 2-bit unsigned literal (i.e. 0, 1, 2 or 3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5447" name="err_wasm_builtin_arg_must_be_externref_type">
        <segment state="initial">
          <source>%ordinal0 argument must be an externref</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5448" name="err_wasm_builtin_arg_must_be_integer_type">
        <segment state="initial">
          <source>%ordinal0 argument must be an integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5449" name="err_wasm_builtin_arg_must_be_table_type">
        <segment state="initial">
          <source>%ordinal0 argument must be a WebAssembly table</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5450" name="err_wasm_builtin_arg_must_match_table_element_type">
        <segment state="initial">
          <source>%ordinal0 argument must match the element type of the WebAssembly table in the %ordinal1 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5451" name="err_wasm_ca_reference">
        <segment state="initial">
          <source>cannot %select{capture|take address of}0 WebAssembly reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5452" name="err_wasm_cast_table">
        <segment state="initial">
          <source>cannot cast %select{to|from}0 a WebAssembly table</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5453" name="err_wasm_funcref_not_wasm">
        <segment state="initial">
          <source>invalid use of '__funcref' keyword outside the WebAssembly triple</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5454" name="err_wasm_reference_pr">
        <segment state="initial">
          <source>%select{pointer|reference}0 to WebAssembly reference type is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5455" name="err_wasm_reftype_exception_spec">
        <segment state="initial">
          <source>WebAssembly reference type not allowed in exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5456" name="err_wasm_reftype_multidimensional_array">
        <segment state="initial">
          <source>multi-dimensional arrays of WebAssembly references are not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5457" name="err_wasm_reftype_tc">
        <segment state="initial">
          <source>cannot %select{throw|catch}0 a WebAssembly reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5458" name="err_wasm_table_art">
        <segment state="initial">
          <source>cannot %select{assign|return|throw|subscript}0 a WebAssembly table</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5459" name="err_wasm_table_as_function_parameter">
        <segment state="initial">
          <source>cannot use WebAssembly table as a function parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5460" name="err_wasm_table_conditional_expression">
        <segment state="initial">
          <source>cannot use a WebAssembly table within a branch of a conditional expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5461" name="err_wasm_table_in_function">
        <segment state="initial">
          <source>WebAssembly table cannot be declared within a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5462" name="err_wasm_table_invalid_uett_operand">
        <segment state="initial">
          <source>invalid application of '%0' to WebAssembly table</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5463" name="err_wasm_table_must_be_static">
        <segment state="initial">
          <source>WebAssembly table must be static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5464" name="err_wasm_table_pr">
        <segment state="initial">
          <source>cannot form a %select{pointer|reference}0 to a WebAssembly table</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5465" name="err_weak_property">
        <segment state="initial">
          <source>existing instance variable %1 for __weak property %0 must be __weak</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5466" name="err_wrong_sampler_addressspace">
        <segment state="initial">
          <source>sampler type cannot be used with the __local and __global address space qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5467" name="err_x86_builtin_invalid_rounding">
        <segment state="initial">
          <source>invalid rounding argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5468" name="err_x86_builtin_invalid_scale">
        <segment state="initial">
          <source>scale argument must be 1, 2, 4, or 8</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5469" name="err_x86_builtin_tile_arg_duplicate">
        <segment state="initial">
          <source>tile arguments must refer to different tiles</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5470" name="error_cconv_unsupported">
        <segment state="initial">
          <source>%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5471" name="error_duplicate_asm_operand_name">
        <segment state="initial">
          <source>duplicate use of asm operand name "%0"</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5472" name="error_hlsl_inout_lvalue">
        <segment state="initial">
          <source>cannot bind non-lvalue argument %0 to %select{|in}1out paramemter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5473" name="error_hlsl_inout_scalar_extension">
        <segment state="initial">
          <source>illegal scalar extension cast on argument %0 to %select{|in}1out paramemter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5474" name="error_inoutput_conflict_with_clobber">
        <segment state="initial">
          <source>asm-specifier for input or output variable conflicts with asm clobber list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5475" name="error_subscript_overload">
        <segment state="initial">
          <source>overloaded %0 cannot have %select{no|a defaulted|more than one}1 parameter before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5476" name="ext_aggregate_init_not_constant">
        <segment state="initial">
          <source>initializer for aggregate is not a compile-time constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5477" name="ext_alias_template_in_declarative_nns">
        <segment state="initial">
          <source>a declarative nested name specifier cannot name an alias template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5478" name="ext_anonymous_record_with_anonymous_type">
        <segment state="initial">
          <source>anonymous types declared in an anonymous %select{struct|union}0 are an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5479" name="ext_anonymous_record_with_type">
        <segment state="initial">
          <source>types declared in an anonymous %select{struct|union}0 are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5480" name="ext_anonymous_struct_union_qualified">
        <segment state="initial">
          <source>anonymous %select{struct|union}0 cannot be '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5481" name="ext_anonymous_union">
        <segment state="initial">
          <source>anonymous unions are a C11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5482" name="ext_array_init_copy">
        <segment state="initial">
          <source>initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5483" name="ext_array_init_parens">
        <segment state="initial">
          <source>parenthesized initialization of a member array is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5484" name="ext_array_size_conversion">
        <segment state="initial">
          <source>implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5485" name="ext_assoc_type_incomplete">
        <segment state="initial">
          <source>incomplete type %0 in a '_Generic' association is a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5486" name="ext_auto_new_list_init">
        <segment state="initial">
          <source>ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5487" name="ext_auto_type_specifier">
        <segment state="initial">
          <source>'auto' type specifier is a %select{C++11|HLSL 202y}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5488" name="ext_bad_cxx_cast_qualifiers_away_incoherent">
        <segment state="initial">
          <source>ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5489" name="ext_c2y_alignof_incomplete_array">
        <segment state="initial">
          <source>'alignof' on an incomplete array type is a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5490" name="ext_c2y_imaginary_constant">
        <segment state="initial">
          <source>imaginary constants are a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5491" name="ext_c2y_increment_complex">
        <segment state="initial">
          <source>'%select{--|++}0' on an object of complex type is a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5492" name="ext_c11_anonymous_struct">
        <segment state="initial">
          <source>anonymous structs are a C11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5493" name="ext_c23_auto_non_plain_identifier">
        <segment state="initial">
          <source>type inference of a declaration other than a plain identifier with optional trailing attributes is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5494" name="ext_c23_enum_value_not_int">
        <segment state="initial">
          <source>%select{|incremented }0enumerator value which exceeds the range of 'int' is a C23 extension (%1 is too %select{small|large}2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5495" name="ext_c23_non_local_variable_decl_in_for">
        <segment state="initial">
          <source>declaration of non-local variable in 'for' loop is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5496" name="ext_c23_non_variable_decl_in_for">
        <segment state="initial">
          <source>non-variable declaration in 'for' loop is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5497" name="ext_c99_array_usage">
        <segment state="initial">
          <source>%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5498" name="ext_c99_flexible_array_member">
        <segment state="initial">
          <source>flexible array members are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5499" name="ext_cannot_use_trivial_abi">
        <segment state="initial">
          <source>'trivial_abi' cannot be applied to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5500" name="ext_capture_binding">
        <segment state="initial">
          <source>captured structured bindings are a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5501" name="ext_cast_fn_obj">
        <segment state="initial">
          <source>cast between pointer-to-function and pointer-to-object is an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5502" name="ext_cce_narrowing">
        <segment state="initial">
          <source>%select{case value|enumerator value|non-type template argument|non-type parameter of template template parameter|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5503" name="ext_compat_template_param_shadow">
        <segment state="initial">
          <source>declaration of %0 shadows template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5504" name="ext_complex_component_init">
        <segment state="initial">
          <source>complex initialization specifying real and imaginary components is an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5505" name="ext_constexpr_function_never_constant_expr">
        <segment state="initial">
          <source>%select{constexpr|consteval}1 %select{function|constructor}0 never produces a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5506" name="ext_constinit_missing">
        <segment state="initial">
          <source>'constinit' specifier missing on initializing declaration of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5507" name="ext_cxx14_attr">
        <segment state="initial">
          <source>use of the %0 attribute is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5508" name="ext_cxx17_attr">
        <segment state="initial">
          <source>use of the %0 attribute is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5509" name="ext_cxx20_attr">
        <segment state="initial">
          <source>use of the %0 attribute is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5510" name="ext_cxx23_attr">
        <segment state="initial">
          <source>use of the %0 attribute is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5511" name="ext_cxx26_type_aware_allocators">
        <segment state="initial">
          <source>type aware allocators are a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5512" name="ext_cxx_designated_init">
        <segment state="initial">
          <source>designated initializers are a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5513" name="ext_default_init_const">
        <segment state="initial">
          <source>default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5514" name="ext_defaulted_comparison">
        <segment state="initial">
          <source>defaulted comparison operators are a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5515" name="ext_delete_void_ptr_operand">
        <segment state="initial">
          <source>cannot delete expression with pointer-to-'void' type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5516" name="ext_deprecated_string_literal_conversion">
        <segment state="initial">
          <source>ISO C++11 does not allow conversion from string literal to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5517" name="ext_designated_init">
        <segment state="initial">
          <source>designated initializers are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5518" name="ext_designated_init_array">
        <segment state="initial">
          <source>array designators are a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5519" name="ext_designated_init_brace_elision">
        <segment state="initial">
          <source>brace elision for designated initializer is a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5520" name="ext_designated_init_mixed">
        <segment state="initial">
          <source>mixture of designated and non-designated initializers in the same initializer list is a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5521" name="ext_designated_init_nested">
        <segment state="initial">
          <source>nested designators are a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5522" name="ext_designated_init_reordered">
        <segment state="initial">
          <source>ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5523" name="ext_destructor_typedef_name">
        <segment state="initial">
          <source>destructor cannot be declared using a %select{typedef|type alias}1 %0 of the class name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5524" name="ext_dtor_name_ambiguous">
        <segment state="initial">
          <source>ISO C++ considers this destructor name lookup to be ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5525" name="ext_dtor_named_in_wrong_scope">
        <segment state="initial">
          <source>ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5526" name="ext_empty_struct_union">
        <segment state="initial">
          <source>empty %select{struct|union}0 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5527" name="ext_enum_friend">
        <segment state="initial">
          <source>elaborated enum specifier cannot be declared as a friend</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5528" name="ext_enum_too_large">
        <segment state="initial">
          <source>enumeration values exceed range of largest integer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5529" name="ext_enumerator_increment_too_large">
        <segment state="initial">
          <source>incremented enumerator value %0 is not representable in the largest integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5530" name="ext_enumerator_too_large">
        <segment state="initial">
          <source>enumerator value is not representable in the underlying type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5531" name="ext_equals_this_lambda_capture_cxx20">
        <segment state="initial">
          <source>explicit capture of 'this' with a capture default of '=' is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5532" name="ext_equivalent_internal_linkage_decl_in_modules">
        <segment state="initial">
          <source>ambiguous use of internal linkage declaration %0 defined in multiple modules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5533" name="ext_excess_initializers">
        <segment state="initial">
          <source>excess elements in %select{array|vector|scalar|union|struct}0 initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5534" name="ext_excess_initializers_for_sizeless_type">
        <segment state="initial">
          <source>excess elements in initializer for indivisible sizeless type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5535" name="ext_excess_initializers_in_char_array_initializer">
        <segment state="initial">
          <source>excess elements in char array initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5536" name="ext_explicit_conversion_functions">
        <segment state="initial">
          <source>explicit conversion functions are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5537" name="ext_explicit_instantiation_duplicate">
        <segment state="initial">
          <source>duplicate explicit instantiation of %0 ignored as a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5538" name="ext_explicit_instantiation_without_qualified_id">
        <segment state="initial">
          <source>qualifier in explicit instantiation of %q0 requires a template-id (a typedef is not permitted)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5539" name="ext_explicit_specialization_storage_class">
        <segment state="initial">
          <source>explicit specialization cannot have a storage class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5540" name="ext_expr_not_ice">
        <segment state="initial">
          <source>expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5541" name="ext_flexible_array_empty_aggregate_gnu">
        <segment state="initial">
          <source>flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5542" name="ext_flexible_array_empty_aggregate_ms">
        <segment state="initial">
          <source>flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5543" name="ext_flexible_array_in_array">
        <segment state="initial">
          <source>%0 may not be used as an array element due to flexible array member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5544" name="ext_flexible_array_in_struct">
        <segment state="initial">
          <source>%0 may not be nested in a struct due to flexible array member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5545" name="ext_flexible_array_init">
        <segment state="initial">
          <source>flexible array initialization is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5546" name="ext_flexible_array_union_gnu">
        <segment state="initial">
          <source>flexible array member %0 in a union is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5547" name="ext_flexible_array_union_ms">
        <segment state="initial">
          <source>flexible array member %0 in a union is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5548" name="ext_for_range_begin_end_types_differ">
        <segment state="initial">
          <source>'begin' and 'end' returning different types (%0 and %1) is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5549" name="ext_forward_ref_enum">
        <segment state="initial">
          <source>ISO C forbids forward references to 'enum' types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5550" name="ext_forward_ref_enum_def">
        <segment state="initial">
          <source>redeclaration of already-defined enum %0 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5551" name="ext_found_in_dependent_base">
        <segment state="initial">
          <source>use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5552" name="ext_found_later_in_class">
        <segment state="initial">
          <source>use of member %0 before its declaration is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5553" name="ext_freestanding_complex">
        <segment state="initial">
          <source>complex numbers are an extension in a freestanding C99 implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5554" name="ext_friend_tag_redecl_outside_namespace">
        <segment state="initial">
          <source>unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5555" name="ext_gnu_anonymous_struct">
        <segment state="initial">
          <source>anonymous structs are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5556" name="ext_gnu_imaginary_constant">
        <segment state="initial">
          <source>imaginary constants are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5557" name="ext_gnu_ptr_func_arith">
        <segment state="initial">
          <source>arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5558" name="ext_gnu_subscript_void_type">
        <segment state="initial">
          <source>subscript of a pointer to void is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5559" name="ext_gnu_void_ptr">
        <segment state="initial">
          <source>arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5560" name="ext_goto_into_protected_scope">
        <segment state="initial">
          <source>jump from this goto statement to its label is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5561" name="ext_hlsl_auto_type_specifier">
        <segment state="initial">
          <source>'auto' type specifier is a %select{C++11|HLSL 202y}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5562" name="ext_implicit_exception_spec_mismatch">
        <segment state="initial">
          <source>function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5563" name="ext_implicit_function_decl_c99">
        <segment state="initial">
          <source>call to undeclared function %0; ISO C99 and later do not support implicit function declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5564" name="ext_implicit_lib_function_decl">
        <segment state="initial">
          <source>implicitly declaring library function '%0' with type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5565" name="ext_implicit_lib_function_decl_c99">
        <segment state="initial">
          <source>call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5566" name="ext_in_class_initializer_float_type">
        <segment state="initial">
          <source>in-class initializer for static data member of type %0 is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5567" name="ext_in_class_initializer_float_type_cxx11">
        <segment state="initial">
          <source>in-class initializer for static data member of type %0 requires 'constexpr' specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5568" name="ext_in_class_initializer_non_constant">
        <segment state="initial">
          <source>in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5569" name="ext_incomplete_in_exception_spec">
        <segment state="initial">
          <source>%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5570" name="ext_increment_bool">
        <segment state="initial">
          <source>ISO C++17 does not allow incrementing expression of type bool</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5571" name="ext_init_capture">
        <segment state="initial">
          <source>initialized lambda captures are a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5572" name="ext_init_capture_pack">
        <segment state="initial">
          <source>initialized lambda pack captures are a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5573" name="ext_init_from_predefined">
        <segment state="initial">
          <source>initializing an array from a %0 predefined identifier is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5574" name="ext_init_list_constant_narrowing">
        <segment state="initial">
          <source>constant expression evaluates to %0 which cannot be narrowed to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5575" name="ext_init_list_constant_narrowing_const_reference">
        <segment state="initial">
          <source>constant expression evaluates to %0 which cannot be narrowed to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5576" name="ext_init_list_type_narrowing">
        <segment state="initial">
          <source>type %0 cannot be narrowed to %1 in initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5577" name="ext_init_list_type_narrowing_const_reference">
        <segment state="initial">
          <source>type %0 cannot be narrowed to %1 in initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5578" name="ext_init_list_variable_narrowing">
        <segment state="initial">
          <source>non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5579" name="ext_init_list_variable_narrowing_const_reference">
        <segment state="initial">
          <source>non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5580" name="ext_initializer_overrides">
        <segment state="initial">
          <source>initializer %select{partially |}0overrides prior initialization of this subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5581" name="ext_initializer_string_for_char_array_too_long">
        <segment state="initial">
          <source>initializer-string for char array is too long</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5582" name="ext_initializer_union_overrides">
        <segment state="initial">
          <source>initializer %select{partially |}0overrides prior initialization of this subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5583" name="ext_integer_complement_complex">
        <segment state="initial">
          <source>ISO C does not support '~' for complex conjugation of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5584" name="ext_integer_complex">
        <segment state="initial">
          <source>complex integer types are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5585" name="ext_internal_in_extern_inline">
        <segment state="initial">
          <source>static %select{function|variable}0 %1 is used in an inline function with external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5586" name="ext_internal_in_extern_inline_quiet">
        <segment state="initial">
          <source>static %select{function|variable}0 %1 is used in an inline function with external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5587" name="ext_main_invalid_linkage_specification">
        <segment state="initial">
          <source>'main' should not be 'extern "%select{C|C++}0"'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5588" name="ext_main_no_return">
        <segment state="initial">
          <source>implicit '0' return value from 'main' is a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5589" name="ext_main_returns_nonint">
        <segment state="initial">
          <source>return type of 'main' is not 'int'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5590" name="ext_main_used">
        <segment state="initial">
          <source>referring to 'main' within an expression is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5591" name="ext_many_braces_around_init">
        <segment state="initial">
          <source>too many braces around %select{scalar |}0initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5592" name="ext_member_redeclared">
        <segment state="initial">
          <source>class member cannot be redeclared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5593" name="ext_mismatched_exception_spec">
        <segment state="initial">
          <source>exception specification in declaration does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5594" name="ext_mismatched_exception_spec_explicit_instantiation">
        <segment state="initial">
          <source>exception specification in explicit instantiation does not match instantiated one</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5595" name="ext_missing_exception_specification">
        <segment state="initial">
          <source>%0 is missing exception specification '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5596" name="ext_missing_type_specifier">
        <segment state="initial">
          <source>type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5597" name="ext_mixed_decls_code">
        <segment state="initial">
          <source>mixing declarations and code is a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5598" name="ext_module_import_in_extern_c">
        <segment state="initial">
          <source>import of C++ module '%0' appears within extern "C" language linkage specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5599" name="ext_module_import_not_at_top_level_noop">
        <segment state="initial">
          <source>redundant #include of module '%0' appears within %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5600" name="ext_ms_ambiguous_direct_base">
        <segment state="initial">
          <source>accessing inaccessible direct base %0 of %1 is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5601" name="ext_ms_anonymous_record">
        <segment state="initial">
          <source>anonymous %select{structs|unions}0 are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5602" name="ext_ms_cast_fn_obj">
        <segment state="initial">
          <source>static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5603" name="ext_ms_delayed_template_argument">
        <segment state="initial">
          <source>using the undeclared type %0 as a default template argument is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5604" name="ext_ms_deref_template_argument">
        <segment state="initial">
          <source>non-type template argument containing a dereference operation is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5605" name="ext_ms_explicit_constructor_call">
        <segment state="initial">
          <source>explicit constructor calls are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5606" name="ext_ms_forward_ref_enum">
        <segment state="initial">
          <source>forward references to 'enum' types are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5607" name="ext_ms_impcast_fn_obj">
        <segment state="initial">
          <source>implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5608" name="ext_ms_template_spec_redecl_out_of_scope">
        <segment state="initial">
          <source>%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5609" name="ext_ms_template_type_arg_missing_typename">
        <segment state="initial">
          <source>template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5610" name="ext_ms_using_declaration_inaccessible">
        <segment state="initial">
          <source>using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5611" name="ext_mutable_reference">
        <segment state="initial">
          <source>'mutable' on a reference type is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5612" name="ext_nested_name_member_ref_lookup_ambiguous">
        <segment state="initial">
          <source>lookup of %0 in member access expression is ambiguous; using member of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5613" name="ext_nested_name_spec_is_enum">
        <segment state="initial">
          <source>use of enumeration in a nested name specifier is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5614" name="ext_nested_pointer_qualifier_mismatch">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5615" name="ext_new_paren_array_nonconst">
        <segment state="initial">
          <source>when type is in parentheses, array cannot have dynamic size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5616" name="ext_no_declarators">
        <segment state="initial">
          <source>declaration does not declare anything</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5617" name="ext_no_named_members_in_struct_union">
        <segment state="initial">
          <source>%select{struct|union}0 without named members is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5618" name="ext_non_c_like_anon_struct_in_typedef">
        <segment state="initial">
          <source>anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration; add a tag name here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5619" name="ext_noreturn_main">
        <segment state="initial">
          <source>'main' is not allowed to be declared _Noreturn</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5620" name="ext_offsetof_non_pod_type">
        <segment state="initial">
          <source>'offsetof' on non-POD type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5621" name="ext_offsetof_non_standardlayout_type">
        <segment state="initial">
          <source>'offsetof' on non-standard-layout type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5622" name="ext_omp_loop_not_canonical_init">
        <segment state="initial">
          <source>initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5623" name="ext_opencl_double_without_pragma">
        <segment state="initial">
          <source>Clang permits use of type 'double' regardless pragma if 'cl_khr_fp64' is supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5624" name="ext_opencl_ext_vector_type_rgba_selector">
        <segment state="initial">
          <source>vector component name '%0' is a feature from OpenCL version 3.0 onwards</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5625" name="ext_operator_new_delete_declared_inline">
        <segment state="initial">
          <source>replacement function %0 cannot be declared 'inline'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5626" name="ext_operator_overload_static">
        <segment state="initial">
          <source>declaring overloaded %0 as 'static' is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5627" name="ext_out_of_line_declaration">
        <segment state="initial">
          <source>out-of-line declaration of a member must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5628" name="ext_out_of_line_qualified_id_type_names_constructor">
        <segment state="initial">
          <source>ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5629" name="ext_override_exception_spec">
        <segment state="initial">
          <source>exception specification of overriding function is more lax than base version</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5630" name="ext_ovl_ambiguous_oper_binary_reversed">
        <segment state="initial">
          <source>ISO C++20 considers use of overloaded operator '%0' (with operand types %1 and %2) to be ambiguous despite there being a unique best viable function%select{ with non-reversed arguments|}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5631" name="ext_ovl_rewrite_equalequal_not_bool">
        <segment state="initial">
          <source>ISO C++20 requires return type of selected 'operator==' function for rewritten '%1' comparison to be 'bool', not %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5632" name="ext_pack_indexing">
        <segment state="initial">
          <source>pack indexing is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5633" name="ext_param_default_argument_redefinition">
        <segment state="initial">
          <source>redefinition of default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5634" name="ext_param_not_declared">
        <segment state="initial">
          <source>parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5635" name="ext_param_promoted_not_compatible_with_prototype">
        <segment state="initial">
          <source>%diff{promoted type $ of K&amp;R function parameter is not compatible with the parameter type $|promoted type of K&amp;R function parameter is not compatible with parameter type}0,1 declared in a previous prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5636" name="ext_parameter_name_omitted_c23">
        <segment state="initial">
          <source>omitting the parameter name in a function definition is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5637" name="ext_partial_spec_not_more_specialized_than_primary">
        <segment state="initial">
          <source>%select{class|variable}0 template partial specialization is not more specialized than the primary template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5638" name="ext_partial_specs_not_deducible">
        <segment state="initial">
          <source>%select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5639" name="ext_placeholder_var_definition">
        <segment state="initial">
          <source>placeholder variables are a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5640" name="ext_plain_complex">
        <segment state="initial">
          <source>plain '_Complex' requires a type specifier; assuming '_Complex double'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5641" name="ext_pointer_to_const_ref_member_on_rvalue">
        <segment state="initial">
          <source>invoking a pointer to a 'const &amp;' member function on an rvalue is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5642" name="ext_predef_outside_function">
        <segment state="initial">
          <source>predefined identifier is only valid inside function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5643" name="ext_pseudo_dtor_on_void">
        <segment state="initial">
          <source>pseudo-destructors on type void are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5644" name="ext_pure_function_definition">
        <segment state="initial">
          <source>function definition with pure-specifier is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5645" name="ext_qualified_dtor_named_in_lexical_scope">
        <segment state="initial">
          <source>qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5646" name="ext_redefinition_of_typedef">
        <segment state="initial">
          <source>redefinition of typedef %0 is a C11 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5647" name="ext_register_storage_class">
        <segment state="initial">
          <source>ISO C++17 does not allow 'register' storage class specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5648" name="ext_restrict_on_array_of_pointers_c23">
        <segment state="initial">
          <source>'restrict' qualifier on an array of pointers is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5649" name="ext_retained_language_linkage">
        <segment state="initial">
          <source>friend function %0 retaining previous language linkage is an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5650" name="ext_return_has_expr">
        <segment state="initial">
          <source>%select{void function|void method|constructor|destructor}1 %0 should not return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5651" name="ext_return_has_void_expr">
        <segment state="initial">
          <source>void %select{function|method|block}1 %0 should not return void expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5652" name="ext_return_missing_expr">
        <segment state="initial">
          <source>non-void %select{function|method}1 %0 should return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5653" name="ext_rvalue_to_reference_access_ctor">
        <segment state="initial">
          <source>C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5654" name="ext_rvalue_to_reference_temp_copy_no_viable">
        <segment state="initial">
          <source>no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5655" name="ext_sizeof_alignof_function_type">
        <segment state="initial">
          <source>invalid application of '%0' to a function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5656" name="ext_sizeof_alignof_void_type">
        <segment state="initial">
          <source>invalid application of '%0' to a void type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5657" name="ext_standalone_specifier">
        <segment state="initial">
          <source>'%0' is not permitted on a declaration of a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5658" name="ext_star_this_lambda_capture_cxx17">
        <segment state="initial">
          <source>capture of '*this' by copy is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5659" name="ext_static_non_static">
        <segment state="initial">
          <source>redeclaring non-static %0 as static is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5660" name="ext_static_out_of_line">
        <segment state="initial">
          <source>'static' can only be specified inside the class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5661" name="ext_string_literal_from_predefined">
        <segment state="initial">
          <source>expansion of predefined identifier '%0' to a string literal is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5662" name="ext_string_literal_operator_template">
        <segment state="initial">
          <source>string literal operator templates are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5663" name="ext_subscript_non_lvalue">
        <segment state="initial">
          <source>ISO C90 does not allow subscripting non-lvalue array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5664" name="ext_subscript_overload">
        <segment state="initial">
          <source>overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5665" name="ext_template_after_declarative_nns">
        <segment state="initial">
          <source>'template' cannot be used after a declarative nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5666" name="ext_template_arg_local_type">
        <segment state="initial">
          <source>template argument uses local type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5667" name="ext_template_arg_object_internal">
        <segment state="initial">
          <source>non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5668" name="ext_template_arg_unnamed_type">
        <segment state="initial">
          <source>template argument uses unnamed type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5669" name="ext_template_outside_of_template">
        <segment state="initial">
          <source>'template' keyword outside of a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5670" name="ext_template_param_shadow">
        <segment state="initial">
          <source>declaration of %0 shadows template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5671" name="ext_template_spec_extra_headers">
        <segment state="initial">
          <source>extraneous template parameter list in template specialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5672" name="ext_type_defined_in_offsetof">
        <segment state="initial">
          <source>defining a type within '%select{__builtin_offsetof|offsetof}0' is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5673" name="ext_typecheck_addrof_temporary">
        <segment state="initial">
          <source>taking the address of a temporary object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5674" name="ext_typecheck_addrof_void">
        <segment state="initial">
          <source>ISO C forbids taking the address of an expression of type 'void'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5675" name="ext_typecheck_base_super">
        <segment state="initial">
          <source>method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5676" name="ext_typecheck_cast_nonscalar">
        <segment state="initial">
          <source>C99 forbids casting nonscalar type %0 to the same type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5677" name="ext_typecheck_cast_to_union">
        <segment state="initial">
          <source>cast to union type is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5678" name="ext_typecheck_compare_complete_incomplete_pointers">
        <segment state="initial">
          <source>pointer comparisons before C11 need to be between two complete or two incomplete types; %0 is %select{|in}2complete and %1 is %select{|in}3complete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5679" name="ext_typecheck_comparison_of_distinct_pointers">
        <segment state="initial">
          <source>comparison of distinct pointer types%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5680" name="ext_typecheck_comparison_of_fptr_to_void">
        <segment state="initial">
          <source>equality comparison between function pointer and void pointer (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5681" name="ext_typecheck_comparison_of_pointer_integer">
        <segment state="initial">
          <source>comparison between pointer and integer (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5682" name="ext_typecheck_cond_incompatible_operands">
        <segment state="initial">
          <source>incompatible operand types (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5683" name="ext_typecheck_cond_incompatible_pointers">
        <segment state="initial">
          <source>pointer type mismatch%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5684" name="ext_typecheck_cond_one_void">
        <segment state="initial">
          <source>C99 forbids conditional expressions with only one void side</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5685" name="ext_typecheck_cond_pointer_integer_mismatch">
        <segment state="initial">
          <source>pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5686" name="ext_typecheck_convert_discards_qualifiers">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5687" name="ext_typecheck_convert_incompatible_function_pointer">
        <segment state="initial">
          <source>incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5688" name="ext_typecheck_convert_incompatible_pointer">
        <segment state="initial">
          <source>incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5689" name="ext_typecheck_convert_incompatible_pointer_sign">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5690" name="ext_typecheck_convert_int_pointer">
        <segment state="initial">
          <source>incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5691" name="ext_typecheck_convert_pointer_int">
        <segment state="initial">
          <source>incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5692" name="ext_typecheck_convert_pointer_void_func">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5693" name="ext_typecheck_decl_incomplete_type">
        <segment state="initial">
          <source>tentative definition of variable with internal linkage has incomplete %select{non-array|array}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5694" name="ext_typecheck_function_qualifiers_unspecified">
        <segment state="initial">
          <source>'%0' qualifier on function type %1 has no effect and is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5695" name="ext_typecheck_indirection_through_void_pointer">
        <segment state="initial">
          <source>ISO C does not allow indirection on operand of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5696" name="ext_typecheck_ordered_comparison_of_function_pointers">
        <segment state="initial">
          <source>ordered comparison of function pointers (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5697" name="ext_typecheck_ordered_comparison_of_pointer_and_zero">
        <segment state="initial">
          <source>ordered comparison between pointer and zero (%0 and %1) is an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5698" name="ext_typecheck_ordered_comparison_of_pointer_integer">
        <segment state="initial">
          <source>ordered comparison between pointer and integer (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5699" name="ext_typecheck_zero_array_size">
        <segment state="initial">
          <source>zero size arrays are an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5700" name="ext_typedef_without_a_name">
        <segment state="initial">
          <source>typedef requires a name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5701" name="ext_typename_missing">
        <segment state="initial">
          <source>missing 'typename' prior to dependent type name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5702" name="ext_undeclared_unqual_id_with_dependent_base">
        <segment state="initial">
          <source>use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5703" name="ext_undefined_internal_type">
        <segment state="initial">
          <source>ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5704" name="ext_unelaborated_friend_type">
        <segment state="initial">
          <source>unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5705" name="ext_union_member_of_reference_type">
        <segment state="initial">
          <source>union member %0 has reference type %1, which is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5706" name="ext_unqualified_base_class">
        <segment state="initial">
          <source>unqualified base initializer of class templates is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5707" name="ext_use_out_of_scope_declaration">
        <segment state="initial">
          <source>use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5708" name="ext_using_decl_scoped_enumerator">
        <segment state="initial">
          <source>using declaration naming a scoped enumerator is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5709" name="ext_using_undefined_std">
        <segment state="initial">
          <source>using directive refers to implicitly-defined namespace 'std'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5710" name="ext_variable_sized_type_in_struct">
        <segment state="initial">
          <source>field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5711" name="ext_variadic_main">
        <segment state="initial">
          <source>'main' is not allowed to be declared variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5712" name="ext_vla">
        <segment state="initial">
          <source>variable length arrays are a C99 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5713" name="ext_vla_cxx">
        <segment state="initial">
          <source>variable length arrays in C++ are a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5714" name="ext_vla_cxx_in_gnu_mode">
        <segment state="initial">
          <source>variable length arrays in C++ are a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5715" name="ext_vla_cxx_in_gnu_mode_static_assert">
        <segment state="initial">
          <source>variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5716" name="ext_vla_cxx_static_assert">
        <segment state="initial">
          <source>variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5717" name="ext_vla_folded_to_constant">
        <segment state="initial">
          <source>variable length array folded to constant array as an extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5718" name="ext_wchar_t_sign_spec">
        <segment state="initial">
          <source>'%0' cannot be signed or unsigned</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5719" name="friend_template_decl_malformed_pack_expansion">
        <segment state="initial">
          <source>friend declaration expands pack %0 that is declared it its own template parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5720" name="note_acc_active_applies_clause_here">
        <segment state="initial">
          <source>%select{active|which applies to}0 '%1' clause here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5721" name="note_acc_active_clause_here">
        <segment state="initial">
          <source>active '%0' clause defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5722" name="note_acc_atomic_expected_binop">
        <segment state="initial">
          <source>expected binary operation on right hand side of assignment operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5723" name="note_acc_atomic_expr_must_be">
        <segment state="initial">
          <source>expected %select{assignment|assignment, compound assignment, increment, or decrement}0 expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5724" name="note_acc_atomic_mismatch_compound_operand">
        <segment state="initial">
          <source>variable %select{|in unary expression|on right hand side of assignment|on left hand side of assignment|on left hand side of compound assignment|on left hand side of assignment}2(%3) must match variable used %select{|in unary expression|on right hand side of assignment|&lt;not possible&gt;|on left hand side of compound assignment|on left hand side of assignment}0(%1) from the first statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5725" name="note_acc_atomic_mismatch_operand">
        <segment state="initial">
          <source>left hand side of assignment operation(%0) must match one side of the sub-operation on the right hand side(%1 and %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5726" name="note_acc_atomic_operand_lvalue_scalar">
        <segment state="initial">
          <source>%select{left |right |}0operand to %select{assignment|compound assignment|increment|decrement}1 expression must be %select{an l-value|of scalar type (was %3)}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5727" name="note_acc_atomic_too_many_stmts">
        <segment state="initial">
          <source>'atomic capture' with a compound statement only supports two statements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5728" name="note_acc_atomic_unsupported_binary_operator">
        <segment state="initial">
          <source>binary operator not supported, only +, *, -, /, &amp;, ^, |, &lt;&lt;, or &gt;&gt; are permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5729" name="note_acc_atomic_unsupported_compound_binary_operator">
        <segment state="initial">
          <source>compound binary operator not supported, only +=, *=, -=, /=, &amp;=, ^=, |=, &lt;&lt;=, or &gt;&gt;= are permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5730" name="note_acc_atomic_unsupported_unary_operator">
        <segment state="initial">
          <source>unary operator not supported, only increment and decrement operations permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5731" name="note_acc_branch_into_compute_construct">
        <segment state="initial">
          <source>invalid branch into OpenACC Compute/Combined Construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5732" name="note_acc_branch_out_of_compute_construct">
        <segment state="initial">
          <source>invalid branch out of OpenACC Compute/Combined Construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5733" name="note_acc_construct_here">
        <segment state="initial">
          <source>'%0' construct is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5734" name="note_acc_expected_pointer_var">
        <segment state="initial">
          <source>expected variable of pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5735" name="note_acc_int_expr_conversion">
        <segment state="initial">
          <source>conversion to %select{integral|enumeration}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5736" name="note_acc_previous_clause_here">
        <segment state="initial">
          <source>previous '%0' clause is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5737" name="note_acc_previous_expr_here">
        <segment state="initial">
          <source>previous expression is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5738" name="note_acc_previous_reference">
        <segment state="initial">
          <source>previous reference is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5739" name="note_acc_reduction_composite_member_loc">
        <segment state="initial">
          <source>invalid field is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5740" name="note_access_constrained_by_path">
        <segment state="initial">
          <source>constrained by %select{|implicitly }1%select{private|protected}0 inheritance here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5741" name="note_access_natural">
        <segment state="initial">
          <source>%select{|implicitly }1declared %select{private|protected}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5742" name="note_access_protected_restricted_ctordtor">
        <segment state="initial">
          <source>protected %select{constructor|destructor}0 can only be used to %select{construct|destroy}0 a base class subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5743" name="note_access_protected_restricted_noobject">
        <segment state="initial">
          <source>must name member using the type of the current context %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5744" name="note_access_protected_restricted_object">
        <segment state="initial">
          <source>can only access this member on an object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5745" name="note_add_synthesize_directive">
        <segment state="initial">
          <source>add a '@synthesize' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5746" name="note_additional_parens_for_variable_declaration">
        <segment state="initial">
          <source>add a pair of parentheses to declare a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5747" name="note_addrof_ovl_candidate_disabled_by_enable_if_attr">
        <segment state="initial">
          <source>candidate function made ineligible by enable_if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5748" name="note_alignas_on_declaration">
        <segment state="initial">
          <source>declared with %0 attribute here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5749" name="note_allocated_here">
        <segment state="initial">
          <source>allocated with 'new%select{[]|}0' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5750" name="note_ambig_member_ref_object_type">
        <segment state="initial">
          <source>lookup in the object type %0 refers here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5751" name="note_ambig_member_ref_scope">
        <segment state="initial">
          <source>lookup from the current scope refers here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5752" name="note_ambiguous_atomic_constraints">
        <segment state="initial">
          <source>similar constraint expressions not considered equivalent; constraint expressions cannot be considered equivalent unless they originate from the same concept</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5753" name="note_ambiguous_atomic_constraints_similar_expression">
        <segment state="initial">
          <source>similar constraint expression here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5754" name="note_ambiguous_candidate">
        <segment state="initial">
          <source>candidate found by name lookup is %q0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5755" name="note_ambiguous_inherited_constructor_using">
        <segment state="initial">
          <source>inherited from base class %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5756" name="note_ambiguous_member_found">
        <segment state="initial">
          <source>member found by ambiguous name lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5757" name="note_ambiguous_member_type_found">
        <segment state="initial">
          <source>member type %0 found by ambiguous name lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5758" name="note_ambiguous_type_conversion">
        <segment state="initial">
          <source>because of ambiguity in conversion %diff{of $ to $|between types}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5759" name="note_amdgcn_load_lds_size_valid_value">
        <segment state="initial">
          <source>size must be %select{1, 2, or 4|1, 2, 4, 12 or 16}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5760" name="note_anonymous_namespace">
        <segment state="initial">
          <source>anonymous namespace begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5761" name="note_arc_bridge">
        <segment state="initial">
          <source>use __bridge to convert directly (no change in ownership)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5762" name="note_arc_bridge_retained">
        <segment state="initial">
          <source>use %select{__bridge_retained|CFBridgingRetain call}1 to make an ARC object available as a +1 %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5763" name="note_arc_bridge_transfer">
        <segment state="initial">
          <source>use %select{__bridge_transfer|CFBridgingRelease call}1 to transfer ownership of a +1 %0 into ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5764" name="note_arc_cstyle_bridge">
        <segment state="initial">
          <source>use __bridge with C-style cast to convert directly (no change in ownership)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5765" name="note_arc_cstyle_bridge_retained">
        <segment state="initial">
          <source>use __bridge_retained with C-style cast to make an ARC object available as a +1 %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5766" name="note_arc_cstyle_bridge_transfer">
        <segment state="initial">
          <source>use __bridge_transfer with C-style cast to transfer ownership of a +1 %0 into ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5767" name="note_arc_field_with_ownership">
        <segment state="initial">
          <source>field has non-trivial ownership qualification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5768" name="note_arc_forbidden_type">
        <segment state="initial">
          <source>declaration uses type that is ill-formed in ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5769" name="note_arc_gained_method_convention">
        <segment state="initial">
          <source>declaration in interface is not in the '%select{alloc|copy|init|new}0' family because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5770" name="note_arc_init_returns_unrelated">
        <segment state="initial">
          <source>init method must return a type related to its receiver type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5771" name="note_arc_lost_method_convention">
        <segment state="initial">
          <source>declaration in interface</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5772" name="note_arc_retain_cycle_owner">
        <segment state="initial">
          <source>block will be retained by %select{the captured object|an object strongly retained by the captured object}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5773" name="note_arc_weak_also_accessed_here">
        <segment state="initial">
          <source>also accessed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5774" name="note_arc_weak_disabled">
        <segment state="initial">
          <source>declaration uses __weak, but ARC is disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5775" name="note_arc_weak_no_runtime">
        <segment state="initial">
          <source>declaration uses __weak, which the current deployment target does not support</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5776" name="note_array_declared_here">
        <segment state="initial">
          <source>array %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5777" name="note_array_init_plain_string_into_char8_t">
        <segment state="initial">
          <source>add 'u8' prefix to form a 'char8_t' string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5778" name="note_array_size_conversion">
        <segment state="initial">
          <source>conversion to %select{integral|enumeration}0 type %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5779" name="note_asm_input_duplicate_first">
        <segment state="initial">
          <source>constraint '%0' is already present here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5780" name="note_asm_missing_constraint_modifier">
        <segment state="initial">
          <source>use constraint modifier "%0"</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5781" name="note_assign_lhs_incomplete">
        <segment state="initial">
          <source>type %0 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5782" name="note_atomic_constraint_evaluated_to_false">
        <segment state="initial">
          <source>%select{and|because}0 %1 evaluated to false</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5783" name="note_atomic_constraint_evaluated_to_false_elaborated">
        <segment state="initial">
          <source>%select{and|because}0 %1 (%2 %3 %4) evaluated to false</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5784" name="note_atomic_property_fixup_suggest">
        <segment state="initial">
          <source>setter and getter must both be synthesized, or both be user defined, or the property must be nonatomic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5785" name="note_attribute">
        <segment state="initial">
          <source>attribute is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5786" name="note_attribute_has_no_effect_on_compile_time_if_here">
        <segment state="initial">
          <source>annotating the 'if %select{constexpr|consteval}0' statement here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5787" name="note_attribute_has_no_effect_on_infinite_loop_here">
        <segment state="initial">
          <source>annotating the infinite loop here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5788" name="note_attribute_overloadable_prev_overload">
        <segment state="initial">
          <source>previous %select{unmarked |}0overload of function is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5789" name="note_auto_readonly_iboutlet_fixup_suggest">
        <segment state="initial">
          <source>property should be changed to be readwrite</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5790" name="note_availability_specified_here">
        <segment state="initial">
          <source>%0 has been explicitly marked %select{unavailable|deleted|deprecated}1 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5791" name="note_await_ready_no_bool_conversion">
        <segment state="initial">
          <source>return type of 'await_ready' is required to be contextually convertible to 'bool'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5792" name="note_bad_memaccess_silence">
        <segment state="initial">
          <source>explicitly cast the pointer to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5793" name="note_base_class_specified_here">
        <segment state="initial">
          <source>base class %0 specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5794" name="note_bitfield_decl">
        <segment state="initial">
          <source>bit-field is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5795" name="note_bitfield_preferred_type">
        <segment state="initial">
          <source>preferred type for bit-field %0 specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5796" name="note_block_var_fixit_add_initialization">
        <segment state="initial">
          <source>did you mean to use __block %0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5797" name="note_building_builtin_dump_struct_call">
        <segment state="initial">
          <source>in call to printing function with arguments '(%0)' while dumping struct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5798" name="note_building_deduction_guide_here">
        <segment state="initial">
          <source>while building implicit deduction guide first needed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5799" name="note_called_by">
        <segment state="initial">
          <source>called by %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5800" name="note_called_once_gets_called_twice">
        <segment state="initial">
          <source>previous call is here%select{; set to nil to indicate it cannot be called afterwards|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5801" name="note_callee_decl">
        <segment state="initial">
          <source>%0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5802" name="note_callee_static_array">
        <segment state="initial">
          <source>callee declares array parameter as static here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5803" name="note_cannot_use_trivial_abi_reason">
        <segment state="initial">
          <source>'trivial_abi' is disallowed on %0 because %select{its copy constructors and move constructors are all deleted|it is polymorphic|it has a base of a non-trivial class type|it has a virtual base|it has a __weak field|it has a field of a non-trivial class type|it has an address-discriminated '__ptrauth' field}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5804" name="note_carries_dependency_missing_first_decl">
        <segment state="initial">
          <source>declaration missing '[[carries_dependency]]' attribute is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5805" name="note_cast_operand_to_int">
        <segment state="initial">
          <source>cast one or both operands to int to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5806" name="note_cast_to_void">
        <segment state="initial">
          <source>cast expression to void to silence warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5807" name="note_cat_conform_to_noescape_prot">
        <segment state="initial">
          <source>%select{category|class extension}0 conforms to protocol %1 which defines method %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5808" name="note_change_bitfield_sign">
        <segment state="initial">
          <source>consider making the bit-field type %select{unsigned|signed}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5809" name="note_change_calling_conv_fixit">
        <segment state="initial">
          <source>consider defining %0 with the '%1' calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5810" name="note_checking_constraints_for_class_spec_id_here">
        <segment state="initial">
          <source>while checking constraint satisfaction for class template partial specialization '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5811" name="note_checking_constraints_for_function_here">
        <segment state="initial">
          <source>while checking constraint satisfaction for function '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5812" name="note_checking_constraints_for_template_id_here">
        <segment state="initial">
          <source>while checking constraint satisfaction for template '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5813" name="note_checking_constraints_for_var_spec_id_here">
        <segment state="initial">
          <source>while checking constraint satisfaction for variable template partial specialization '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5814" name="note_class_declared">
        <segment state="initial">
          <source>class is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5815" name="note_cocoa_naming_declare_family">
        <segment state="initial">
          <source>explicitly declare getter %objcinstance0 with '%1' to return an 'unowned' object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5816" name="note_collapse_loop_count">
        <segment state="initial">
          <source>parameter of the 'collapse' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5817" name="note_comparison_synthesized_at">
        <segment state="initial">
          <source>in defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator for %1 first required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5818" name="note_compat_assoc">
        <segment state="initial">
          <source>compatible type %0 specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5819" name="note_concatenated_string_literal_silence">
        <segment state="initial">
          <source>place parentheses around the string literal to silence warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5820" name="note_concept_specialization_constraint_evaluated_to_false">
        <segment state="initial">
          <source>%select{and|because}0 %1 evaluated to false</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5821" name="note_concept_specialization_here">
        <segment state="initial">
          <source>while checking the satisfaction of concept '%0' requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5822" name="note_condition_assign_silence">
        <segment state="initial">
          <source>place parentheses around the assignment to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5823" name="note_condition_assign_to_comparison">
        <segment state="initial">
          <source>use '==' to turn this assignment into an equality comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5824" name="note_condition_or_assign_to_comparison">
        <segment state="initial">
          <source>use '!=' to turn this compound assignment into an inequality comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5825" name="note_conflicting_attribute">
        <segment state="initial">
          <source>conflicting attribute is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5826" name="note_conflicting_prototype">
        <segment state="initial">
          <source>conflicting prototype is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5827" name="note_conflicting_try_here">
        <segment state="initial">
          <source>conflicting %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5828" name="note_constexpr_assert_failed">
        <segment state="initial">
          <source>assertion failed during evaluation of constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5829" name="note_constexpr_body_previous_return">
        <segment state="initial">
          <source>previous return statement is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5830" name="note_constexpr_ctor_missing_init">
        <segment state="initial">
          <source>member not initialized by constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5831" name="note_constexpr_dtor_subobject">
        <segment state="initial">
          <source>%select{data member %1|base class %2}0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5832" name="note_constexpr_virtual_base_here">
        <segment state="initial">
          <source>virtual base class declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5833" name="note_constinit_missing_here">
        <segment state="initial">
          <source>add the %select{'require_constant_initialization' attribute|'constinit' specifier}0 to the initializing declaration here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5834" name="note_constinit_specified_here">
        <segment state="initial">
          <source>variable declared constinit here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5835" name="note_constraint_normalization_here">
        <segment state="initial">
          <source>while calculating associated constraint of template %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5836" name="note_constraint_references_error">
        <segment state="initial">
          <source>constraint depends on a previously diagnosed expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5837" name="note_constraint_substitution_here">
        <segment state="initial">
          <source>while substituting template arguments into constraint expression here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5838" name="note_conv_function_declared_at">
        <segment state="initial">
          <source>type conversion function declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5839" name="note_convert_inline_to_static">
        <segment state="initial">
          <source>use 'static' to give inline function %0 internal linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5840" name="note_coroutine_function_declare_noexcept">
        <segment state="initial">
          <source>must be declared with 'noexcept'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5841" name="note_coroutine_promise_call_implicitly_required">
        <segment state="initial">
          <source>call to %0 implicitly required by coroutine function here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5842" name="note_coroutine_promise_implicit_await_transform_required_here">
        <segment state="initial">
          <source>call to 'await_transform' implicitly required by 'co_await' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5843" name="note_coroutine_promise_suspend_implicitly_required">
        <segment state="initial">
          <source>call to '%select{initial_suspend|final_suspend}0' implicitly required by the %select{initial suspend point|final suspend point}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5844" name="note_coroutine_unusable_type_aware_allocators">
        <segment state="initial">
          <source>type aware %0 will not be used for coroutine allocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5845" name="note_counted_by_consider_completing_pointee_ty">
        <segment state="initial">
          <source>consider providing a complete definition for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5846" name="note_counted_by_consider_using_sized_by">
        <segment state="initial">
          <source>consider using '__sized_by%select{|_or_null}0' instead of '__counted_by%select{|_or_null}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5847" name="note_cuda_conflicting_device_function_declared_here">
        <segment state="initial">
          <source>conflicting __device__ function declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5848" name="note_cuda_const_var_unpromoted">
        <segment state="initial">
          <source>const variable cannot be emitted on device side due to dynamic initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5849" name="note_cuda_device_builtin_surftex_cls_should_have_match_arg">
        <segment state="initial">
          <source>the %select{1st|2nd|3rd}1 template parameter of %0 needs to be %select{a type|an integer or enum value}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5850" name="note_cuda_device_builtin_surftex_cls_should_have_n_args">
        <segment state="initial">
          <source>%0 needs to have exactly %1 template parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5851" name="note_cuda_device_builtin_surftex_should_be_template_class">
        <segment state="initial">
          <source>%0 needs to be instantiated from a class template with proper template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5852" name="note_cuda_host_var">
        <segment state="initial">
          <source>host variable declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5853" name="note_cuda_ovl_candidate_target_mismatch">
        <segment state="initial">
          <source>candidate template ignored: target attributes do not match</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5854" name="note_cxx20_c23_compat_utf8_string_remove_u8">
        <segment state="initial">
          <source>remove 'u8' prefix to avoid a change of behavior; Clang encodes unprefixed narrow string literals as UTF-8</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5855" name="note_decl_unguarded_availability_silence">
        <segment state="initial">
          <source>annotate %select{%1|anonymous %1}0 with an availability attribute to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5856" name="note_declaration_not_a_prototype">
        <segment state="initial">
          <source>this declaration is not a prototype; add %select{'void'|parameter declarations}0 to make it %select{a prototype for a zero-parameter function|one}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5857" name="note_declare_parameter_strong">
        <segment state="initial">
          <source>declare the parameter __strong or capture a __block __strong variable to keep values alive across autorelease pools</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5858" name="note_declared_coroutine_here">
        <segment state="initial">
          <source>function is a coroutine due to use of '%0' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5859" name="note_declared_nonnull">
        <segment state="initial">
          <source>declared %select{'returns_nonnull'|'nonnull'}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5860" name="note_declared_required_constant_init_here">
        <segment state="initial">
          <source>required by %select{'require_constant_initialization' attribute|'constinit' specifier}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5861" name="note_deduced_template_arg_substitution_here">
        <segment state="initial">
          <source>during template argument deduction for %select{class|variable}0 template %select{partial specialization |}1%2 %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5862" name="note_deduction_guide_access">
        <segment state="initial">
          <source>deduction guide declared %0 by intervening access specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5863" name="note_deduction_guide_template_access">
        <segment state="initial">
          <source>member template declared %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5864" name="note_default_arg_instantiation_here">
        <segment state="initial">
          <source>in instantiation of default argument for '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5865" name="note_default_argument_declared_here">
        <segment state="initial">
          <source>default argument declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5866" name="note_default_constructed_field">
        <segment state="initial">
          <source>default constructed field %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5867" name="note_default_function_arg_instantiation_here">
        <segment state="initial">
          <source>in instantiation of default function argument expression for '%0' required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5868" name="note_default_init_const_member">
        <segment state="initial">
          <source>member %0 declared 'const' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5869" name="note_default_member_initializer_not_yet_parsed">
        <segment state="initial">
          <source>default member initializer declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5870" name="note_defaulted_comparison_ambiguous">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because implied %select{|'==' |'&lt;' }1comparison %select{|for member %3 |for base class %3 }2is ambiguous</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5871" name="note_defaulted_comparison_calls_deleted">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because it would invoke a deleted comparison function%select{| for member %2| for base class %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5872" name="note_defaulted_comparison_cannot_deduce">
        <segment state="initial">
          <source>return type of defaulted 'operator&lt;=&gt;' cannot be deduced because return type %2 of three-way comparison for %select{|member|base class}0 %1 is not a standard comparison category type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5873" name="note_defaulted_comparison_cannot_deduce_callee">
        <segment state="initial">
          <source>selected 'operator&lt;=&gt;' for %select{|member|base class}0 %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5874" name="note_defaulted_comparison_cannot_deduce_undeduced_auto">
        <segment state="initial">
          <source>%select{|member|base class}0 %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5875" name="note_defaulted_comparison_inaccessible">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because it would invoke a %select{private|protected}3 %4%select{ member of %6| member of %6 to compare member %2| to compare base class %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5876" name="note_defaulted_comparison_no_viable_function">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because there is no viable %select{three-way comparison function|'operator=='}1 for %select{|member |base class }2%3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5877" name="note_defaulted_comparison_no_viable_function_synthesized">
        <segment state="initial">
          <source>three-way comparison cannot be synthesized because there is no viable function for %select{'=='|'&lt;'}0 comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5878" name="note_defaulted_comparison_not_constexpr">
        <segment state="initial">
          <source>non-constexpr comparison function would be used to compare %select{|member %1|base class %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5879" name="note_defaulted_comparison_not_constexpr_here">
        <segment state="initial">
          <source>non-constexpr comparison function declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5880" name="note_defaulted_comparison_not_rewritten_callee">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because this non-rewritten comparison function would be the best match for the comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5881" name="note_defaulted_comparison_not_rewritten_conversion">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because a builtin comparison function using this conversion would be the best match for the comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5882" name="note_defaulted_comparison_reference_member">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because class %1 has a reference member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5883" name="note_defaulted_comparison_union">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because %2 is a %select{union-like class|union}1 with variant members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5884" name="note_defaulted_comparison_vector_types">
        <segment state="initial">
          <source>defaulted %0 is implicitly deleted because defaulted comparison of vector types is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5885" name="note_defined_here">
        <segment state="initial">
          <source>%0 defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5886" name="note_delete_conversion">
        <segment state="initial">
          <source>conversion to pointer type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5887" name="note_delete_non_virtual">
        <segment state="initial">
          <source>qualify call to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5888" name="note_deleted_assign_field">
        <segment state="initial">
          <source>%select{copy|move}0 assignment operator of %1 is implicitly deleted because field %2 is of %select{reference|const-qualified}4 type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5889" name="note_deleted_copy_ctor_rvalue_reference">
        <segment state="initial">
          <source>copy constructor of %0 is implicitly deleted because field %1 is of rvalue reference type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5890" name="note_deleted_copy_user_declared_move">
        <segment state="initial">
          <source>copy %select{constructor|assignment operator}0 is implicitly deleted because %1 has a user-declared move %select{constructor|assignment operator}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5891" name="note_deleted_default_ctor_all_const">
        <segment state="initial">
          <source>%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because all %select{data members|data members of an anonymous union member}2 are const-qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5892" name="note_deleted_default_ctor_uninit_field">
        <segment state="initial">
          <source>%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because field %2 of %select{reference|const-qualified}4 type %3 would not be initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5893" name="note_deleted_dtor_no_operator_delete">
        <segment state="initial">
          <source>virtual destructor requires an unambiguous, accessible 'operator delete'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5894" name="note_deleted_special_member_class_subobject">
        <segment state="initial">
          <source>%select{default constructor of|copy constructor of|move constructor of|copy assignment operator of|move assignment operator of|destructor of|constructor inherited by}0 %1 is implicitly deleted because %select{base class %3|%select{||||variant }4field %3}2 %select{has %select{no|a deleted|multiple|an inaccessible|a non-trivial}4 %select{%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|%select{default|corresponding|default|default|default}4 constructor}0|destructor}5%select{||s||}4|is an ObjC pointer|has an address-discriminated '__ptrauth' qualifier}6</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5895" name="note_deleted_type_mismatch">
        <segment state="initial">
          <source>function is implicitly deleted because its declared type does not match the type of an implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5896" name="note_dependent_function_template_spec_discard_reason">
        <segment state="initial">
          <source>candidate ignored: %select{not a function template|not a member of the enclosing %select{class template|namespace; did you mean to explicitly qualify the specialization?}1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5897" name="note_dependent_member_use">
        <segment state="initial">
          <source>must qualify identifier to find this declaration in dependent base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5898" name="note_dependent_non_type_default_arg_in_partial_spec">
        <segment state="initial">
          <source>template parameter is used in default argument declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5899" name="note_deprecated_this_capture">
        <segment state="initial">
          <source>add an explicit capture of 'this' to capture '*this' by reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5900" name="note_designated_init_mixed">
        <segment state="initial">
          <source>first non-designated initializer is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5901" name="note_destructor_nontype_here">
        <segment state="initial">
          <source>non-type declaration found by destructor name lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5902" name="note_destructor_type_here">
        <segment state="initial">
          <source>type %0 found by destructor name lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5903" name="note_direct_member_here">
        <segment state="initial">
          <source>direct member declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5904" name="note_direct_method_declared_at">
        <segment state="initial">
          <source>direct method %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5905" name="note_due_to_dllexported_class">
        <segment state="initial">
          <source>due to %0 being dllexported%select{|; try compiling in C++11 mode}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5906" name="note_duplicate_asm_operand_name">
        <segment state="initial">
          <source>asm operand name "%0" first referenced here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5907" name="note_duplicate_element">
        <segment state="initial">
          <source>element %0 also has value %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5908" name="note_empty_body_on_separate_line">
        <segment state="initial">
          <source>put the semicolon on a separate line to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5909" name="note_empty_parens_default_ctor">
        <segment state="initial">
          <source>remove parentheses to declare a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5910" name="note_empty_parens_function_call">
        <segment state="initial">
          <source>change this ',' to a ';' to call %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5911" name="note_empty_parens_zero_initialize">
        <segment state="initial">
          <source>replace parentheses with an initializer to declare a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5912" name="note_empty_using_if_exists_here">
        <segment state="initial">
          <source>using declaration annotated with 'using_if_exists' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5913" name="note_enforce_read_only_placement">
        <segment state="initial">
          <source>type was declared read-only here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5914" name="note_enters_block_captures_cxx_obj">
        <segment state="initial">
          <source>jump enters lifetime of block which captures a destructible C++ object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5915" name="note_enters_block_captures_non_trivial_c_struct">
        <segment state="initial">
          <source>jump enters lifetime of block which captures a C struct that is non-trivial to destroy</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5916" name="note_enters_block_captures_strong">
        <segment state="initial">
          <source>jump enters lifetime of block which strongly captures a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5917" name="note_enters_block_captures_weak">
        <segment state="initial">
          <source>jump enters lifetime of block which weakly captures a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5918" name="note_enters_compound_literal_scope">
        <segment state="initial">
          <source>jump enters lifetime of a compound literal that is non-trivial to destruct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5919" name="note_enters_statement_expression">
        <segment state="initial">
          <source>jump enters a statement expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5920" name="note_entity_declared_at">
        <segment state="initial">
          <source>%0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5921" name="note_enum_friend">
        <segment state="initial">
          <source>remove 'enum%select{| struct| class}0' to befriend an enum</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5922" name="note_enum_specialized_here">
        <segment state="initial">
          <source>enum %0 was explicitly specialized here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5923" name="note_equality_comparison_silence">
        <segment state="initial">
          <source>remove extraneous parentheses around the comparison to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5924" name="note_equality_comparison_to_assign">
        <segment state="initial">
          <source>use '=' to turn this equality comparison into an assignment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5925" name="note_equivalent_internal_linkage_decl">
        <segment state="initial">
          <source>declared here%select{ in module '%1'|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5926" name="note_evaluate_comparison_first">
        <segment state="initial">
          <source>place parentheses around comparison expression to evaluate it first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5927" name="note_evaluating_exception_spec_here">
        <segment state="initial">
          <source>in evaluation of exception specification for %q0 needed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5928" name="note_exits___block">
        <segment state="initial">
          <source>jump exits scope of __block variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5929" name="note_exits_block_captures_cxx_obj">
        <segment state="initial">
          <source>jump exits lifetime of block which captures a destructible C++ object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5930" name="note_exits_block_captures_non_trivial_c_struct">
        <segment state="initial">
          <source>jump exits lifetime of block which captures a C struct that is non-trivial to destroy</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5931" name="note_exits_block_captures_strong">
        <segment state="initial">
          <source>jump exits lifetime of block which strongly captures a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5932" name="note_exits_block_captures_weak">
        <segment state="initial">
          <source>jump exits lifetime of block which weakly captures a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5933" name="note_exits_cleanup">
        <segment state="initial">
          <source>jump exits scope of variable with __attribute__((cleanup))</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5934" name="note_exits_compound_literal_scope">
        <segment state="initial">
          <source>jump exits lifetime of a compound literal that is non-trivial to destruct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5935" name="note_exits_cxx_catch">
        <segment state="initial">
          <source>jump exits catch block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5936" name="note_exits_cxx_try">
        <segment state="initial">
          <source>jump exits try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5937" name="note_exits_dtor">
        <segment state="initial">
          <source>jump exits scope of variable with non-trivial destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5938" name="note_exits_objc_autoreleasepool">
        <segment state="initial">
          <source>jump exits autoreleasepool block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5939" name="note_exits_objc_catch">
        <segment state="initial">
          <source>jump exits @catch block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5940" name="note_exits_objc_finally">
        <segment state="initial">
          <source>jump exits @finally block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5941" name="note_exits_objc_strong">
        <segment state="initial">
          <source>jump exits scope of __strong variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5942" name="note_exits_objc_synchronized">
        <segment state="initial">
          <source>jump exits @synchronized block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5943" name="note_exits_objc_try">
        <segment state="initial">
          <source>jump exits @try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5944" name="note_exits_objc_weak">
        <segment state="initial">
          <source>jump exits scope of __weak variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5945" name="note_exits_seh_except">
        <segment state="initial">
          <source>jump exits __except block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5946" name="note_exits_seh_finally">
        <segment state="initial">
          <source>jump exits __finally block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5947" name="note_exits_seh_try">
        <segment state="initial">
          <source>jump exits __try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5948" name="note_exits_temporary_dtor">
        <segment state="initial">
          <source>jump exits scope of lifetime-extended temporary with non-trivial destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5949" name="note_explicit_ctor_deduction_guide_here">
        <segment state="initial">
          <source>explicit %select{constructor|deduction guide}0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5950" name="note_explicit_instantiation_candidate">
        <segment state="initial">
          <source>explicit instantiation candidate function %q0 template here %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5951" name="note_explicit_instantiation_definition_here">
        <segment state="initial">
          <source>explicit instantiation definition is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5952" name="note_explicit_instantiation_here">
        <segment state="initial">
          <source>explicit instantiation refers here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5953" name="note_explicit_template_arg_substitution_here">
        <segment state="initial">
          <source>while substituting explicitly-specified template arguments into function template %0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5954" name="note_explicit_template_spec_does_not_need_header">
        <segment state="initial">
          <source>'template&lt;&gt;' header not required for explicitly-specialized class %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5955" name="note_export">
        <segment state="initial">
          <source>export block begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5956" name="note_expr_evaluates_to">
        <segment state="initial">
          <source>expression evaluates to '%0 %1 %2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5957" name="note_expr_requirement_constraints_not_satisfied">
        <segment state="initial">
          <source>%select{and|because}0 type constraint %1 was not satisfied:</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5958" name="note_expr_requirement_constraints_not_satisfied_simple">
        <segment state="initial">
          <source>%select{and|because}0 %1 does not satisfy %2:</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5959" name="note_expr_requirement_expr_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid: %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5960" name="note_expr_requirement_expr_unknown_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5961" name="note_expr_requirement_noexcept_not_met">
        <segment state="initial">
          <source>%select{and|because}0 %1 may throw an exception</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5962" name="note_expr_requirement_type_requirement_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid: %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5963" name="note_expr_requirement_type_requirement_unknown_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5964" name="note_extern_c_begins_here">
        <segment state="initial">
          <source>extern "C" language linkage specification begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5965" name="note_extern_c_global_conflict">
        <segment state="initial">
          <source>declared %select{in global scope|with C language linkage}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5966" name="note_fallthrough_insert_semi_fixit">
        <segment state="initial">
          <source>did you forget ';'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5967" name="note_field_designator_found">
        <segment state="initial">
          <source>field designator refers here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5968" name="note_final_dtor_non_final_class_silence">
        <segment state="initial">
          <source>mark %0 as '%select{final|sealed}1' to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5969" name="note_final_overrider">
        <segment state="initial">
          <source>final overrider of %q0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5970" name="note_flexible_array_counted_by_attr_field">
        <segment state="initial">
          <source>field %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5971" name="note_flexible_array_member">
        <segment state="initial">
          <source>initialized flexible array member %0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5972" name="note_for_range_begin_end">
        <segment state="initial">
          <source>selected '%select{begin|end}0' %select{function|template }1%2 with iterator type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5973" name="note_for_range_invalid_iterator">
        <segment state="initial">
          <source>in implicit call to 'operator%select{!=|*|++}0' for iterator of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5974" name="note_for_range_member_begin_end_ignored">
        <segment state="initial">
          <source>member is not a candidate because range type %0 has no '%select{end|begin}1' member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5975" name="note_format_cmp_with">
        <segment state="initial">
          <source>comparing with this %select{specifier|format string}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5976" name="note_format_fix_specifier">
        <segment state="initial">
          <source>did you mean to use '%0'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5977" name="note_format_security_fixit">
        <segment state="initial">
          <source>treat the string as an argument to avoid this</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5978" name="note_format_string_defined">
        <segment state="initial">
          <source>format string is defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5979" name="note_forward_class">
        <segment state="initial">
          <source>forward declaration of class here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5980" name="note_forward_class_conversion">
        <segment state="initial">
          <source>%0 is not defined, but forward declared here; conversion would be valid if it was derived from %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5981" name="note_forward_template_decl">
        <segment state="initial">
          <source>forward declaration of template entity is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5982" name="note_found_mutex_near_match">
        <segment state="initial">
          <source>found near match '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5983" name="note_from_diagnose_if">
        <segment state="initial">
          <source>from 'diagnose_if' attribute on %0:</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5984" name="note_func_effect_call_disallows_inference">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block}0 does not permit inference of '%1' because it is declared '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5985" name="note_func_effect_call_extern">
        <segment state="initial">
          <source>declaration cannot be inferred '%0' because it has no definition in this translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5986" name="note_func_effect_call_indirect">
        <segment state="initial">
          <source>%select{virtual method|function pointer}0 cannot be inferred '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5987" name="note_func_effect_calls_func_without_effect">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block|member initializer}0 cannot be inferred '%1' because it calls non-'%1' %select{function|constructor|destructor|lambda|block}2 '%3'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5988" name="note_func_effect_from_template">
        <segment state="initial">
          <source>in template expansion here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5989" name="note_func_effect_in_constructor">
        <segment state="initial">
          <source>in%select{| implicit}0 constructor here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5990" name="note_func_effect_violation">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block|member initializer}0 cannot be inferred '%1' because it %select{allocates or deallocates memory|throws or catches exceptions|has a static local variable|uses a thread-local variable|accesses an ObjC method or property}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5991" name="note_function_member_spec_matched">
        <segment state="initial">
          <source>member function specialization matches %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5992" name="note_function_style_cast_add_parentheses">
        <segment state="initial">
          <source>add enclosing parentheses to perform a function-style cast</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5993" name="note_function_suggestion">
        <segment state="initial">
          <source>did you mean %0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5994" name="note_function_template_deduction_instantiation_here">
        <segment state="initial">
          <source>while substituting deduced template arguments into function template %0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5995" name="note_function_template_spec_here">
        <segment state="initial">
          <source>in instantiation of function template specialization %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5996" name="note_function_template_spec_matched">
        <segment state="initial">
          <source>function template %q0 matches specialization %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5997" name="note_function_to_function_call">
        <segment state="initial">
          <source>suffix with parentheses to turn this into a function call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5998" name="note_function_warning_silence">
        <segment state="initial">
          <source>prefix with the address-of operator to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="5999" name="note_getter_unavailable">
        <segment state="initial">
          <source>or because setter is declared here, but no getter method %0 is found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6000" name="note_global_module_introducer_missing">
        <segment state="initial">
          <source>add 'module;' to the start of the file to introduce a global module fragment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6001" name="note_goto_ms_asm_label">
        <segment state="initial">
          <source>inline assembly label %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6002" name="note_guarded_by_declared_here">
        <segment state="initial">
          <source>guarded_by declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6003" name="note_hidden_overloaded_virtual_declared_here">
        <segment state="initial">
          <source>hidden overloaded virtual function %q0 declared here%select{|: different classes%diff{ ($ vs $)|}2,3|: different number of parameters (%2 vs %3)|: type mismatch at %ordinal2 parameter%diff{ ($ vs $)|}3,4|: different return type%diff{ ($ vs $)|}2,3|: different qualifiers (%2 vs %3)|: different exception specifications}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6004" name="note_hidden_tag">
        <segment state="initial">
          <source>type declaration hidden</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6005" name="note_hiding_object">
        <segment state="initial">
          <source>declaration hides type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6006" name="note_ice_conversion_here">
        <segment state="initial">
          <source>conversion to %select{integral|enumeration}0 type %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6007" name="note_illegal_field_declared_here">
        <segment state="initial">
          <source>field of illegal %select{type|pointer type}0 %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6008" name="note_immediate_function_reason">
        <segment state="initial">
          <source>%0 is an immediate %select{function|constructor}5 because %select{its body|the%select{| default}7 initializer of %8}6 %select{evaluates the address of %select{an immediate|a consteval}2 function %1|contains a call to %select{an immediate|a consteval}2 %select{function|constructor}4 %1 and that call is not a constant expression}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6009" name="note_implementation_declared">
        <segment state="initial">
          <source>class implementation is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6010" name="note_implemented_by_class">
        <segment state="initial">
          <source>when implemented by class %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6011" name="note_implicit_deduction_guide">
        <segment state="initial">
          <source>implicit deduction guide declared as '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6012" name="note_implicit_delete_this_in_destructor_here">
        <segment state="initial">
          <source>while checking implicit 'delete this' for virtual destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6013" name="note_implicit_member_target_infer_collision">
        <segment state="initial">
          <source>implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 inferred target collision: call to both %select{__device__|__global__|__host__|__host__ __device__}1 and %select{__device__|__global__|__host__|__host__ __device__}2 members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6014" name="note_implicit_param_decl">
        <segment state="initial">
          <source>%0 is an implicit parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6015" name="note_implicitly_deleted">
        <segment state="initial">
          <source>explicitly defaulted function was implicitly deleted here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6016" name="note_in_binding_decl_init">
        <segment state="initial">
          <source>in implicit initialization of binding declaration %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6017" name="note_in_class_initializer_float_type_cxx11">
        <segment state="initial">
          <source>add 'constexpr'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6018" name="note_in_declaration_of_implicit_equality_comparison">
        <segment state="initial">
          <source>while declaring the corresponding implicit 'operator==' for this defaulted 'operator&lt;=&gt;'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6019" name="note_in_declaration_of_implicit_special_member">
        <segment state="initial">
          <source>while declaring the implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6020" name="note_in_evaluating_default_argument">
        <segment state="initial">
          <source>in evaluating default argument here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6021" name="note_in_for_range">
        <segment state="initial">
          <source>when looking up '%select{begin|end}0' function for range expression of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6022" name="note_in_omitted_aggregate_initializer">
        <segment state="initial">
          <source>in implicit initialization of %select{array element %1 with omitted initializer|field %1 with omitted initializer|trailing array elements in runtime-sized array new}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6023" name="note_in_reference_temporary_list_initializer">
        <segment state="initial">
          <source>in initialization of temporary of type %0 created to list-initialize this reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6024" name="note_include_header_or_declare">
        <segment state="initial">
          <source>include the header &lt;%0&gt; or explicitly provide a declaration for '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6025" name="note_incomplete_class_and_qualified_id">
        <segment state="initial">
          <source>conformance of forward class %0 to protocol %1 cannot be confirmed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6026" name="note_indirect_goto_target">
        <segment state="initial">
          <source>possible target of %select{indirect|asm}0 goto statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6027" name="note_indirection_through_null">
        <segment state="initial">
          <source>consider using __builtin_trap() or qualifying pointer with 'volatile'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6028" name="note_inequality_comparison_to_or_assign">
        <segment state="initial">
          <source>use '|=' to turn this inequality comparison into an or-assignment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6029" name="note_init_list_narrowing_silence">
        <segment state="initial">
          <source>insert an explicit cast to silence this issue</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6030" name="note_init_with_default_argument">
        <segment state="initial">
          <source>initializing parameter %0 with default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6031" name="note_init_with_default_member_initializer">
        <segment state="initial">
          <source>initializing field %0 with default member initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6032" name="note_initializer_out_of_order">
        <segment state="initial">
          <source>%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6033" name="note_insert_break_fixit">
        <segment state="initial">
          <source>insert 'break;' to avoid fall-through</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6034" name="note_insert_fallthrough_fixit">
        <segment state="initial">
          <source>insert '%0;' to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6035" name="note_inst_declaration_hint">
        <segment state="initial">
          <source>add an explicit instantiation declaration to suppress this warning if %q0 is explicitly instantiated in another translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6036" name="note_instantiation_contexts_suppressed">
        <segment state="initial">
          <source>(skipping %0 context%s0 in backtrace; use -ftemplate-backtrace-limit=0 to see all)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6037" name="note_instantiation_required_here">
        <segment state="initial">
          <source>%select{implicit|explicit}0 instantiation first required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6038" name="note_invalid_consteval_initializer">
        <segment state="initial">
          <source>in the default initializer of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6039" name="note_invalid_consteval_initializer_here">
        <segment state="initial">
          <source>initialized here %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6040" name="note_is_deducible_constraint_evaluated_to_false">
        <segment state="initial">
          <source>cannot deduce template arguments for %0 from %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6041" name="note_it_delegates_to">
        <segment state="initial">
          <source>it delegates to</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6042" name="note_ivar_decl">
        <segment state="initial">
          <source>instance variable is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6043" name="note_lambda_capture_initializer">
        <segment state="initial">
          <source>%select{implicitly |}2captured%select{| by reference}3%select{%select{ due to use|}2 here| via initialization of lambda capture %0}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6044" name="note_lambda_decl">
        <segment state="initial">
          <source>lambda expression begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6045" name="note_lambda_default_capture_fixit">
        <segment state="initial">
          <source>default capture by %select{value|reference}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6046" name="note_lambda_substitution_here">
        <segment state="initial">
          <source>while substituting into a lambda expression here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6047" name="note_lambda_this_capture_fixit">
        <segment state="initial">
          <source>explicitly capture 'this'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6048" name="note_lambda_to_block_conv">
        <segment state="initial">
          <source>implicit capture of lambda object due to conversion to block pointer here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6049" name="note_lambda_variable_capture_fixit">
        <segment state="initial">
          <source>capture %0 by %select{value|reference}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6050" name="note_lifetime_extending_member_declared_here">
        <segment state="initial">
          <source>%select{%select{reference|'std::initializer_list'}0 member|member with %select{reference|'std::initializer_list'}0 subobject}1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6051" name="note_local_decl_close_match">
        <segment state="initial">
          <source>local declaration nearly matches</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6052" name="note_local_decl_close_param_match">
        <segment state="initial">
          <source>type of %ordinal0 parameter of local declaration does not match definition%diff{ ($ vs $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6053" name="note_local_var_initializer">
        <segment state="initial">
          <source>%select{via initialization of|binding reference}0 variable %select{%2 |}1here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6054" name="note_lock_exclusive_and_shared">
        <segment state="initial">
          <source>the other acquisition of %0 '%1' is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6055" name="note_locked_here">
        <segment state="initial">
          <source>%0 acquired here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6056" name="note_logical_instead_of_bitwise_change_operator">
        <segment state="initial">
          <source>use '%0' for a bitwise operation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6057" name="note_logical_instead_of_bitwise_remove_constant">
        <segment state="initial">
          <source>remove constant to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6058" name="note_logical_not_fix">
        <segment state="initial">
          <source>add parentheses after the '!' to evaluate the %select{comparison|bitwise operator}0 first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6059" name="note_logical_not_silence_with_parens">
        <segment state="initial">
          <source>add parentheses around left hand side expression to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6060" name="note_loop_iteration_here">
        <segment state="initial">
          <source>%select{decremented|incremented}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6061" name="note_main_change_return_type">
        <segment state="initial">
          <source>change return type to 'int'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6062" name="note_main_remove_noreturn">
        <segment state="initial">
          <source>remove '_Noreturn'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6063" name="note_managed_mismatch_here_for_param">
        <segment state="initial">
          <source>see attribute on parameter here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6064" name="note_marked_here">
        <segment state="initial">
          <source>marked %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6065" name="note_member_declared_at">
        <segment state="initial">
          <source>member is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6066" name="note_member_declared_here">
        <segment state="initial">
          <source>member %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6067" name="note_member_def_close_const_match">
        <segment state="initial">
          <source>member declaration does not match because it %select{is|is not}0 const qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6068" name="note_member_def_close_match">
        <segment state="initial">
          <source>member declaration nearly matches</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6069" name="note_member_def_close_param_match">
        <segment state="initial">
          <source>type of %ordinal0 parameter of member declaration does not match definition%diff{ ($ vs $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6070" name="note_member_first_declared_here">
        <segment state="initial">
          <source>member %0 first declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6071" name="note_member_reference_arrow_from_operator_arrow">
        <segment state="initial">
          <source>'-&gt;' applied to return value of the operator-&gt;() declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6072" name="note_member_synthesized_at">
        <segment state="initial">
          <source>in %select{implicit|defaulted}0 %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %2 first required here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6073" name="note_memsize_comparison_cast_silence">
        <segment state="initial">
          <source>explicitly cast the argument to size_t to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6074" name="note_memsize_comparison_paren">
        <segment state="initial">
          <source>did you mean to compare the result of %0 instead?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6075" name="note_method_declared_at">
        <segment state="initial">
          <source>method %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6076" name="note_method_return_type_change">
        <segment state="initial">
          <source>compiler has implicitly changed method %0 return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6077" name="note_method_sent_forward_class">
        <segment state="initial">
          <source>method %0 is used for the forward class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6078" name="note_misaligned_member_used_here">
        <segment state="initial">
          <source>passing byval argument %0 with potentially incompatible alignment here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6079" name="note_module_import_not_at_top_level">
        <segment state="initial">
          <source>%0 begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6080" name="note_ms_bitfield_mismatched_storage_size_previous">
        <segment state="initial">
          <source>preceding bit-field %0 declared here with type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6081" name="note_multiversioning_caused_here">
        <segment state="initial">
          <source>function multiversioning caused by this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6082" name="note_musttail_callconv_mismatch">
        <segment state="initial">
          <source>target function has calling convention %1 (expected %0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6083" name="note_musttail_callee_defined_here">
        <segment state="initial">
          <source>%0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6084" name="note_musttail_disabled_by_not_tail_called">
        <segment state="initial">
          <source>'not_tail_called' attribute prevents being called as a tail call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6085" name="note_musttail_fix_non_prototype">
        <segment state="initial">
          <source>add 'void' to the parameter list to turn an old-style K&amp;R function declaration into a prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6086" name="note_musttail_mismatch">
        <segment state="initial">
          <source>target function %select{is a member of different class%diff{ (expected $ but has $)|}1,2|has different number of parameters (expected %1 but has %2)|has type mismatch at %ordinal3 parameter%diff{ (expected $ but has $)|}1,2|has different return type%diff{ ($ expected but has $)|}1,2}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6087" name="note_musttail_structors_forbidden">
        <segment state="initial">
          <source>target %select{constructor|destructor}0 is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6088" name="note_namespace_defined_here">
        <segment state="initial">
          <source>namespace %0 defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6089" name="note_namespace_using_decl">
        <segment state="initial">
          <source>did you mean 'using namespace'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6090" name="note_neon_vector_initializer_non_portable">
        <segment state="initial">
          <source>consider using vld1_%0%1() to initialize a vector from memory, or vcreate_%0%1() to initialize from an integer constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6091" name="note_neon_vector_initializer_non_portable_q">
        <segment state="initial">
          <source>consider using vld1q_%0%1() to initialize a vector from memory, or vcombine_%0%1(vcreate_%0%1(), vcreate_%0%1()) to initialize from integer constants</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6092" name="note_nested_requirement_here">
        <segment state="initial">
          <source>while checking the satisfaction of nested requirement requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6093" name="note_nested_requirement_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid%2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6094" name="note_nested_requirement_unknown_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6095" name="note_next_field_declaration">
        <segment state="initial">
          <source>next field declaration is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6096" name="note_next_ivar_declaration">
        <segment state="initial">
          <source>next %select{instance variable declaration|synthesized instance variable}0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6097" name="note_non_c_like_anon_struct">
        <segment state="initial">
          <source>type is not C-compatible due to this %select{base class|default member initializer|lambda expression|friend declaration|member declaration}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6098" name="note_non_deducible_parameter">
        <segment state="initial">
          <source>non-deducible template parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6099" name="note_non_instantiated_member_here">
        <segment state="initial">
          <source>not-yet-instantiated member is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6100" name="note_non_literal_base_class">
        <segment state="initial">
          <source>%0 is not literal because it has base class %1 of non-literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6101" name="note_non_literal_field">
        <segment state="initial">
          <source>%0 is not literal because it has data member %1 of %select{non-literal|volatile}3 type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6102" name="note_non_literal_incomplete">
        <segment state="initial">
          <source>incomplete type %0 is not a literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6103" name="note_non_literal_lambda">
        <segment state="initial">
          <source>lambda closure types are non-literal types before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6104" name="note_non_literal_no_constexpr_ctors">
        <segment state="initial">
          <source>%0 is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6105" name="note_non_literal_non_constexpr_dtor">
        <segment state="initial">
          <source>%0 is not literal because its destructor is not constexpr</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6106" name="note_non_literal_nontrivial_dtor">
        <segment state="initial">
          <source>%0 is not literal because it has a non-trivial destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6107" name="note_non_literal_user_provided_dtor">
        <segment state="initial">
          <source>%0 is not literal because it has a user-provided destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6108" name="note_non_literal_virtual_base">
        <segment state="initial">
          <source>%select{struct|interface|class}0 with virtual base %plural{1:class|:classes}1 is not a literal type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6109" name="note_non_template_in_template_id_found">
        <segment state="initial">
          <source>non-template declaration found by name lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6110" name="note_non_trivial_c_union">
        <segment state="initial">
          <source>%select{%2 has subobjects that are|%3 has type %2 that is}0 non-trivial to %select{default-initialize|destruct|copy}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6111" name="note_non_usual_function_declared_here">
        <segment state="initial">
          <source>non-usual %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6112" name="note_nontemplate_decl_here">
        <segment state="initial">
          <source>non-templated declaration is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6113" name="note_nontrivial_default_arg">
        <segment state="initial">
          <source>because it has a default argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6114" name="note_nontrivial_default_member_init">
        <segment state="initial">
          <source>because field %0 has an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6115" name="note_nontrivial_field">
        <segment state="initial">
          <source>field is non-trivial to %select{copy|default-initialize}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6116" name="note_nontrivial_has_virtual">
        <segment state="initial">
          <source>because type %0 has a virtual %select{member function|base class}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6117" name="note_nontrivial_no_copy">
        <segment state="initial">
          <source>because no %select{&lt;&lt;ERROR&gt;&gt;|constructor|constructor|assignment operator|assignment operator|&lt;&lt;ERROR&gt;&gt;}2 can be used to %select{&lt;&lt;ERROR&gt;&gt;|copy|move|copy|move|&lt;&lt;ERROR&gt;&gt;}2 %select{base class|field|an object}0 of type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6118" name="note_nontrivial_no_def_ctor">
        <segment state="initial">
          <source>because %select{base class of |field of |}0type %1 has no default constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6119" name="note_nontrivial_objc_ownership">
        <segment state="initial">
          <source>because type %0 has a member with %select{no|no|__strong|__weak|__autoreleasing}1 ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6120" name="note_nontrivial_param_type">
        <segment state="initial">
          <source>because its parameter is %diff{of type $, not $|of the wrong type}2,3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6121" name="note_nontrivial_subobject">
        <segment state="initial">
          <source>because the function selected to %select{construct|copy|move|copy|move|destroy}2 %select{base class|field}0 of type %1 is not trivial</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6122" name="note_nontrivial_user_provided">
        <segment state="initial">
          <source>because %select{base class of |field of |}0type %1 has a user-provided %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6123" name="note_nontrivial_variadic">
        <segment state="initial">
          <source>because it is a variadic function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6124" name="note_nontrivial_virtual_dtor">
        <segment state="initial">
          <source>destructor for %0 is not trivial because it is virtual</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6125" name="note_not_found_by_two_phase_lookup">
        <segment state="initial">
          <source>%0 should be declared prior to the call site%select{| or in %2| or in an associated namespace of one of its arguments}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6126" name="note_not_module_interface_add_export">
        <segment state="initial">
          <source>add 'export' here if this is intended to be a module interface unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6127" name="note_not_structural_mutable_field">
        <segment state="initial">
          <source>%0 is not a structural type because it has a mutable non-static data member</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6128" name="note_not_structural_non_public">
        <segment state="initial">
          <source>%0 is not a structural type because it has a %select{non-static data member|base class}1 that is not public</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6129" name="note_not_structural_rvalue_ref_field">
        <segment state="initial">
          <source>%0 is not a structural type because it has a non-static data member of rvalue reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6130" name="note_not_structural_subobject">
        <segment state="initial">
          <source>%0 is not a structural type because it has a %select{non-static data member|base class}1 of non-structural type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6131" name="note_nsdictionary_duplicate_key_here">
        <segment state="initial">
          <source>previous equal key is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6132" name="note_nullability_fix_it">
        <segment state="initial">
          <source>insert '%select{_Nonnull|_Nullable|_Null_unspecified}0' if the %select{pointer|block pointer|member pointer|array parameter}1 %select{should never be null|may be null|should not declare nullability}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6133" name="note_nullability_here">
        <segment state="initial">
          <source>%0 specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6134" name="note_nullability_type_specifier">
        <segment state="initial">
          <source>use nullability type specifier %0 to affect the innermost pointer type of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6135" name="note_objc_circular_container_declared_here">
        <segment state="initial">
          <source>%0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6136" name="note_objc_designated_init_marked_here">
        <segment state="initial">
          <source>method marked as designated initializer of the class here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6137" name="note_objc_literal_comparison_isequal">
        <segment state="initial">
          <source>use 'isEqual:' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6138" name="note_objc_literal_method_param">
        <segment state="initial">
          <source>%select{first|second|third}0 parameter has unexpected type %1 (should be %2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6139" name="note_objc_literal_method_return">
        <segment state="initial">
          <source>method returns unexpected type %0 (should be an object type)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6140" name="note_objc_needs_superclass">
        <segment state="initial">
          <source>add a super class to fix this problem</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6141" name="note_objc_type_param_here">
        <segment state="initial">
          <source>type parameter %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6142" name="note_objc_unsafe_perform_selector_method_declared_here">
        <segment state="initial">
          <source>method %0 that returns %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6143" name="note_omp_atomic_capture">
        <segment state="initial">
          <source>%select{expected assignment expression|expected compound statement|expected exactly two expression statements|expected in right hand side of the first expression}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6144" name="note_omp_atomic_compare">
        <segment state="initial">
          <source>%select{expected compound statement|expected exactly one expression statement|expected assignment statement|expected conditional operator|expect result value to be at false expression|expect binary operator in conditional expression|expect '&lt;', '&gt;' or '==' as order operator|expect comparison in a form of 'x == e', 'e == x', 'x ordop expr', or 'expr ordop x'|expect lvalue for result value|expect scalar value|expect integer value|unexpected 'else' statement|expect '==' operator|expect an assignment statement 'v = x'|expect a 'if' statement|expect no more than two statements|expect a compound statement|expect 'else' statement|expect a form 'r = x == e; if (r) ...'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6145" name="note_omp_atomic_read_write">
        <segment state="initial">
          <source>%select{expected an expression statement|expected built-in assignment operator|expected expression of scalar type|expected lvalue expression}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6146" name="note_omp_atomic_update">
        <segment state="initial">
          <source>%select{expected an expression statement|expected built-in binary or unary operator|expected unary decrement/increment operation|expected expression of scalar type|expected assignment expression|expected built-in binary operator|expected one of '+', '*', '-', '/', '&amp;', '^', '%|', '&lt;&lt;', or '&gt;&gt;' built-in operations|expected in right hand side of expression}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6147" name="note_omp_collapse_ordered_expr">
        <segment state="initial">
          <source>as specified in %select{'collapse'|'ordered'|'collapse' and 'ordered'}0 clause%select{||s}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6148" name="note_omp_conversion_here">
        <segment state="initial">
          <source>conversion to %select{integral|enumeration}0 type %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6149" name="note_omp_critical_hint_here">
        <segment state="initial">
          <source>%select{|previous }0'hint' clause with value '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6150" name="note_omp_critical_no_hint">
        <segment state="initial">
          <source>%select{|previous }0directive with no 'hint' clause specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6151" name="note_omp_default_dsa_none">
        <segment state="initial">
          <source>explicit data sharing attribute requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6152" name="note_omp_defaultmap_attr_none">
        <segment state="initial">
          <source>explicit data sharing attribute, data mapping attribute, or is_device_ptr clause requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6153" name="note_omp_directive_here">
        <segment state="initial">
          <source>'%0' directive found here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6154" name="note_omp_exits_structured_block">
        <segment state="initial">
          <source>jump exits scope of OpenMP structured block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6155" name="note_omp_explicit_dsa">
        <segment state="initial">
          <source>defined as %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6156" name="note_omp_flush_order_clause_here">
        <segment state="initial">
          <source>memory order clause '%0' is specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6157" name="note_omp_implicit_dsa">
        <segment state="initial">
          <source>implicitly determined as %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6158" name="note_omp_invalid_length_on_this_ptr_mapping">
        <segment state="initial">
          <source>expected length on mapping of 'this' array section expression to be '1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6159" name="note_omp_invalid_lower_bound_on_this_ptr_mapping">
        <segment state="initial">
          <source>expected lower bound on mapping of 'this' array section expression to be '0' or not specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6160" name="note_omp_invalid_subscript_on_this_ptr_map">
        <segment state="initial">
          <source>expected 'this' subscript expression on map clause to be 'this[0]'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6161" name="note_omp_loop_cond_requires_compatible_incr">
        <segment state="initial">
          <source>loop step is expected to be %select{negative|positive}0 due to this condition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6162" name="note_omp_marked_declare_variant_here">
        <segment state="initial">
          <source>marked as 'declare variant' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6163" name="note_omp_marked_device_type_here">
        <segment state="initial">
          <source>marked as 'device_type(%0)' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6164" name="note_omp_nested_statement_here">
        <segment state="initial">
          <source>%select{statement|directive}0 outside teams construct here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6165" name="note_omp_nested_teams_construct_here">
        <segment state="initial">
          <source>nested teams construct here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6166" name="note_omp_nowait_clause_here">
        <segment state="initial">
          <source>'nowait' clause is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6167" name="note_omp_ordered_param">
        <segment state="initial">
          <source>'ordered' clause%select{| with specified parameter}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6168" name="note_omp_predefined_allocator">
        <segment state="initial">
          <source>predefined trait '%0' used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6169" name="note_omp_predetermined_dsa">
        <segment state="initial">
          <source>%select{static data member is predetermined as shared|variable with static storage duration is predetermined as shared|loop iteration variable is predetermined as private|loop iteration variable is predetermined as linear|loop iteration variable is predetermined as lastprivate|constant variable is predetermined as shared|global variable is predetermined as shared|non-shared variable in a task construct is predetermined as firstprivate|variable with automatic storage duration is predetermined as private}0%select{|; perhaps you forget to enclose 'omp %2' directive into a parallel or another task region?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6170" name="note_omp_previous_allocator">
        <segment state="initial">
          <source>previous allocator is specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6171" name="note_omp_previous_clause">
        <segment state="initial">
          <source>'%0' clause is specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6172" name="note_omp_previous_critical_region">
        <segment state="initial">
          <source>previous 'critical' region starts here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6173" name="note_omp_previous_directive">
        <segment state="initial">
          <source>previous '%0' directive used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6174" name="note_omp_previous_inscan_reduction">
        <segment state="initial">
          <source>'reduction' clause with 'inscan' modifier is used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6175" name="note_omp_previous_mem_order_clause">
        <segment state="initial">
          <source>'%0' clause used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6176" name="note_omp_previous_named_if_clause">
        <segment state="initial">
          <source>previous clause with directive name modifier specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6177" name="note_omp_previous_reduction_identifier">
        <segment state="initial">
          <source>previously marked as task_reduction with different reduction operation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6178" name="note_omp_protected_structured_block">
        <segment state="initial">
          <source>jump bypasses OpenMP structured block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6179" name="note_omp_referenced">
        <segment state="initial">
          <source>previously referenced here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6180" name="note_omp_requires_encountered_directive">
        <segment state="initial">
          <source>'%0' previously encountered here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6181" name="note_omp_requires_previous_clause">
        <segment state="initial">
          <source>%0 clause previously used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6182" name="note_omp_task_predetermined_firstprivate_here">
        <segment state="initial">
          <source>predetermined as a firstprivate in a task construct here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6183" name="note_opencl_typedef_access_qualifier">
        <segment state="initial">
          <source>previously declared '%0' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6184" name="note_operator_arrow_depth">
        <segment state="initial">
          <source>use -foperator-arrow-depth=N to increase 'operator-&gt;' limit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6185" name="note_operator_arrow_here">
        <segment state="initial">
          <source>'operator-&gt;' declared here produces an object of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6186" name="note_operator_arrows_suppressed">
        <segment state="initial">
          <source>(skipping %0 'operator-&gt;'%s0 in backtrace)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6187" name="note_overridden_marked_noescape">
        <segment state="initial">
          <source>parameter of overridden method is annotated with __attribute__((noescape))</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6188" name="note_overridden_method">
        <segment state="initial">
          <source>overridden method is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6189" name="note_overridden_virtual_function">
        <segment state="initial">
          <source>overridden virtual function is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6190" name="note_ovl_ambiguous_eqeq_reversed_self_non_const">
        <segment state="initial">
          <source>mark 'operator==' as const or add a matching 'operator!=' to resolve the ambiguity</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6191" name="note_ovl_ambiguous_oper_binary_reversed_candidate">
        <segment state="initial">
          <source>ambiguous candidate function with reversed arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6192" name="note_ovl_ambiguous_oper_binary_reversed_self">
        <segment state="initial">
          <source>ambiguity is between a regular call to this operator and a call with the argument order reversed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6193" name="note_ovl_ambiguous_oper_binary_selected_candidate">
        <segment state="initial">
          <source>candidate function with non-reversed arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6194" name="note_ovl_builtin_candidate">
        <segment state="initial">
          <source>built-in candidate %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6195" name="note_ovl_candidate">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %3}1%select{| has different class%diff{ (expected $ but has $)|}5,6| has different number of parameters (expected %5 but has %6)| has type mismatch at %ordinal5 parameter%diff{ (expected $ but has $)|}6,7| has different return type%diff{ ($ expected but has $)|}5,6| has different qualifiers (expected %5 but found %6)| has different exception specification}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6196" name="note_ovl_candidate_arity">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: requires%select{ at least| at most|}3 %4 %select{|non-object }6argument%s4, but %5 %plural{1:was|:were}5 provided</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6197" name="note_ovl_candidate_arity_one">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %select{requires at least|allows at most single|requires single}3 %select{|non-object }6argument %4, but %plural{0:no|:%5}5 arguments were provided</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6198" name="note_ovl_candidate_bad_addrspace">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{pass pointer to|bind reference in}5 %3 %select{as a pointer to|to object in}5 %4 in %ordinal6 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6199" name="note_ovl_candidate_bad_addrspace_this">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' object is in %3, but method expects object in %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6200" name="note_ovl_candidate_bad_arc_conv">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: cannot implicitly convert argument %diff{of type $ to $|type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5 under ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6201" name="note_ovl_candidate_bad_base_to_derived_conv">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{convert from|convert from|bind}3 %select{base class pointer|superclass|base class object of type}3 %4 to %select{derived class pointer|subclass|derived class reference}3 %5 for %ordinal6 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6202" name="note_ovl_candidate_bad_conv">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: no known conversion %diff{from $ to $|from argument type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &amp;|; remove *|; remove &amp;}7</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6203" name="note_ovl_candidate_bad_conv_incomplete">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: cannot convert argument of incomplete type %diff{$ to $|to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &amp;|; remove *|; remove &amp;}7</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6204" name="note_ovl_candidate_bad_cvr">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal5 argument (%3) would lose %select{const|restrict|const and restrict|volatile|const and volatile|volatile and restrict|const, volatile, and restrict}4 qualifier%select{||s||s|s|s}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6205" name="note_ovl_candidate_bad_cvr_this">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' argument has type %3, but method is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6206" name="note_ovl_candidate_bad_deduction">
        <segment state="initial">
          <source>candidate template ignored: failed template argument deduction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6207" name="note_ovl_candidate_bad_gc">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__weak|__strong}4 ownership, but parameter has %select{no|__weak|__strong}5 ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6208" name="note_ovl_candidate_bad_list_argument">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %select{cannot convert initializer list|too few initializers in list|too many initializers in list}7 argument to %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6209" name="note_ovl_candidate_bad_overload">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: no overload of %4 matching %3 for %ordinal5 argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6210" name="note_ovl_candidate_bad_ownership">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}4 ownership, but parameter has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}5 ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6211" name="note_ovl_candidate_bad_ptrauth">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal8 argument (%3) has %select{no '__ptrauth'|%5}4 qualifier, but parameter has %select{no '__ptrauth'|%7}6 qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6212" name="note_ovl_candidate_bad_target">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: call to %select{__device__|__global__|__host__|__host__ __device__|invalid}3 function from %select{__device__|__global__|__host__|__host__ __device__|invalid}4 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6213" name="note_ovl_candidate_bad_value_category">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: expects an %select{lvalue|rvalue}5 for %select{%ordinal4 argument|object argument}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6214" name="note_ovl_candidate_constraints_not_satisfied">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 not viable: constraints not satisfied</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6215" name="note_ovl_candidate_deduced_mismatch">
        <segment state="initial">
          <source>candidate template ignored: deduced type %diff{$ of %select{|element of }4%ordinal0 parameter does not match adjusted type $ of %select{|element of }4argument|of %select{|element of }4%ordinal0 parameter does not match adjusted type of %select{|element of }4argument}1,2%3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6216" name="note_ovl_candidate_deleted">
        <segment state="initial">
          <source>candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator&lt;=&gt;)'|inherited constructor}0%select{| template| %2}1 has been %select{explicitly made unavailable|explicitly deleted|implicitly deleted}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6217" name="note_ovl_candidate_disabled_by_enable_if">
        <segment state="initial">
          <source>candidate template ignored: disabled by %0%1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6218" name="note_ovl_candidate_disabled_by_function_cond_attr">
        <segment state="initial">
          <source>candidate disabled: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6219" name="note_ovl_candidate_disabled_by_requirement">
        <segment state="initial">
          <source>candidate template ignored: requirement '%0' was not satisfied%1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6220" name="note_ovl_candidate_explicit">
        <segment state="initial">
          <source>explicit %select{constructor|conversion function|deduction guide}0 is not a candidate%select{| (explicit specifier evaluates to true)}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6221" name="note_ovl_candidate_explicit_arg_mismatch_named">
        <segment state="initial">
          <source>candidate template ignored: invalid explicitly-specified argument for template parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6222" name="note_ovl_candidate_explicit_arg_mismatch_unnamed">
        <segment state="initial">
          <source>candidate template ignored: invalid explicitly-specified argument for %ordinal0 template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6223" name="note_ovl_candidate_has_pass_object_size_params">
        <segment state="initial">
          <source>candidate address cannot be taken because parameter %0 has pass_object_size attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6224" name="note_ovl_candidate_illegal_constructor">
        <segment state="initial">
          <source>candidate %select{constructor|template}0 ignored: instantiation %select{takes|would take}0 its own class type by value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6225" name="note_ovl_candidate_illegal_constructor_adrspace_mismatch">
        <segment state="initial">
          <source>candidate constructor ignored: cannot be used to construct an object in address space %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6226" name="note_ovl_candidate_incomplete_deduction">
        <segment state="initial">
          <source>candidate template ignored: couldn't infer template argument %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6227" name="note_ovl_candidate_incomplete_deduction_pack">
        <segment state="initial">
          <source>candidate template ignored: deduced too few arguments for expanded pack %0; no argument for %ordinal1 expanded parameter in deduced argument pack %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6228" name="note_ovl_candidate_inconsistent_deduction">
        <segment state="initial">
          <source>candidate template ignored: deduced %select{conflicting types|conflicting values|conflicting templates|packs of different lengths}0 for parameter %1%diff{ ($ vs. $)|}2,3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6229" name="note_ovl_candidate_inconsistent_deduction_types">
        <segment state="initial">
          <source>candidate template ignored: deduced values %diff{of conflicting types for parameter %0 (%1 of type $ vs. %3 of type $)|%1 and %3 of conflicting types for parameter %0}2,4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6230" name="note_ovl_candidate_inherited_constructor">
        <segment state="initial">
          <source>constructor from base class %0 inherited here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6231" name="note_ovl_candidate_inherited_constructor_slice">
        <segment state="initial">
          <source>candidate %select{constructor|template}0 ignored: inherited constructor cannot be used to %select{copy|move}1 object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6232" name="note_ovl_candidate_instantiation_depth">
        <segment state="initial">
          <source>candidate template ignored: substitution exceeded maximum template instantiation depth</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6233" name="note_ovl_candidate_non_deduced_mismatch">
        <segment state="initial">
          <source>candidate template ignored: could not match %diff{$ against $|types}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6234" name="note_ovl_candidate_non_deduced_mismatch_qualified">
        <segment state="initial">
          <source>candidate template ignored: could not match %q0 against %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6235" name="note_ovl_candidate_substitution_failure">
        <segment state="initial">
          <source>candidate template ignored: substitution failure%0%1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6236" name="note_ovl_candidate_underqualified">
        <segment state="initial">
          <source>candidate template ignored: cannot deduce a type for %0 that would make %2 equal %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6237" name="note_ovl_candidate_unsatisfied_constraints">
        <segment state="initial">
          <source>candidate template ignored: constraints not satisfied%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6238" name="note_ovl_surrogate_cand">
        <segment state="initial">
          <source>conversion candidate of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6239" name="note_ovl_surrogate_constraints_not_satisfied">
        <segment state="initial">
          <source>conversion candidate %0 not viable: constraints not satisfied</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6240" name="note_ovl_too_many_candidates">
        <segment state="initial">
          <source>remaining %0 candidate%s0 omitted; pass -fshow-overloads=all to show them</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6241" name="note_ownership_returns_index_mismatch">
        <segment state="initial">
          <source>declared with index %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6242" name="note_ownership_takes_class_mismatch">
        <segment state="initial">
          <source>declared with class '%0' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6243" name="note_parameter_here">
        <segment state="initial">
          <source>passing argument to parameter here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6244" name="note_parameter_mapping_substitution_here">
        <segment state="initial">
          <source>while substituting into concept arguments here; substitution failures not allowed in concept arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6245" name="note_parameter_named_here">
        <segment state="initial">
          <source>passing argument to parameter %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6246" name="note_parameter_pack_here">
        <segment state="initial">
          <source>parameter pack %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6247" name="note_parameter_type">
        <segment state="initial">
          <source>parameter of type %0 is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6248" name="note_partial_availability_specified_here">
        <segment state="initial">
          <source>%0 has been marked as being introduced in %1 %2 %select{|in %5 environment }4here, but the deployment target is %1 %3%select{| %6 environment }4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6249" name="note_partial_spec_match">
        <segment state="initial">
          <source>partial specialization matches %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6250" name="note_partial_spec_not_more_specialized_than_primary">
        <segment state="initial">
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6251" name="note_performs_forbidden_arc_conversion">
        <segment state="initial">
          <source>inline function performs a conversion which is forbidden in ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6252" name="note_pointer_declared_here">
        <segment state="initial">
          <source>pointer %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6253" name="note_possible_target_of_call">
        <segment state="initial">
          <source>possible target for call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6254" name="note_pragma_attribute_applied_decl_here">
        <segment state="initial">
          <source>when applied to this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6255" name="note_pragma_attribute_region_ends_here">
        <segment state="initial">
          <source>'#pragma clang attribute push' regions ends here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6256" name="note_pragma_pack_here">
        <segment state="initial">
          <source>previous '#pragma pack' directive that modifies alignment is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6257" name="note_pragma_pack_pop_instead_reset">
        <segment state="initial">
          <source>did you intend to use '#pragma pack (pop)' instead of '#pragma pack()'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6258" name="note_precedence_bitwise_first">
        <segment state="initial">
          <source>place parentheses around the %0 expression to evaluate it first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6259" name="note_precedence_conditional_first">
        <segment state="initial">
          <source>place parentheses around the '?:' expression to evaluate it first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6260" name="note_precedence_silence">
        <segment state="initial">
          <source>place parentheses around the %quoted0 expression to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6261" name="note_prev_module_declaration">
        <segment state="initial">
          <source>previous module declaration is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6262" name="note_prev_module_definition">
        <segment state="initial">
          <source>previously defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6263" name="note_prev_module_definition_from_ast_file">
        <segment state="initial">
          <source>module loaded from '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6264" name="note_prev_partial_spec_here">
        <segment state="initial">
          <source>previous declaration of class template partial specialization %0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6265" name="note_previous_access_declaration">
        <segment state="initial">
          <source>previously declared '%1' here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6266" name="note_previous_attribute">
        <segment state="initial">
          <source>previous attribute is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6267" name="note_previous_builtin_declaration">
        <segment state="initial">
          <source>%0 is a builtin with type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6268" name="note_previous_decl">
        <segment state="initial">
          <source>%0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6269" name="note_previous_declaration_as">
        <segment state="initial">
          <source>previously declared as %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6270" name="note_previous_exception_handler">
        <segment state="initial">
          <source>for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6271" name="note_previous_explicit_instantiation">
        <segment state="initial">
          <source>previous explicit instantiation is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6272" name="note_previous_field_init">
        <segment state="initial">
          <source>previous initialization for field %0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6273" name="note_previous_initializer">
        <segment state="initial">
          <source>previous initialization %select{|with side effects }0is here%select{| (side effects will not occur at run time)}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6274" name="note_previous_ms_inheritance">
        <segment state="initial">
          <source>previous inheritance model specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6275" name="note_previous_namespace_alias">
        <segment state="initial">
          <source>previously defined as an alias for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6276" name="note_previous_template_specialization">
        <segment state="initial">
          <source>previous template specialization is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6277" name="note_previous_uuid">
        <segment state="initial">
          <source>previous uuid specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6278" name="note_printf_c_str">
        <segment state="initial">
          <source>did you mean to call the %0 method?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6279" name="note_prior_template_arg_substitution">
        <segment state="initial">
          <source>while substituting prior template arguments into %select{non-type|template}0 template parameter%1 %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6280" name="note_private_extern">
        <segment state="initial">
          <source>use __attribute__((visibility("hidden"))) attribute instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6281" name="note_private_module_fragment">
        <segment state="initial">
          <source>private module fragment begins here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6282" name="note_property_attribute">
        <segment state="initial">
          <source>property %0 is declared %select{deprecated|unavailable|partial}1 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6283" name="note_property_declare">
        <segment state="initial">
          <source>property declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6284" name="note_property_synthesize">
        <segment state="initial">
          <source>property synthesized here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6285" name="note_protected_by___block">
        <segment state="initial">
          <source>jump bypasses setup of __block variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6286" name="note_protected_by_cleanup">
        <segment state="initial">
          <source>jump bypasses initialization of variable with __attribute__((cleanup))</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6287" name="note_protected_by_consteval_if">
        <segment state="initial">
          <source>jump enters controlled statement of consteval if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6288" name="note_protected_by_constexpr_if">
        <segment state="initial">
          <source>jump enters controlled statement of constexpr if</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6289" name="note_protected_by_cxx_catch">
        <segment state="initial">
          <source>jump bypasses initialization of catch block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6290" name="note_protected_by_cxx_try">
        <segment state="initial">
          <source>jump bypasses initialization of try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6291" name="note_protected_by_if_available">
        <segment state="initial">
          <source>jump enters controlled statement of if available</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6292" name="note_protected_by_non_trivial_c_struct_init">
        <segment state="initial">
          <source>jump bypasses initialization of variable of non-trivial C struct type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6293" name="note_protected_by_objc_autoreleasepool">
        <segment state="initial">
          <source>jump bypasses auto release push of @autoreleasepool block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6294" name="note_protected_by_objc_catch">
        <segment state="initial">
          <source>jump bypasses initialization of @catch block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6295" name="note_protected_by_objc_fast_enumeration">
        <segment state="initial">
          <source>jump enters Objective-C fast enumeration loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6296" name="note_protected_by_objc_finally">
        <segment state="initial">
          <source>jump bypasses initialization of @finally block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6297" name="note_protected_by_objc_strong_init">
        <segment state="initial">
          <source>jump bypasses initialization of __strong variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6298" name="note_protected_by_objc_synchronized">
        <segment state="initial">
          <source>jump bypasses initialization of @synchronized block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6299" name="note_protected_by_objc_try">
        <segment state="initial">
          <source>jump bypasses initialization of @try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6300" name="note_protected_by_objc_weak_init">
        <segment state="initial">
          <source>jump bypasses initialization of __weak variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6301" name="note_protected_by_seh_except">
        <segment state="initial">
          <source>jump bypasses initialization of __except block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6302" name="note_protected_by_seh_finally">
        <segment state="initial">
          <source>jump bypasses initialization of __finally block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6303" name="note_protected_by_seh_try">
        <segment state="initial">
          <source>jump bypasses initialization of __try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6304" name="note_protected_by_variable_init">
        <segment state="initial">
          <source>jump bypasses variable initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6305" name="note_protected_by_variable_non_pod">
        <segment state="initial">
          <source>jump bypasses initialization of non-POD variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6306" name="note_protected_by_variable_nontriv_destructor">
        <segment state="initial">
          <source>jump bypasses variable with a non-trivial destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6307" name="note_protected_by_vla">
        <segment state="initial">
          <source>jump bypasses initialization of variable length array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6308" name="note_protected_by_vla_type_alias">
        <segment state="initial">
          <source>jump bypasses initialization of VLA type alias</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6309" name="note_protected_by_vla_typedef">
        <segment state="initial">
          <source>jump bypasses initialization of VLA typedef</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6310" name="note_protocol_decl">
        <segment state="initial">
          <source>protocol is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6311" name="note_protocol_decl_undefined">
        <segment state="initial">
          <source>protocol %0 has no definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6312" name="note_protocol_method">
        <segment state="initial">
          <source>protocol method is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6313" name="note_protocol_property_declare">
        <segment state="initial">
          <source>it could also be property %select{of type %1|without attribute '%1'|with attribute '%1'|with getter %1|with setter %1}0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6314" name="note_ptrauth_virtual_function_incomplete_arg_ret_type">
        <segment state="initial">
          <source>%0 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6315" name="note_ptrauth_virtual_function_pointer_incomplete_arg_ret">
        <segment state="initial">
          <source>cannot take an address of a virtual member function if its return or argument types are incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6316" name="note_pure_qualified_call_kext">
        <segment state="initial">
          <source>qualified call to %0::%1 is treated as a virtual call to %1 due to -fapple-kext</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6317" name="note_pure_virtual_function">
        <segment state="initial">
          <source>unimplemented pure virtual method %0 in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6318" name="note_raii_guard_add_name">
        <segment state="initial">
          <source>add a variable name to declare a %0 initialized with %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6319" name="note_receiver_class_declared">
        <segment state="initial">
          <source>receiver is instance of class declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6320" name="note_receiver_expr_here">
        <segment state="initial">
          <source>receiver expression is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6321" name="note_receiver_is_id">
        <segment state="initial">
          <source>receiver is treated with 'id' type for purpose of method lookup</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6322" name="note_recursive_default_argument_used_here">
        <segment state="initial">
          <source>default argument used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6323" name="note_redefinition_include_same_file">
        <segment state="initial">
          <source>'%0' included multiple times, additional include site here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6324" name="note_redefinition_modules_same_file">
        <segment state="initial">
          <source>'%0' included multiple times, additional include site in header from module '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6325" name="note_ref_or_ptr_member_declared_here">
        <segment state="initial">
          <source>%select{reference|pointer}0 member declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6326" name="note_refconst_member_not_initialized">
        <segment state="initial">
          <source>%select{const|reference}0 member %1 will never be initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6327" name="note_reference_is_return_value">
        <segment state="initial">
          <source>%0 returns a reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6328" name="note_reference_placeholder">
        <segment state="initial">
          <source>placeholder declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6329" name="note_referenced_type_template">
        <segment state="initial">
          <source>%select{class|type alias}0 template declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6330" name="note_reinterpret_updowncast_use_static">
        <segment state="initial">
          <source>use 'static_cast' to adjust the pointer correctly while %select{upcasting|downcasting}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6331" name="note_related_result_type_explicit">
        <segment state="initial">
          <source>%select{overridden|current}0 method is explicitly declared 'instancetype'%select{| and is expected to return an instance of its class type}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6332" name="note_related_result_type_family">
        <segment state="initial">
          <source>%select{overridden|current}0 method is part of the '%select{|alloc|copy|init|mutableCopy|new|autorelease|dealloc|finalize|release|retain|retainCount|self}1' method family%select{| and is expected to return an instance of its class type}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6333" name="note_related_result_type_inferred">
        <segment state="initial">
          <source>%select{class|instance}0 method %1 is assumed to return an instance of its receiver type (%2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6334" name="note_related_result_type_overridden">
        <segment state="initial">
          <source>overridden method returns an instance of its class type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6335" name="note_remove_abs">
        <segment state="initial">
          <source>remove the call to '%0' since unsigned values cannot be negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6336" name="note_remove_max_call">
        <segment state="initial">
          <source>remove call to max function and unsigned zero argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6337" name="note_remove_move">
        <segment state="initial">
          <source>remove std::move call here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6338" name="note_remove_parens_for_variable_declaration">
        <segment state="initial">
          <source>remove parentheses to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6339" name="note_replace_abs_function">
        <segment state="initial">
          <source>use function '%0' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6340" name="note_replace_equals_default_to_delete">
        <segment state="initial">
          <source>replace 'default' with 'delete'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6341" name="note_rewriting_operator_as_spaceship">
        <segment state="initial">
          <source>while rewriting comparison as call to 'operator&lt;=&gt;' declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6342" name="note_riscv_repeated_interrupt_attribute">
        <segment state="initial">
          <source>repeated RISC-V 'interrupt' attribute is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6343" name="note_safe_buffer_debug_mode">
        <segment state="initial">
          <source>safe buffers debug: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6344" name="note_safe_buffer_usage_suggestions_disabled">
        <segment state="initial">
          <source>pass -fsafe-buffer-usage-suggestions to receive code hardening suggestions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6345" name="note_sentinel_here">
        <segment state="initial">
          <source>%select{function|method|block}0 has been explicitly marked sentinel here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6346" name="note_shadow_field">
        <segment state="initial">
          <source>declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6347" name="note_silence_aligned_allocation_unavailable">
        <segment state="initial">
          <source>if you supply your own aligned allocation functions, use -faligned-allocation to silence this diagnostic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6348" name="note_single_arg_concept_specialization_constraint_evaluated_to_false">
        <segment state="initial">
          <source>%select{and|because}0 %1 does not satisfy %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6349" name="note_sme_use_preserves_za">
        <segment state="initial">
          <source>add '__arm_preserves("za")' to the callee if it preserves ZA</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6350" name="note_specialized_decl">
        <segment state="initial">
          <source>attempt to specialize declaration here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6351" name="note_specialized_entity">
        <segment state="initial">
          <source>explicitly specialized declaration is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6352" name="note_static_for_internal_linkage">
        <segment state="initial">
          <source>declare 'static' if the %select{variable|function}0 is not intended to be used outside of this translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6353" name="note_string_plus_scalar_silence">
        <segment state="initial">
          <source>use array indexing to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6354" name="note_strlcpycat_wrong_size">
        <segment state="initial">
          <source>change size argument to be the size of the destination</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6355" name="note_strncat_wrong_size">
        <segment state="initial">
          <source>change the argument to be the free space in the destination buffer minus the terminating null byte</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6356" name="note_struct_class_suggestion">
        <segment state="initial">
          <source>did you mean %select{struct|interface|class}0 here?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6357" name="note_substituted_constraint_expr_is_ill_formed">
        <segment state="initial">
          <source>because substituted constraint expression is ill-formed%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6358" name="note_suppress_ctad_maybe_unsupported">
        <segment state="initial">
          <source>add a deduction guide to suppress this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6359" name="note_suppressed_class_declare">
        <segment state="initial">
          <source>class with specified objc_requires_property_definitions attribute is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6360" name="note_surrounding_namespace_ends_here">
        <segment state="initial">
          <source>surrounding namespace with visibility attribute ends here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6361" name="note_surrounding_namespace_starts_here">
        <segment state="initial">
          <source>surrounding namespace with visibility attribute starts here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6362" name="note_suspicious_bzero_size_silence">
        <segment state="initial">
          <source>parenthesize the second argument to silence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6363" name="note_suspicious_sizeof_memset_silence">
        <segment state="initial">
          <source>%select{parenthesize the third argument|cast the second argument to 'int'}0 to silence</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6364" name="note_switch_conversion">
        <segment state="initial">
          <source>conversion to %select{integral|enumeration}0 type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6365" name="note_tail_call_required">
        <segment state="initial">
          <source>tail call required by %0 attribute here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6366" name="note_template_arg_internal_object">
        <segment state="initial">
          <source>non-type template argument refers to %select{function|object}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6367" name="note_template_arg_refers_here">
        <segment state="initial">
          <source>non-type template argument refers here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6368" name="note_template_arg_refers_here_func">
        <segment state="initial">
          <source>template argument refers to function template %0, here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6369" name="note_template_arg_template_params_mismatch">
        <segment state="initial">
          <source>template template argument has different template parameters than its corresponding template template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6370" name="note_template_class_explicit_specialization_was_here">
        <segment state="initial">
          <source>class template %0 was explicitly specialized here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6371" name="note_template_class_instantiation_here">
        <segment state="initial">
          <source>in instantiation of template class %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6372" name="note_template_class_instantiation_was_here">
        <segment state="initial">
          <source>class template %0 was instantiated here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6373" name="note_template_decl_external">
        <segment state="initial">
          <source>template declaration from hidden source: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6374" name="note_template_decl_here">
        <segment state="initial">
          <source>template is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6375" name="note_template_declared_here">
        <segment state="initial">
          <source>%select{function template|class template|variable template|type alias template|template template parameter}0 %1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6376" name="note_template_default_arg_checking">
        <segment state="initial">
          <source>while checking a default template argument used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6377" name="note_template_enum_def_here">
        <segment state="initial">
          <source>in instantiation of enumeration %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6378" name="note_template_exception_spec_instantiation_here">
        <segment state="initial">
          <source>in instantiation of exception specification for %0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6379" name="note_template_kw_refers_to_non_template">
        <segment state="initial">
          <source>declared as a non-template here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6380" name="note_template_member_class_here">
        <segment state="initial">
          <source>in instantiation of member class %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6381" name="note_template_member_function_here">
        <segment state="initial">
          <source>in instantiation of member function %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6382" name="note_template_nontype_parm_different_type">
        <segment state="initial">
          <source>template non-type parameter has a different type %0 in template argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6383" name="note_template_nontype_parm_prev_declaration">
        <segment state="initial">
          <source>previous non-type template parameter with type %0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6384" name="note_template_nsdmi_here">
        <segment state="initial">
          <source>in instantiation of default member initializer %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6385" name="note_template_param_different_kind">
        <segment state="initial">
          <source>template parameter has a different kind in template argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6386" name="note_template_param_external">
        <segment state="initial">
          <source>template parameter from hidden source: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6387" name="note_template_param_here">
        <segment state="initial">
          <source>template parameter is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6388" name="note_template_param_list_different_arity">
        <segment state="initial">
          <source>%select{too few|too many}0 template parameters in template template argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6389" name="note_template_param_prev_default_arg">
        <segment state="initial">
          <source>previous default template argument defined here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6390" name="note_template_param_prev_default_arg_in_other_module">
        <segment state="initial">
          <source>previous default template argument defined in module %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6391" name="note_template_parameter_pack_here">
        <segment state="initial">
          <source>previous %select{template type|non-type template|template template}0 parameter%select{| pack}1 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6392" name="note_template_parameter_pack_non_pack">
        <segment state="initial">
          <source>%select{template type|non-type template|template template}0 parameter%select{| pack}1 does not match %select{template type|non-type template|template template}0 parameter%select{ pack|}1 in template argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6393" name="note_template_prev_declaration">
        <segment state="initial">
          <source>previous template %select{declaration|template parameter}0 is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6394" name="note_template_recursion_depth">
        <segment state="initial">
          <source>use -ftemplate-depth=N to increase recursive template instantiation depth</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6395" name="note_template_requirement_instantiation_here">
        <segment state="initial">
          <source>in instantiation of requirement here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6396" name="note_template_requirement_params_instantiation_here">
        <segment state="initial">
          <source>in instantiation of requirement parameters here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6397" name="note_template_static_data_member_def_here">
        <segment state="initial">
          <source>in instantiation of static data member %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6398" name="note_template_type_alias_instantiation_here">
        <segment state="initial">
          <source>in instantiation of template type alias %0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6399" name="note_template_unnamed_type_here">
        <segment state="initial">
          <source>unnamed type used in template argument was declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6400" name="note_template_variable_def_here">
        <segment state="initial">
          <source>in instantiation of variable template specialization %q0 requested here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6401" name="note_thread_warning_in_fun">
        <segment state="initial">
          <source>thread warning in function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6402" name="note_throw_in_dtor">
        <segment state="initial">
          <source>%select{destructor|deallocator}0 has a %select{non-throwing|implicit non-throwing}1 exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6403" name="note_throw_in_function">
        <segment state="initial">
          <source>function declared non-throwing here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6404" name="note_throw_underaligned_obj">
        <segment state="initial">
          <source>required alignment of type %0 (%1 bytes) is larger than the supported alignment of C++ exception objects on this target (%2 bytes)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6405" name="note_transparent_union_first_field_size_align">
        <segment state="initial">
          <source>%select{alignment|size}0 of first field is %1 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6406" name="note_type_aware_operator_declared">
        <segment state="initial">
          <source>%select{non-|}0type aware %1 declared here in %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6407" name="note_type_incomplete">
        <segment state="initial">
          <source>%0 is incomplete</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6408" name="note_type_requirement_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid: %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6409" name="note_type_requirement_unknown_substitution_error">
        <segment state="initial">
          <source>%select{and|because}0 '%1' would be invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6410" name="note_typecheck_assign_const">
        <segment state="initial">
          <source>%select{function %1 which returns const-qualified type %2 declared here|variable %1 declared const here|%select{non-|}1static data member %2 declared const here|member function %q1 is declared const here|%select{|nested }1data member %2 declared const here}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6411" name="note_typecheck_invalid_operands_converted">
        <segment state="initial">
          <source>%select{first|second}0 operand was implicitly converted to type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6412" name="note_typecheck_member_reference_suggestion">
        <segment state="initial">
          <source>did you mean to use '.' instead?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6413" name="note_typedef_for_linkage_here">
        <segment state="initial">
          <source>type is given name %0 for linkage purposes by this %select{typedef|alias}1 declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6414" name="note_typename_member_refers_here">
        <segment state="initial">
          <source>referenced member %0 is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6415" name="note_typename_refers_here">
        <segment state="initial">
          <source>referenced %0 is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6416" name="note_unguarded_available_silence">
        <segment state="initial">
          <source>enclose %0 in %select{an @available|a __builtin_available}1 check to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6417" name="note_uninit_fixit_remove_cond">
        <segment state="initial">
          <source>remove the %select{'%1' if its condition|condition if it}0 is always %select{false|true}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6418" name="note_uninit_in_this_constructor">
        <segment state="initial">
          <source>during field initialization in %select{this|the implicit default}0 constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6419" name="note_uninit_reference_member">
        <segment state="initial">
          <source>uninitialized reference member is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6420" name="note_uninit_var_use">
        <segment state="initial">
          <source>%select{uninitialized use occurs|variable is captured by block}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6421" name="note_unlocked_here">
        <segment state="initial">
          <source>%0 released here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6422" name="note_unmatched_type_aware_allocator_declared">
        <segment state="initial">
          <source>unmatched type aware %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6423" name="note_unreachable_entity">
        <segment state="initial">
          <source>%select{declaration|definition|default argument declared|explicit specialization declared|partial specialization declared}0 here is not %select{visible|reachable|reachable|reachable|reachable|reachable}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6424" name="note_unreachable_silence">
        <segment state="initial">
          <source>silence by adding parentheses to mark code as explicitly dead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6425" name="note_unreachable_template_decl">
        <segment state="initial">
          <source>unreachable declaration of template entity is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6426" name="note_unsafe_buffer_operation">
        <segment state="initial">
          <source>used%select{| in pointer arithmetic| in buffer access}0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6427" name="note_unsafe_buffer_printf_call">
        <segment state="initial">
          <source>%select{|change to 'snprintf' for explicit bounds checking | buffer pointer and size may not match|string argument is not guaranteed to be null-terminated|'va_list' is unsafe}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6428" name="note_unsafe_buffer_variable_fixit_group">
        <segment state="initial">
          <source>change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to '%select{std::span|std::array|std::span::iterator}1' to propagate bounds information between them}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6429" name="note_unsafe_buffer_variable_fixit_together">
        <segment state="initial">
          <source>change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to safe types to make function %4 bounds-safe}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6430" name="note_use_ifdef_guards">
        <segment state="initial">
          <source>unguarded header; consider using #ifdef guards or #pragma once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6431" name="note_use_non_reference_type">
        <segment state="initial">
          <source>use non-reference type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6432" name="note_use_reference_type">
        <segment state="initial">
          <source>use reference type %0 to prevent copying</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6433" name="note_use_thread_local">
        <segment state="initial">
          <source>use 'thread_local' to allow this</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6434" name="note_use_type_or_non_reference">
        <segment state="initial">
          <source>use non-reference type %0 to make construction explicit or type %1 to prevent copying</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6435" name="note_used_here">
        <segment state="initial">
          <source>used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6436" name="note_used_in_initialization_here">
        <segment state="initial">
          <source>used in initialization here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6437" name="note_user_declared_ctor">
        <segment state="initial">
          <source>implicit default constructor suppressed by user-declared constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6438" name="note_using_decl">
        <segment state="initial">
          <source>%select{|previous }0using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6439" name="note_using_decl_class_member_workaround">
        <segment state="initial">
          <source>use %select{an alias declaration|a typedef declaration|a reference|a const variable|a constexpr variable}0 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6440" name="note_using_decl_conflict">
        <segment state="initial">
          <source>conflicting declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6441" name="note_using_decl_target">
        <segment state="initial">
          <source>target of using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6442" name="note_using_enum_decl">
        <segment state="initial">
          <source>%select{|previous }0using-enum declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6443" name="note_using_value_decl_missing_typename">
        <segment state="initial">
          <source>add 'typename' to treat this using declaration as a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6444" name="note_value_initialization_here">
        <segment state="initial">
          <source>in value-initialization of type %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6445" name="note_var_declared_here">
        <segment state="initial">
          <source>variable %0 is declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6446" name="note_var_explicitly_captured_here">
        <segment state="initial">
          <source>variable %0 is%select{| explicitly}1 captured here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6447" name="note_var_fixit_add_initialization">
        <segment state="initial">
          <source>initialize the variable %0 to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6448" name="note_var_prev_partial_spec_here">
        <segment state="initial">
          <source>previous declaration of variable template partial specialization is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6449" name="note_vbase_moved_here">
        <segment state="initial">
          <source>%select{%1 is a virtual base class of base class %2 declared here|virtual base class %1 declared here}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6450" name="note_vla_unsupported">
        <segment state="initial">
          <source>variable length arrays are not supported for the current target</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6451" name="note_which_delegates_to">
        <segment state="initial">
          <source>which delegates to</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6452" name="note_while_in_implementation">
        <segment state="initial">
          <source>detected while default synthesizing properties in class implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6453" name="note_widen_bitfield">
        <segment state="initial">
          <source>widen this field to %0 bits to store all values of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6454" name="note_within_field_of_type">
        <segment state="initial">
          <source>within field of type %0 declared here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6455" name="note_xor_used_as_pow_silence">
        <segment state="initial">
          <source>replace expression with '%0' %select{|or use 'xor' instead of '^' }1to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6456" name="override_keyword_hides_virtual_member_function">
        <segment state="initial">
          <source>non-virtual member function marked '%0' hides virtual member %select{function|functions}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6457" name="override_keyword_only_allowed_on_virtual_member_functions">
        <segment state="initial">
          <source>only virtual member functions can be marked '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6458" name="warn_abs_too_small">
        <segment state="initial">
          <source>absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6459" name="warn_abstract_final_class">
        <segment state="initial">
          <source>abstract class is marked '%select{final|sealed}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6460" name="warn_abstract_vbase_init_ignored">
        <segment state="initial">
          <source>initializer for virtual base class %0 of abstract class %1 will never be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6461" name="warn_acc_confusing_routine_name">
        <segment state="initial">
          <source>OpenACC 'routine' directive with a name refers to a function with the same name as the function on the following line; this may be unintended</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6462" name="warn_acc_deprecated_alias_name">
        <segment state="initial">
          <source>OpenACC clause name '%0' is a deprecated clause name and is now an alias for '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6463" name="warn_acc_if_self_conflict">
        <segment state="initial">
          <source>OpenACC construct 'self' has no effect when an 'if' clause evaluates to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6464" name="warn_acc_routine_unimplemented">
        <segment state="initial">
          <source>OpenACC construct 'routine' with implicit function not yet implemented, pragma ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6465" name="warn_access_decl_deprecated">
        <segment state="initial">
          <source>access declarations are deprecated; use using declarations instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6466" name="warn_accessor_property_type_mismatch">
        <segment state="initial">
          <source>type of property %0 does not match type of accessor %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6467" name="warn_acquire_requires_negative_cap">
        <segment state="initial">
          <source>acquiring %0 '%1' requires negative capability '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6468" name="warn_acquired_before">
        <segment state="initial">
          <source>%0 '%1' must be acquired before '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6469" name="warn_acquired_before_after_cycle">
        <segment state="initial">
          <source>cycle in acquired_before/after dependencies, starting with '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6470" name="warn_addition_in_bitshift">
        <segment state="initial">
          <source>operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6471" name="warn_address_of_reference_bool_conversion">
        <segment state="initial">
          <source>reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6472" name="warn_address_of_reference_null_compare">
        <segment state="initial">
          <source>reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6473" name="warn_aligned_attr_underaligned">
        <segment state="initial">
          <source>requested alignment is less than minimum alignment of %1 for type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6474" name="warn_alignment_builtin_useless">
        <segment state="initial">
          <source>%select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6475" name="warn_alignment_not_power_of_two">
        <segment state="initial">
          <source>requested alignment is not a power of 2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6476" name="warn_alloca">
        <segment state="initial">
          <source>use of function %0 is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6477" name="warn_alloca_align_alignof">
        <segment state="initial">
          <source>second argument to __builtin_alloca_with_align is supposed to be in bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6478" name="warn_always_inline_coroutine">
        <segment state="initial">
          <source>this coroutine may be split into pieces; not every piece is guaranteed to be inlined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6479" name="warn_ambiguous_suitable_delete_function_found">
        <segment state="initial">
          <source>multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6480" name="warn_anyx86_excessive_regsave">
        <segment state="initial">
          <source>%select{interrupt service routine|function with attribute 'no_caller_saved_registers'}0 should only call a function with attribute 'no_caller_saved_registers' or be compiled with '-mgeneral-regs-only'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6481" name="warn_arc_lifetime_result_type">
        <segment state="initial">
          <source>ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6482" name="warn_arc_literal_assign">
        <segment state="initial">
          <source>assigning %select{array literal|dictionary literal|numeric literal|boxed expression|&lt;should not happen&gt;|block literal}0 to a weak %select{property|variable}1; object will be released after assignment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6483" name="warn_arc_object_memaccess">
        <segment state="initial">
          <source>%select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6484" name="warn_arc_perform_selector_leaks">
        <segment state="initial">
          <source>performSelector may cause a leak because its selector is unknown</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6485" name="warn_arc_possible_repeated_use_of_weak">
        <segment state="initial">
          <source>weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6486" name="warn_arc_repeated_use_of_weak">
        <segment state="initial">
          <source>weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6487" name="warn_arc_retain_cycle">
        <segment state="initial">
          <source>capturing %0 strongly in this block is likely to lead to a retain cycle</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6488" name="warn_arc_retained_assign">
        <segment state="initial">
          <source>assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6489" name="warn_arc_retained_property_assign">
        <segment state="initial">
          <source>assigning retained object to unsafe property; object will be released after assignment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6490" name="warn_arc_strong_pointer_objc_pointer">
        <segment state="initial">
          <source>method parameter of type %0 with no explicit ownership</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6491" name="warn_argument_invalid_range">
        <segment state="initial">
          <source>argument value %0 is outside the valid range [%1, %2]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6492" name="warn_argument_undefined_behaviour">
        <segment state="initial">
          <source>argument value %0 will result in undefined behaviour</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6493" name="warn_arith_conv_enum_float">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6494" name="warn_arith_conv_enum_float_cxx20">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6495" name="warn_arith_conv_mixed_anon_enum_types">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6496" name="warn_arith_conv_mixed_anon_enum_types_cxx20">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6497" name="warn_arith_conv_mixed_enum_types">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6498" name="warn_arith_conv_mixed_enum_types_cxx20">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6499" name="warn_arith_conv_mixed_unicode_types">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different Unicode character types %1 and %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6500" name="warn_arm_interrupt_save_fp_without_vfp_unit">
        <segment state="initial">
          <source>`interrupt_save_fp` only applies to targets that have a VFP unit enabled for this compilation; this will be treated as a regular `interrupt` attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6501" name="warn_arm_interrupt_vfp_clobber">
        <segment state="initial">
          <source>interrupt service routine with vfp enabled may clobber the interruptee's vfp state; consider using the `interrupt_save_fp` attribute to prevent this behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6502" name="warn_array_comparison">
        <segment state="initial">
          <source>comparison between two arrays compare their addresses and will be deprecated in c++20; to compare array addresses, use unary '+' to decay operands to pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6503" name="warn_array_comparison_cxx26">
        <segment state="initial">
          <source>comparison between two arrays is ill-formed in C++26; to compare array addresses, use unary '+' to decay operands to pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6504" name="warn_array_index_exceeds_bounds">
        <segment state="initial">
          <source>array index %0 is past the end of the array (that has type %1%select{|, cast to %3}2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6505" name="warn_array_index_exceeds_max_addressable_bounds">
        <segment state="initial">
          <source>array index %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6506" name="warn_array_index_precedes_bounds">
        <segment state="initial">
          <source>array index %0 is before the beginning of the array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6507" name="warn_asm_label_on_auto_decl">
        <segment state="initial">
          <source>ignored asm label '%0' on automatic variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6508" name="warn_asm_mismatched_size_modifier">
        <segment state="initial">
          <source>value size does not match register size specified by the constraint and modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6509" name="warn_assume_aligned_too_great">
        <segment state="initial">
          <source>requested alignment must be %0 bytes or smaller; maximum alignment assumed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6510" name="warn_assume_side_effects">
        <segment state="initial">
          <source>assumption is ignored because it contains (potential) side-effects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6511" name="warn_at_available_unchecked_use">
        <segment state="initial">
          <source>%select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6512" name="warn_atl_uuid_deprecated">
        <segment state="initial">
          <source>specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6513" name="warn_atomic_implicit_seq_cst">
        <segment state="initial">
          <source>implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6514" name="warn_atomic_member_access">
        <segment state="initial">
          <source>accessing a member of an atomic structure or union is undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6515" name="warn_atomic_op_has_invalid_memory_order">
        <segment state="initial">
          <source>%select{|success |failure }0memory order argument to atomic operation is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6516" name="warn_atomic_property_rule">
        <segment state="initial">
          <source>writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6517" name="warn_attr_abi_tag_namespace">
        <segment state="initial">
          <source>'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6518" name="warn_attr_min_eq_max">
        <segment state="initial">
          <source>%0 attribute minimum and maximum arguments are equal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6519" name="warn_attr_on_unconsumable_class">
        <segment state="initial">
          <source>consumed analysis attribute is attached to member of class %0 which isn't marked as consumable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6520" name="warn_attr_swift_name_decl_kind">
        <segment state="initial">
          <source>%0 attribute cannot be applied to this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6521" name="warn_attr_swift_name_decl_missing_params">
        <segment state="initial">
          <source>%0 attribute cannot be applied to a %select{function|method}1 with no parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6522" name="warn_attr_swift_name_function">
        <segment state="initial">
          <source>%0 attribute argument must be a string literal specifying a Swift function name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6523" name="warn_attr_swift_name_getter_parameters">
        <segment state="initial">
          <source>%0 attribute for getter must not have any parameters besides 'self:'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6524" name="warn_attr_swift_name_invalid_identifier">
        <segment state="initial">
          <source>%0 attribute has invalid identifier for the %select{base|context|parameter}1 name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6525" name="warn_attr_swift_name_missing_parameters">
        <segment state="initial">
          <source>%0 attribute is missing parameter label clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6526" name="warn_attr_swift_name_multiple_selfs">
        <segment state="initial">
          <source>%0 attribute cannot specify more than one 'self:' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6527" name="warn_attr_swift_name_num_params">
        <segment state="initial">
          <source>too %select{few|many}0 parameters in the signature specified by the %1 attribute (expected %2; got %3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6528" name="warn_attr_swift_name_setter_parameters">
        <segment state="initial">
          <source>%0 attribute for setter must have one parameter for new value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6529" name="warn_attr_swift_name_subscript_getter_newValue">
        <segment state="initial">
          <source>%0 attribute for 'subscript' getter cannot have a 'newValue:' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6530" name="warn_attr_swift_name_subscript_invalid_parameter">
        <segment state="initial">
          <source>%0 attribute for 'subscript' must %select{be a getter or setter|have at least one parameter|have a 'self:' parameter}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6531" name="warn_attr_swift_name_subscript_setter_multiple_newValues">
        <segment state="initial">
          <source>%0 attribute for 'subscript' setter cannot have multiple 'newValue:' parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6532" name="warn_attr_swift_name_subscript_setter_no_newValue">
        <segment state="initial">
          <source>%0 attribute for 'subscript' setter must have a 'newValue:' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6533" name="warn_attribute_address_multiple_identical_qualifiers">
        <segment state="initial">
          <source>multiple identical address spaces specified for type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6534" name="warn_attribute_after_definition_ignored">
        <segment state="initial">
          <source>attribute %0 after definition is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6535" name="warn_attribute_argument_n_negative">
        <segment state="initial">
          <source>%0 attribute parameter %1 is negative and will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6536" name="warn_attribute_arm_za_builtin_no_za_state">
        <segment state="initial">
          <source>builtin call is not valid when calling from a function without active ZA state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6537" name="warn_attribute_arm_zt0_builtin_no_zt0_state">
        <segment state="initial">
          <source>builtin call is not valid when calling from a function without active ZT0 state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6538" name="warn_attribute_cmse_entry_static">
        <segment state="initial">
          <source>'cmse_nonsecure_entry' cannot be applied to functions with internal linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6539" name="warn_attribute_dll_instantiated_base_class">
        <segment state="initial">
          <source>propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6540" name="warn_attribute_dll_redeclaration">
        <segment state="initial">
          <source>redeclaration of %q0 should not add %q1 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6541" name="warn_attribute_dllexport_explicit_instantiation_decl">
        <segment state="initial">
          <source>explicit instantiation declaration should not be 'dllexport'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6542" name="warn_attribute_dllexport_explicit_instantiation_def">
        <segment state="initial">
          <source>'dllexport' attribute ignored on explicit instantiation definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6543" name="warn_attribute_dllimport_static_field_definition">
        <segment state="initial">
          <source>definition of dllimport static field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6544" name="warn_attribute_exclude_from_explicit_instantiation_local_class">
        <segment state="initial">
          <source>%0 attribute ignored on local class%select{| member}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6545" name="warn_attribute_form_ignored">
        <segment state="initial">
          <source>%0 attribute ignored because Clang does not yet support this attribute signature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6546" name="warn_attribute_has_no_effect_on_compile_time_if">
        <segment state="initial">
          <source>attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6547" name="warn_attribute_has_no_effect_on_infinite_loop">
        <segment state="initial">
          <source>attribute %0 has no effect when annotating an infinite loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6548" name="warn_attribute_hybrid_patchable_non_extern">
        <segment state="initial">
          <source>'hybrid_patchable' is ignored on functions without external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6549" name="warn_attribute_iboutlet">
        <segment state="initial">
          <source>%0 attribute can only be applied to instance variables or properties</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6550" name="warn_attribute_ignored_for_field_of_type">
        <segment state="initial">
          <source>%0 attribute ignored for field of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6551" name="warn_attribute_ignored_no_calls_in_stmt">
        <segment state="initial">
          <source>%0 attribute is ignored because there exists no call expression inside the statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6552" name="warn_attribute_ignored_non_function_pointer">
        <segment state="initial">
          <source>%0 attribute is ignored because %1 is not a function pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6553" name="warn_attribute_ignored_on_inline">
        <segment state="initial">
          <source>%0 attribute ignored on inline function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6554" name="warn_attribute_ignored_on_non_definition">
        <segment state="initial">
          <source>%0 attribute ignored on a non-definition declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6555" name="warn_attribute_invalid_on_definition">
        <segment state="initial">
          <source>'%0' attribute cannot be specified on a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6556" name="warn_attribute_no_builtin_invalid_builtin_name">
        <segment state="initial">
          <source>'%0' is not a valid builtin name for %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6557" name="warn_attribute_non_character_array">
        <segment state="initial">
          <source>%0%select{ attribute|}1 only applies to fields or variables of character array type; type is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6558" name="warn_attribute_nonnull_no_pointers">
        <segment state="initial">
          <source>'nonnull' attribute applied to function with no pointer arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6559" name="warn_attribute_nonnull_parm_no_args">
        <segment state="initial">
          <source>'nonnull' attribute when used on parameters takes no arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6560" name="warn_attribute_not_on_decl">
        <segment state="initial">
          <source>%0 attribute ignored when parsing type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6561" name="warn_attribute_on_void_param">
        <segment state="initial">
          <source>attribute %0 cannot be applied to a 'void' parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6562" name="warn_attribute_packed_for_bitfield">
        <segment state="initial">
          <source>'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6563" name="warn_attribute_pointer_or_reference_only">
        <segment state="initial">
          <source>%0 attribute only applies to a pointer or reference (%1 is invalid)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6564" name="warn_attribute_pointers_only">
        <segment state="initial">
          <source>%0 attribute only applies to%select{| constant}1 pointer arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6565" name="warn_attribute_precede_definition">
        <segment state="initial">
          <source>attribute declaration must precede definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6566" name="warn_attribute_protected_visibility">
        <segment state="initial">
          <source>target does not support 'protected' visibility; using 'default'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6567" name="warn_attribute_return_pointers_only">
        <segment state="initial">
          <source>%0 attribute only applies to return values that are pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6568" name="warn_attribute_return_pointers_refs_only">
        <segment state="initial">
          <source>%0 attribute only applies to return values that are pointers or references</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6569" name="warn_attribute_section_drectve">
        <segment state="initial">
          <source>#pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6570" name="warn_attribute_section_on_redeclaration">
        <segment state="initial">
          <source>section attribute is specified on redeclared variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6571" name="warn_attribute_sentinel_named_arguments">
        <segment state="initial">
          <source>'sentinel' attribute requires named arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6572" name="warn_attribute_sentinel_not_variadic">
        <segment state="initial">
          <source>'sentinel' attribute only supported for variadic %select{functions|blocks}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6573" name="warn_attribute_type_not_supported">
        <segment state="initial">
          <source>%0 attribute argument not supported: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6574" name="warn_attribute_type_not_supported_global">
        <segment state="initial">
          <source>%0 attribute argument '%1' not supported on a global variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6575" name="warn_attribute_unknown_visibility">
        <segment state="initial">
          <source>unknown visibility %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6576" name="warn_attribute_void_function_method">
        <segment state="initial">
          <source>attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6577" name="warn_attribute_weak_on_field">
        <segment state="initial">
          <source>__weak attribute cannot be specified on a field declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6578" name="warn_attribute_weak_on_local">
        <segment state="initial">
          <source>__weak attribute cannot be specified on an automatic variable when ARC is not enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6579" name="warn_attribute_wrong_decl_type">
        <segment state="initial">
          <source>%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions|for loop statements|virtual functions|parameters and implicit object parameters|non-member functions|functions, classes, or enumerations|classes|typedefs}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6580" name="warn_attribute_wrong_decl_type_str">
        <segment state="initial">
          <source>%0%select{ attribute|}1 only applies to %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6581" name="warn_attributes_likelihood_ifstmt_conflict">
        <segment state="initial">
          <source>conflicting attributes %0 are ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6582" name="warn_auto_implicit_atomic_property">
        <segment state="initial">
          <source>property is assumed atomic when auto-synthesizing the property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6583" name="warn_auto_readonly_iboutlet_property">
        <segment state="initial">
          <source>readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6584" name="warn_auto_storage_class">
        <segment state="initial">
          <source>'auto' storage class specifier is redundant and incompatible with C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6585" name="warn_auto_synthesizing_protocol_property">
        <segment state="initial">
          <source>auto property synthesis will not synthesize property %0 declared in protocol %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6586" name="warn_auto_var_is_id">
        <segment state="initial">
          <source>'auto' deduced as 'id' in declaration of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6587" name="warn_autosynthesis_property_in_superclass">
        <segment state="initial">
          <source>auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6588" name="warn_autosynthesis_property_ivar_match">
        <segment state="initial">
          <source>autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6589" name="warn_availability_fuchsia_unavailable_minor">
        <segment state="initial">
          <source>Fuchsia API Level prohibits specifying a minor or sub-minor version</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6590" name="warn_availability_on_static_initializer">
        <segment state="initial">
          <source>ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6591" name="warn_availability_swift_unavailable_deprecated_only">
        <segment state="initial">
          <source>only 'unavailable' and 'deprecated' are supported for Swift availability</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6592" name="warn_availability_unknown_environment">
        <segment state="initial">
          <source>unknown environment %0 in availability macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6593" name="warn_availability_unknown_platform">
        <segment state="initial">
          <source>unknown platform %0 in availability macro</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6594" name="warn_availability_version_ordering">
        <segment state="initial">
          <source>feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6595" name="warn_bad_cxx_cast_nested_pointer_addr_space">
        <segment state="initial">
          <source>%select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6596" name="warn_bad_function_cast">
        <segment state="initial">
          <source>cast from function call of type %0 to non-matching type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6597" name="warn_bad_receiver_type">
        <segment state="initial">
          <source>receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6598" name="warn_base_class_is_uninit">
        <segment state="initial">
          <source>base class %0 is uninitialized when used here to access %q1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6599" name="warn_bind_ref_member_to_parameter">
        <segment state="initial">
          <source>binding reference member %0 to stack allocated %select{variable|parameter}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6600" name="warn_binding_null_to_reference">
        <segment state="initial">
          <source>binding dereferenced null pointer to reference has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6601" name="warn_bitfield_too_small_for_enum">
        <segment state="initial">
          <source>bit-field %0 is not wide enough to store all enumerators of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6602" name="warn_bitfield_width_exceeds_type_width">
        <segment state="initial">
          <source>width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6603" name="warn_bitwise_instead_of_logical">
        <segment state="initial">
          <source>use of bitwise '%0' with boolean operands</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6604" name="warn_bitwise_negation_bool">
        <segment state="initial">
          <source>bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6605" name="warn_bitwise_op_in_bitwise_op">
        <segment state="initial">
          <source>'%0' within '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6606" name="warn_block_capture_autoreleasing">
        <segment state="initial">
          <source>block captures an autoreleasing out-parameter, which may result in use-after-free bugs</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6607" name="warn_block_literal_attributes_on_omitted_return_type">
        <segment state="initial">
          <source>attribute %0 ignored, because it cannot be applied to omitted return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6608" name="warn_block_literal_qualifiers_on_omitted_return_type">
        <segment state="initial">
          <source>'%0' qualifier on omitted return type %1 has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6609" name="warn_bool_switch_condition">
        <segment state="initial">
          <source>switch condition has boolean value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6610" name="warn_braces_around_init">
        <segment state="initial">
          <source>braces around %select{scalar |}0initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6611" name="warn_break_binds_to_switch">
        <segment state="initial">
          <source>'break' is bound to loop, GCC binds it to switch</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6612" name="warn_builtin_chk_overflow">
        <segment state="initial">
          <source>'%0' will always overflow; destination buffer has size %1, but size argument is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6613" name="warn_builtin_unknown">
        <segment state="initial">
          <source>use of unknown builtin %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6614" name="warn_c2y_compat_alignof_incomplete_array">
        <segment state="initial">
          <source>'alignof' on an incomplete array type is incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6615" name="warn_c2y_compat_assoc_type_incomplete">
        <segment state="initial">
          <source>use of incomplete type %0 in a '_Generic' association is incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6616" name="warn_c2y_compat_increment_complex">
        <segment state="initial">
          <source>'%select{--|++}0' on an object of complex type is incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6617" name="warn_c17_compat_ellipsis_only_parameter">
        <segment state="initial">
          <source>'...' as the only parameter of a function is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6618" name="warn_c17_compat_enum_value_not_int">
        <segment state="initial">
          <source>%select{|incremented }0enumerator value which exceeds the range of 'int' is incompatible with C standards before C23 (%1 is too %select{small|large}2)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6619" name="warn_c17_compat_va_start_one_arg">
        <segment state="initial">
          <source>passing only one argument to 'va_start' is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6620" name="warn_c17_non_local_variable_decl_in_for">
        <segment state="initial">
          <source>declaration of non-local variable in 'for' loop is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6621" name="warn_c17_non_variable_decl_in_for">
        <segment state="initial">
          <source>non-variable declaration in 'for' loop is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6622" name="warn_c23_compat_imaginary_constant">
        <segment state="initial">
          <source>imaginary constants are incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6623" name="warn_c23_compat_restrict_on_array_of_pointers">
        <segment state="initial">
          <source>'restrict' qualifier on an array of pointers is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6624" name="warn_c23_compat_utf8_string">
        <segment state="initial">
          <source>type of UTF-8 string literal will change from array of char to array of char8_t in C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6625" name="warn_call_to_pure_virtual_member_function_from_ctor_dtor">
        <segment state="initial">
          <source>call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6626" name="warn_call_wrong_number_of_arguments">
        <segment state="initial">
          <source>too %select{few|many}0 arguments in call to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6627" name="warn_called_once_gets_called_twice">
        <segment state="initial">
          <source>%0 parameter marked 'called_once' is called twice</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6628" name="warn_called_once_never_called">
        <segment state="initial">
          <source>%select{|captured }1%0 parameter marked 'called_once' is never called</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6629" name="warn_called_once_never_called_when">
        <segment state="initial">
          <source>%0 parameter marked 'called_once' is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6630" name="warn_cannot_pass_non_pod_arg_to_vararg">
        <segment state="initial">
          <source>cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6631" name="warn_cannot_resolve_lock">
        <segment state="initial">
          <source>cannot resolve lock expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6632" name="warn_case_empty_range">
        <segment state="initial">
          <source>empty case range specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6633" name="warn_case_value_overflow">
        <segment state="initial">
          <source>overflow converting case value to switch condition type (%0 to %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6634" name="warn_cast_align">
        <segment state="initial">
          <source>cast from %0 to %1 increases required alignment from %2 to %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6635" name="warn_cast_calling_conv">
        <segment state="initial">
          <source>cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6636" name="warn_cast_function_type">
        <segment state="initial">
          <source>cast %diff{from $ to $ |}0,1converts to incompatible function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6637" name="warn_cast_function_type_strict">
        <segment state="initial">
          <source>cast %diff{from $ to $ |}0,1converts to incompatible function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6638" name="warn_cast_nonnull_to_bool">
        <segment state="initial">
          <source>nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6639" name="warn_cast_pointer_from_sel">
        <segment state="initial">
          <source>cast of type %0 to %1 is deprecated; use sel_getName instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6640" name="warn_cast_qual">
        <segment state="initial">
          <source>cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6641" name="warn_cast_qual2">
        <segment state="initial">
          <source>cast from %0 to %1 must have all intermediate pointers const qualified to be safe</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6642" name="warn_category_method_impl_match">
        <segment state="initial">
          <source>category is implementing a method which will also be implemented by its primary class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6643" name="warn_cconv_knr">
        <segment state="initial">
          <source>function with no prototype cannot use the %0 calling convention</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6644" name="warn_cconv_unsupported">
        <segment state="initial">
          <source>%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6645" name="warn_cdtor_function_try_handler_mem_expr">
        <segment state="initial">
          <source>cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6646" name="warn_cfstring_truncated">
        <segment state="initial">
          <source>input conversion stopped due to an input byte that does not belong to the input codeset UTF-8</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6647" name="warn_class_method_not_found">
        <segment state="initial">
          <source>class method %objcclass0 not found (return type defaults to 'id')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6648" name="warn_class_method_not_found_with_typo">
        <segment state="initial">
          <source>class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6649" name="warn_cleanup_ext">
        <segment state="initial">
          <source>GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6650" name="warn_cmse_nonsecure_union">
        <segment state="initial">
          <source>passing union across security boundary via %select{parameter %1|return value}0 may leak information</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6651" name="warn_cocoa_naming_owned_rule">
        <segment state="initial">
          <source>property follows Cocoa naming convention for returning 'owned' objects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6652" name="warn_collection_expr_type">
        <segment state="initial">
          <source>collection expression type %0 may not respond to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6653" name="warn_comma_operator">
        <segment state="initial">
          <source>possible misuse of comma operator here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6654" name="warn_comparison_always">
        <segment state="initial">
          <source>%select{self-|array |pointer }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6655" name="warn_comparison_bitwise_always">
        <segment state="initial">
          <source>bitwise comparison always evaluates to %select{false|true}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6656" name="warn_comparison_bitwise_or">
        <segment state="initial">
          <source>bitwise or with non-zero value always evaluates to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6657" name="warn_comparison_in_fold_expression">
        <segment state="initial">
          <source>comparison in fold expression would evaluate to '(X %0 Y) %0 Z' which does not behave the same as a mathematical expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6658" name="warn_comparison_mixed_enum_types">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6659" name="warn_comparison_mixed_enum_types_cxx20">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6660" name="warn_comparison_of_mixed_enum_types_switch">
        <segment state="initial">
          <source>comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6661" name="warn_comparison_unicode_mixed_types">
        <segment state="initial">
          <source>comparing values of different Unicode code unit types %0 and %1 may compare different code points</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6662" name="warn_comparison_unicode_mixed_types_constant">
        <segment state="initial">
          <source>comparing values of different Unicode code unit types %0 and %1 compares unrelated code units '%2' and '%3'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6663" name="warn_compatible_implicit_pointer_conv">
        <segment state="initial">
          <source>implicit conversion when %select{%diff{assigning to $ from type $|assigning to type from type}0,1|%diff{passing $ to parameter of type $|passing type to parameter of type}0,1|%diff{returning $ from a function with result type $|returning type from a function with result type}0,1|&lt;CLANG BUG IF YOU SEE THIS&gt;|%diff{initializing $ with an expression of type $|initializing type with an expression of type}0,1|%diff{sending $ to parameter of type $|sending type to parameter of type}0,1|&lt;CLANG BUG IF YOU SEE THIS&gt;}2 is not permitted in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6664" name="warn_completion_handler_called_twice">
        <segment state="initial">
          <source>completion handler is called twice</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6665" name="warn_completion_handler_never_called">
        <segment state="initial">
          <source>%select{|captured }1completion handler is never called</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6666" name="warn_completion_handler_never_called_when">
        <segment state="initial">
          <source>completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6667" name="warn_concatenated_literal_array_init">
        <segment state="initial">
          <source>suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6668" name="warn_concatenated_nsarray_literal">
        <segment state="initial">
          <source>concatenated NSString literal for an NSArray expression - possibly missing a comma</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6669" name="warn_condition_is_assignment">
        <segment state="initial">
          <source>using the result of an assignment as a condition without parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6670" name="warn_condition_is_idiomatic_assignment">
        <segment state="initial">
          <source>using the result of an assignment as a condition without parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6671" name="warn_conditional_mixed_enum_types">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6672" name="warn_conditional_mixed_enum_types_cxx20">
        <segment state="initial">
          <source>%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6673" name="warn_conflicting_func_effects">
        <segment state="initial">
          <source>effects conflict when merging declarations; kept '%0', discarded '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6674" name="warn_conflicting_overriding_param_modifiers">
        <segment state="initial">
          <source>conflicting distributed object modifiers on parameter type in declaration of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6675" name="warn_conflicting_overriding_param_types">
        <segment state="initial">
          <source>conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6676" name="warn_conflicting_overriding_ret_type_modifiers">
        <segment state="initial">
          <source>conflicting distributed object modifiers on return type in declaration of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6677" name="warn_conflicting_overriding_ret_types">
        <segment state="initial">
          <source>conflicting return type in declaration of %0%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6678" name="warn_conflicting_overriding_variadic">
        <segment state="initial">
          <source>conflicting variadic declaration of method and its implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6679" name="warn_conflicting_param_modifiers">
        <segment state="initial">
          <source>conflicting distributed object modifiers on parameter type in implementation of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6680" name="warn_conflicting_param_types">
        <segment state="initial">
          <source>conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6681" name="warn_conflicting_ret_type_modifiers">
        <segment state="initial">
          <source>conflicting distributed object modifiers on return type in implementation of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6682" name="warn_conflicting_ret_types">
        <segment state="initial">
          <source>conflicting return type in implementation of %0%diff{: $ vs $|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6683" name="warn_conflicting_variadic">
        <segment state="initial">
          <source>conflicting variadic declaration of method and its implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6684" name="warn_consecutive_comparison">
        <segment state="initial">
          <source>chained comparison 'X %0 Y %1 Z' does not behave the same as a mathematical expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6685" name="warn_const_attr_with_pure_attr">
        <segment state="initial">
          <source>'const' attribute imposes more restrictions; 'pure' attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6686" name="warn_consteval_if_always_true">
        <segment state="initial">
          <source>consteval if is always true in an %select{unevaluated|immediate}0 context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6687" name="warn_conv_mixed_enum_types_cxx26">
        <segment state="initial">
          <source>invalid %select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6688" name="warn_conv_to_base_not_used">
        <segment state="initial">
          <source>conversion function converting %0 to its base class %1 will never be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6689" name="warn_conv_to_self_not_used">
        <segment state="initial">
          <source>conversion function converting %0 to itself will never be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6690" name="warn_conv_to_void_not_used">
        <segment state="initial">
          <source>conversion function converting %0 to %1 will never be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6691" name="warn_coroutine_handle_address_invalid_return_type">
        <segment state="initial">
          <source>return type of 'coroutine_handle&lt;&gt;::address should be 'void*' (have %0) in order to get capability with existing async C API</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6692" name="warn_coroutine_promise_unhandled_exception_required_with_exceptions">
        <segment state="initial">
          <source>%0 is required to declare the member 'unhandled_exception()' when exceptions are enabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6693" name="warn_coroutine_type_aware_allocator_ignored">
        <segment state="initial">
          <source>type aware %0 will not be used for coroutine allocation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6694" name="warn_counted_by_attr_elt_type_unknown_size">
        <segment state="initial">
          <source>'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}4' %select{cannot|should not}3 be applied to %select{a pointer with pointee|an array with element}0 of unknown size because %1 is %select{an incomplete type|a sizeless type|a function type|a struct type with a flexible array member%select{|. This will be an error in a future compiler version}3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6695" name="warn_cpp_compat_goto_into_protected_scope">
        <segment state="initial">
          <source>jump from this goto statement to its label is incompatible with C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6696" name="warn_cpp_compat_indirect_goto_in_protected_scope">
        <segment state="initial">
          <source>jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6697" name="warn_cpp_compat_switch_into_protected_scope">
        <segment state="initial">
          <source>jump from switch statement to this case label is incompatible with C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6698" name="warn_cstruct_memaccess">
        <segment state="initial">
          <source>%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6699" name="warn_ctad_maybe_unsupported">
        <segment state="initial">
          <source>%0 may not intend to support class template argument deduction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6700" name="warn_ctor_parm_shadows_field">
        <segment state="initial">
          <source>constructor parameter %0 shadows the field %1 of %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6701" name="warn_cuda_maxclusterrank_sm_90">
        <segment state="initial">
          <source>maxclusterrank requires sm_90 or higher, CUDA arch provided: %0, ignoring %1 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6702" name="warn_cxx11_compat_constexpr_body_no_return">
        <segment state="initial">
          <source>constexpr function with no return statements is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6703" name="warn_cxx11_compat_deduced_return_type">
        <segment state="initial">
          <source>return type deduction is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6704" name="warn_cxx11_compat_generic_lambda">
        <segment state="initial">
          <source>generic lambdas are incompatible with C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6705" name="warn_cxx11_compat_init_capture">
        <segment state="initial">
          <source>initialized lambda captures are incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6706" name="warn_cxx11_gnu_attribute_on_type">
        <segment state="initial">
          <source>attribute %0 ignored, because it cannot be applied to a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6707" name="warn_cxx14_compat_class_template_argument_deduction">
        <segment state="initial">
          <source>class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6708" name="warn_cxx14_compat_constexpr_not_const">
        <segment state="initial">
          <source>'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6709" name="warn_cxx14_compat_star_this_lambda_capture">
        <segment state="initial">
          <source>by value capture of '*this' is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6710" name="warn_cxx14_compat_template_nontype_parm_auto_type">
        <segment state="initial">
          <source>non-type template parameters declared with %0 are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6711" name="warn_cxx17_compat_aggregate_init_paren_list">
        <segment state="initial">
          <source>aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6712" name="warn_cxx17_compat_capture_binding">
        <segment state="initial">
          <source>captured structured bindings are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6713" name="warn_cxx17_compat_constexpr_virtual">
        <segment state="initial">
          <source>virtual constexpr functions are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6714" name="warn_cxx17_compat_defaulted_comparison">
        <segment state="initial">
          <source>defaulted comparison operators are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6715" name="warn_cxx17_compat_defaulted_method_type_mismatch">
        <segment state="initial">
          <source>explicitly defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 with a type different from the implicit type is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6716" name="warn_cxx17_compat_designated_init">
        <segment state="initial">
          <source>designated initializers are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6717" name="warn_cxx17_compat_equals_this_lambda_capture">
        <segment state="initial">
          <source>explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6718" name="warn_cxx17_compat_exception_spec_in_signature">
        <segment state="initial">
          <source>mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6719" name="warn_cxx17_compat_init_capture_pack">
        <segment state="initial">
          <source>initialized lambda capture packs are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6720" name="warn_cxx17_compat_lambda_def_ctor_assign">
        <segment state="initial">
          <source>%select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6721" name="warn_cxx17_compat_pointer_to_const_ref_member_on_rvalue">
        <segment state="initial">
          <source>invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6722" name="warn_cxx17_compat_template_nontype_parm_type">
        <segment state="initial">
          <source>non-type template parameter of type %0 is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6723" name="warn_cxx17_compat_unicode_type">
        <segment state="initial">
          <source>'char8_t' type specifier is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6724" name="warn_cxx17_compat_using_decl_class_member_enumerator">
        <segment state="initial">
          <source>member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6725" name="warn_cxx17_compat_using_decl_non_member_enumerator">
        <segment state="initial">
          <source>member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6726" name="warn_cxx17_compat_using_decl_scoped_enumerator">
        <segment state="initial">
          <source>using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6727" name="warn_cxx20_compat_aggregate_init_with_ctors">
        <segment state="initial">
          <source>aggregate initialization of type %0 with user-declared constructors is incompatible with C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6728" name="warn_cxx20_compat_auto_expr">
        <segment state="initial">
          <source>'auto' as a functional-style cast is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6729" name="warn_cxx20_compat_constexpr_var">
        <segment state="initial">
          <source>definition of a variable of non-literal type in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6730" name="warn_cxx20_compat_constinit">
        <segment state="initial">
          <source>'constinit' specifier is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6731" name="warn_cxx20_compat_operator_overload_static">
        <segment state="initial">
          <source>declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6732" name="warn_cxx20_compat_use_of_unaddressable_function">
        <segment state="initial">
          <source>taking address of non-addressable standard library function is incompatible with C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6733" name="warn_cxx20_compat_utf8_string">
        <segment state="initial">
          <source>type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6734" name="warn_cxx23_pack_indexing">
        <segment state="initial">
          <source>pack indexing is incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6735" name="warn_cxx23_placeholder_var_definition">
        <segment state="initial">
          <source>placeholder variables are incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6736" name="warn_cxx26_type_aware_allocators">
        <segment state="initial">
          <source>type aware allocators are incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6737" name="warn_cxx98_compat_array_size_conversion">
        <segment state="initial">
          <source>implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6738" name="warn_cxx98_compat_auto_type_specifier">
        <segment state="initial">
          <source>'auto' type specifier is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6739" name="warn_cxx98_compat_cast_fn_obj">
        <segment state="initial">
          <source>cast between pointer-to-function and pointer-to-object is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6740" name="warn_cxx98_compat_constexpr">
        <segment state="initial">
          <source>'constexpr' specifier is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6741" name="warn_cxx98_compat_ctor_list_init">
        <segment state="initial">
          <source>constructor call from initializer list is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6742" name="warn_cxx98_compat_delegating_ctor">
        <segment state="initial">
          <source>delegating constructors are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6743" name="warn_cxx98_compat_empty_scalar_initializer">
        <segment state="initial">
          <source>scalar initialized from empty initializer list is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6744" name="warn_cxx98_compat_empty_sizeless_initializer">
        <segment state="initial">
          <source>initializing %0 from an empty initializer list is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6745" name="warn_cxx98_compat_enum_nested_name_spec">
        <segment state="initial">
          <source>enumeration type in nested name specifier is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6746" name="warn_cxx98_compat_explicit_conversion_functions">
        <segment state="initial">
          <source>explicit conversion functions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6747" name="warn_cxx98_compat_friend_is_member">
        <segment state="initial">
          <source>friend declaration naming a member of the declaring class is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6748" name="warn_cxx98_compat_goto_into_protected_scope">
        <segment state="initial">
          <source>jump from this goto statement to its label is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6749" name="warn_cxx98_compat_indirect_goto_in_protected_scope">
        <segment state="initial">
          <source>jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6750" name="warn_cxx98_compat_initializer_list_init">
        <segment state="initial">
          <source>initialization of initializer_list object is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6751" name="warn_cxx98_compat_non_static_member_use">
        <segment state="initial">
          <source>use of non-static data member %0 in an unevaluated context is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6752" name="warn_cxx98_compat_nontrivial_union_or_anon_struct_member">
        <segment state="initial">
          <source>%select{anonymous struct|union}0 member %1 with a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2 is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6753" name="warn_cxx98_compat_pass_non_pod_arg_to_vararg">
        <segment state="initial">
          <source>passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6754" name="warn_cxx98_compat_reference_list_init">
        <segment state="initial">
          <source>reference initialized from initializer list is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6755" name="warn_cxx98_compat_sfinae_access_control">
        <segment state="initial">
          <source>substitution failure due to access control is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6756" name="warn_cxx98_compat_switch_into_protected_scope">
        <segment state="initial">
          <source>jump from switch statement to this case label is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6757" name="warn_cxx98_compat_temp_copy">
        <segment state="initial">
          <source>%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6758" name="warn_cxx98_compat_template_arg_local_type">
        <segment state="initial">
          <source>local type %0 as template argument is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6759" name="warn_cxx98_compat_template_arg_null">
        <segment state="initial">
          <source>use of null pointer as non-type template argument is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6760" name="warn_cxx98_compat_template_arg_object_internal">
        <segment state="initial">
          <source>non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6761" name="warn_cxx98_compat_template_arg_unnamed_type">
        <segment state="initial">
          <source>unnamed type as template argument is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6762" name="warn_cxx98_compat_template_outside_of_template">
        <segment state="initial">
          <source>use of 'template' keyword outside of a template is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6763" name="warn_cxx98_compat_unelaborated_friend_type">
        <segment state="initial">
          <source>befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6764" name="warn_cxx98_compat_unicode_type">
        <segment state="initial">
          <source>'%0' type specifier is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6765" name="warn_cxx98_compat_using_decl_constructor">
        <segment state="initial">
          <source>inheriting constructors are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6766" name="warn_cxx_compat_hack_fake_diagnostic_do_not_emit">
        <segment state="initial">
          <source>if you see this diagnostic, a Clang developer has made a mistake</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6767" name="warn_cxx_compat_tentative_definition">
        <segment state="initial">
          <source>duplicate declaration of %0 is invalid in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6768" name="warn_cxx_ms_struct">
        <segment state="initial">
          <source>ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6769" name="warn_cxxstruct_memaccess">
        <segment state="initial">
          <source>first argument in call to %0 is a pointer to non-trivially copyable type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6770" name="warn_dangling_lifetime_pointer">
        <segment state="initial">
          <source>object backing the pointer will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6771" name="warn_dangling_lifetime_pointer_assignment">
        <segment state="initial">
          <source>object backing the pointer %0 will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6772" name="warn_dangling_lifetime_pointer_member">
        <segment state="initial">
          <source>initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6773" name="warn_dangling_member">
        <segment state="initial">
          <source>%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6774" name="warn_dangling_pointer_assignment">
        <segment state="initial">
          <source>object backing %select{|the pointer }0%1 will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6775" name="warn_dangling_reference_captured">
        <segment state="initial">
          <source>object whose reference is captured by %0 will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6776" name="warn_dangling_reference_captured_by_unknown">
        <segment state="initial">
          <source>object whose reference is captured will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6777" name="warn_dangling_variable">
        <segment state="initial">
          <source>%select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6778" name="warn_dealloc_in_category">
        <segment state="initial">
          <source>-dealloc is being overridden in a category</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6779" name="warn_decl_hidden_in_cpp">
        <segment state="initial">
          <source>%select{struct|union|enum}0 defined within a struct or union is not visible in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6780" name="warn_decl_in_param_list">
        <segment state="initial">
          <source>declaration of %0 will not be visible outside of this function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6781" name="warn_decl_shadow">
        <segment state="initial">
          <source>declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6782" name="warn_decl_shadow_uncaptured_local">
        <segment state="initial">
          <source>declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6783" name="warn_declspec_allocator_nonpointer">
        <segment state="initial">
          <source>ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6784" name="warn_declspec_attribute_ignored">
        <segment state="initial">
          <source>attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6785" name="warn_deep_exception_specs_differ">
        <segment state="initial">
          <source>exception specifications of %select{return|argument}0 types differ</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6786" name="warn_def_missing_case">
        <segment state="initial">
          <source>%plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6787" name="warn_default_atomic_custom_getter_setter">
        <segment state="initial">
          <source>atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6788" name="warn_default_init_const">
        <segment state="initial">
          <source>default initialization of an object of type %0 is incompatible with C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6789" name="warn_default_init_const_field">
        <segment state="initial">
          <source>default initialization of an object of type %0 with const member is incompatible with C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6790" name="warn_default_init_const_field_unsafe">
        <segment state="initial">
          <source>default initialization of an object of type %0 with const member leaves the object uninitialized%select{| and is incompatible with C++}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6791" name="warn_default_init_const_unsafe">
        <segment state="initial">
          <source>default initialization of an object of type %0 leaves the object uninitialized%select{| and is incompatible with C++}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6792" name="warn_defaulted_comparison_deleted">
        <segment state="initial">
          <source>explicitly defaulted %select{&lt;ERROR&gt;|equality|three-way|equality|relational}0 comparison operator is implicitly deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6793" name="warn_defaulted_method_deleted">
        <segment state="initial">
          <source>explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is implicitly deleted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6794" name="warn_delegating_ctor_cycle">
        <segment state="initial">
          <source>constructor for %0 creates a delegation cycle</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6795" name="warn_delete_abstract_non_virtual_dtor">
        <segment state="initial">
          <source>%select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6796" name="warn_delete_array_type">
        <segment state="initial">
          <source>'delete' applied to a pointer-to-array type %0 treated as 'delete[]'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6797" name="warn_delete_incomplete">
        <segment state="initial">
          <source>deleting pointer to incomplete type %0 is incompatible with C++2c and may cause undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6798" name="warn_delete_non_virtual_dtor">
        <segment state="initial">
          <source>%select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6799" name="warn_depr_array_comparison">
        <segment state="initial">
          <source>comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6800" name="warn_deprecated">
        <segment state="initial">
          <source>%0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6801" name="warn_deprecated_altivec_src_compat">
        <segment state="initial">
          <source>current handling of vector bool and vector pixel types in this context are deprecated; the default behaviour will soon change to that implied by the '-altivec-compat=xl' option</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6802" name="warn_deprecated_anonymous_namespace">
        <segment state="initial">
          <source>'deprecated' attribute on anonymous namespace ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6803" name="warn_deprecated_builtin">
        <segment state="initial">
          <source>builtin %0 is deprecated; use %1 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6804" name="warn_deprecated_comma_subscript">
        <segment state="initial">
          <source>top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6805" name="warn_deprecated_copy">
        <segment state="initial">
          <source>definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6806" name="warn_deprecated_copy_with_dtor">
        <segment state="initial">
          <source>definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6807" name="warn_deprecated_copy_with_user_provided_copy">
        <segment state="initial">
          <source>definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6808" name="warn_deprecated_copy_with_user_provided_dtor">
        <segment state="initial">
          <source>definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6809" name="warn_deprecated_def">
        <segment state="initial">
          <source>implementing deprecated %select{method|class|category}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6810" name="warn_deprecated_fwdclass_message">
        <segment state="initial">
          <source>%0 may be deprecated because the receiver type is unknown</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6811" name="warn_deprecated_ignored_on_using">
        <segment state="initial">
          <source>%0 currently has no effect on a using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6812" name="warn_deprecated_increment_decrement_volatile">
        <segment state="initial">
          <source>%select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6813" name="warn_deprecated_lax_vec_conv_all">
        <segment state="initial">
          <source>implicit conversion between vector types ('%0' and '%1') is deprecated; in the future, the behavior implied by '-fno-lax-vector-conversions' will be the default</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6814" name="warn_deprecated_literal_operator_id">
        <segment state="initial">
          <source>identifier %0 preceded by whitespace in a literal operator declaration is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6815" name="warn_deprecated_message">
        <segment state="initial">
          <source>%0 is deprecated: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6816" name="warn_deprecated_noreturn_spelling">
        <segment state="initial">
          <source>the '[[_Noreturn]]' attribute spelling is deprecated in C23; use '[[noreturn]]' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6817" name="warn_deprecated_redundant_constexpr_static_def">
        <segment state="initial">
          <source>out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6818" name="warn_deprecated_register">
        <segment state="initial">
          <source>'register' storage class specifier is deprecated and incompatible with C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6819" name="warn_deprecated_simple_assign_volatile">
        <segment state="initial">
          <source>use of result of assignment to object of volatile-qualified type %0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6820" name="warn_deprecated_string_literal_conversion">
        <segment state="initial">
          <source>conversion from string literal to %0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6821" name="warn_deprecated_this_capture">
        <segment state="initial">
          <source>implicit capture of 'this' with a capture default of '=' is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6822" name="warn_deprecated_volatile_param">
        <segment state="initial">
          <source>volatile-qualified parameter type %0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6823" name="warn_deprecated_volatile_return">
        <segment state="initial">
          <source>volatile-qualified return type %0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6824" name="warn_deprecated_volatile_structured_binding">
        <segment state="initial">
          <source>volatile qualifier in structured binding declaration is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6825" name="warn_dereference_of_noderef_type">
        <segment state="initial">
          <source>dereferencing %0; was declared with a 'noderef' type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6826" name="warn_dereference_of_noderef_type_no_decl">
        <segment state="initial">
          <source>dereferencing expression marked as 'noderef'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6827" name="warn_diagnose_if_succeeded">
        <segment state="initial">
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6828" name="warn_direct_initialize_call">
        <segment state="initial">
          <source>explicit call to +initialize results in duplicate call to +initialize</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6829" name="warn_direct_ivar_access">
        <segment state="initial">
          <source>instance variable %0 is being directly accessed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6830" name="warn_direct_super_initialize_call">
        <segment state="initial">
          <source>explicit call to [super initialize] should only be in implementation of +initialize</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6831" name="warn_dispatch_body_ignored">
        <segment state="initial">
          <source>body of cpu_dispatch function will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6832" name="warn_division_sizeof_array">
        <segment state="initial">
          <source>expression does not compute the number of elements in this array; element type is %0, not %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6833" name="warn_division_sizeof_ptr">
        <segment state="initial">
          <source>%0 will return the size of the pointer, not the array itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6834" name="warn_dllimport_dropped_from_inline_function">
        <segment state="initial">
          <source>%q0 redeclared inline; %1 attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6835" name="warn_double_const_requires_fp64">
        <segment state="initial">
          <source>double precision constant requires %select{cl_khr_fp64|cl_khr_fp64 and __opencl_c_fp64}0, casting to single precision</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6836" name="warn_double_lock">
        <segment state="initial">
          <source>acquiring %0 '%1' that is already held</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6837" name="warn_duplicate_attribute">
        <segment state="initial">
          <source>attribute %0 is already applied with different arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6838" name="warn_duplicate_attribute_exact">
        <segment state="initial">
          <source>attribute %0 is already applied</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6839" name="warn_duplicate_codeseg_attribute">
        <segment state="initial">
          <source>duplicate code segment specifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6840" name="warn_duplicate_enum_values">
        <segment state="initial">
          <source>element %0 has been implicitly assigned %1 which another element has been assigned</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6841" name="warn_duplicate_method_decl">
        <segment state="initial">
          <source>multiple declarations of method %0 found and ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6842" name="warn_duplicate_protocol_def">
        <segment state="initial">
          <source>duplicate protocol definition of %0 is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6843" name="warn_dyn_class_memaccess">
        <segment state="initial">
          <source>%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6844" name="warn_empty_for_body">
        <segment state="initial">
          <source>for loop has empty body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6845" name="warn_empty_format_string">
        <segment state="initial">
          <source>format string is empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6846" name="warn_empty_if_body">
        <segment state="initial">
          <source>if statement has empty body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6847" name="warn_empty_parens_are_function_decl">
        <segment state="initial">
          <source>empty parentheses interpreted as a function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6848" name="warn_empty_range_based_for_body">
        <segment state="initial">
          <source>range-based for loop has empty body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6849" name="warn_empty_switch_body">
        <segment state="initial">
          <source>switch statement has empty body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6850" name="warn_empty_while_body">
        <segment state="initial">
          <source>while loop has empty body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6851" name="warn_enum_constant_in_bool_context">
        <segment state="initial">
          <source>converting the enum constant to a boolean</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6852" name="warn_equality_with_extra_parens">
        <segment state="initial">
          <source>equality comparison with extraneous parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6853" name="warn_exception_caught_by_earlier_handler">
        <segment state="initial">
          <source>exception of type %0 will be caught by earlier handler</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6854" name="warn_excess_precision_not_supported">
        <segment state="initial">
          <source>excess precision is requested but the target does not support excess precision which may result in observable differences in complex division behavior%select{|, additional uses where the requested higher precision cannot be honored were found but not diagnosed}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6855" name="warn_exit_time_destructor">
        <segment state="initial">
          <source>declaration requires an exit-time destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6856" name="warn_expect_fewer_underlying_mutexes">
        <segment state="initial">
          <source>did not expect %0 '%2' to be managed by '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6857" name="warn_expect_more_underlying_mutexes">
        <segment state="initial">
          <source>%0 '%2' not managed by '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6858" name="warn_expecting_lock_held_on_loop">
        <segment state="initial">
          <source>expecting %0 '%1' to be held at start of each loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6859" name="warn_expecting_locked">
        <segment state="initial">
          <source>expecting %0 '%1' to be held at the end of function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6860" name="warn_experimental_header_unit">
        <segment state="initial">
          <source>the implementation of header units is in an experimental phase</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6861" name="warn_explicit_instantiation_after_specialization">
        <segment state="initial">
          <source>explicit instantiation of %0 that occurs after an explicit specialization has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6862" name="warn_explicit_instantiation_inline_0x">
        <segment state="initial">
          <source>explicit instantiation cannot be 'inline'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6863" name="warn_explicit_instantiation_must_be_global_0x">
        <segment state="initial">
          <source>explicit instantiation of %0 must occur at global scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6864" name="warn_explicit_instantiation_out_of_scope_0x">
        <segment state="initial">
          <source>explicit instantiation of %0 not in a namespace enclosing %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6865" name="warn_explicit_instantiation_unqualified_wrong_namespace_0x">
        <segment state="initial">
          <source>explicit instantiation of %q0 must occur in namespace %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6866" name="warn_extern_init">
        <segment state="initial">
          <source>'extern' variable has an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6867" name="warn_falloff_nonvoid">
        <segment state="initial">
          <source>non-void %select{function|block|lambda|coroutine}0 does not return a value%select{| in all control paths}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6868" name="warn_field_is_uninit">
        <segment state="initial">
          <source>field %0 is uninitialized when used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6869" name="warn_field_requires_explicit_init">
        <segment state="initial">
          <source>field %select{%1|in %1}0 requires explicit initialization but is not explicitly initialized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6870" name="warn_final_dtor_non_final_class">
        <segment state="initial">
          <source>class with destructor marked '%select{final|sealed}0' cannot be inherited from</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6871" name="warn_flag_enum_constant_out_of_range">
        <segment state="initial">
          <source>enumeration value %0 is out of range of flags in enumeration type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6872" name="warn_float_compare_literal">
        <segment state="initial">
          <source>floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6873" name="warn_float_overflow">
        <segment state="initial">
          <source>magnitude of floating-point constant too large for type %0; maximum is %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6874" name="warn_float_underflow">
        <segment state="initial">
          <source>magnitude of floating-point constant too small for type %0; minimum is %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6875" name="warn_floatingpoint_eq">
        <segment state="initial">
          <source>comparing floating point with == or != is unsafe</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6876" name="warn_for_range_begin_end_types_differ">
        <segment state="initial">
          <source>'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6877" name="warn_for_range_const_ref_binds_temp_built_from_ref">
        <segment state="initial">
          <source>loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6878" name="warn_for_range_copy">
        <segment state="initial">
          <source>loop variable %0 creates a copy from type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6879" name="warn_for_range_ref_binds_ret_temp">
        <segment state="initial">
          <source>loop variable %0 binds to a temporary value produced by a range of type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6880" name="warn_format_P_no_precision">
        <segment state="initial">
          <source>using '%%P' format specifier without precision</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6881" name="warn_format_P_with_objc_pointer">
        <segment state="initial">
          <source>using '%%P' format specifier with an Objective-C pointer results in dumping runtime object structure, not object value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6882" name="warn_format_argument_needs_cast">
        <segment state="initial">
          <source>%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6883" name="warn_format_argument_needs_cast_pedantic">
        <segment state="initial">
          <source>%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6884" name="warn_format_bool_as_character">
        <segment state="initial">
          <source>using '%0' format specifier, but argument has boolean value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6885" name="warn_format_cmp_modifierfor_mismatch">
        <segment state="initial">
          <source>format argument modifies specifier at position %0, but it should modify specifier at position %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6886" name="warn_format_cmp_role_mismatch">
        <segment state="initial">
          <source>format argument is %select{a value|an indirect field width|an indirect precision|an auxiliary value}0, but it should be %select{a value|an indirect field width|an indirect precision|an auxiliary value}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6887" name="warn_format_cmp_sensitivity_mismatch">
        <segment state="initial">
          <source>argument sensitivity is %select{unspecified|private|public|sensitive}0, but it should be %select{unspecified|private|public|sensitive}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6888" name="warn_format_cmp_specifier_arity">
        <segment state="initial">
          <source>%select{fewer|more}0 specifiers in format string than expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6889" name="warn_format_cmp_specifier_mismatch">
        <segment state="initial">
          <source>format specifier '%0' is incompatible with '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6890" name="warn_format_cmp_specifier_mismatch_pedantic">
        <segment state="initial">
          <source>signedness of format specifier '%0' is incompatible with '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6891" name="warn_format_cmp_specifier_sign_mismatch">
        <segment state="initial">
          <source>signedness of format specifier '%0' is incompatible with '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6892" name="warn_format_conversion_argument_type_mismatch">
        <segment state="initial">
          <source>format specifies type %0 but the argument has %select{type|underlying type}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6893" name="warn_format_conversion_argument_type_mismatch_confusion">
        <segment state="initial">
          <source>format specifies type %0 but the argument has %select{type|underlying type}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6894" name="warn_format_conversion_argument_type_mismatch_pedantic">
        <segment state="initial">
          <source>format specifies type %0 but the argument has %select{type|underlying type}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6895" name="warn_format_conversion_argument_type_mismatch_signedness">
        <segment state="initial">
          <source>format specifies type %0 but the argument has %select{type|underlying type}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6896" name="warn_format_invalid_annotation">
        <segment state="initial">
          <source>using '%0' format specifier annotation outside of os_log()/os_trace()</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6897" name="warn_format_invalid_conversion">
        <segment state="initial">
          <source>invalid conversion specifier '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6898" name="warn_format_invalid_positional_specifier">
        <segment state="initial">
          <source>invalid position specified for %select{field width|field precision}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6899" name="warn_format_mix_positional_nonpositional_args">
        <segment state="initial">
          <source>cannot mix positional and non-positional arguments in format string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6900" name="warn_format_non_standard">
        <segment state="initial">
          <source>'%0' %select{length modifier|conversion specifier}1 is not supported by ISO C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6901" name="warn_format_non_standard_conversion_spec">
        <segment state="initial">
          <source>using length modifier '%0' with conversion specifier '%1' is not supported by ISO C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6902" name="warn_format_non_standard_positional_arg">
        <segment state="initial">
          <source>positional arguments are not supported by ISO C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6903" name="warn_format_nonliteral">
        <segment state="initial">
          <source>format string is not a string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6904" name="warn_format_nonliteral_noargs">
        <segment state="initial">
          <source>format string is not a string literal (potentially insecure)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6905" name="warn_format_nonsensical_length">
        <segment state="initial">
          <source>length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6906" name="warn_format_overflow">
        <segment state="initial">
          <source>'%0' will always overflow; destination buffer has size %1, but format string expands to at least %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6907" name="warn_format_overflow_non_kprintf">
        <segment state="initial">
          <source>'%0' will always overflow; destination buffer has size %1, but format string expands to at least %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6908" name="warn_format_string_is_wide_literal">
        <segment state="initial">
          <source>format string should not be a wide string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6909" name="warn_format_string_type_incompatible">
        <segment state="initial">
          <source>passing '%0' format string where '%1' format string is expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6910" name="warn_format_truncation">
        <segment state="initial">
          <source>'%0' will always be truncated; specified size is %1, but format string expands to at least %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6911" name="warn_format_truncation_non_kprintf">
        <segment state="initial">
          <source>'%0' will always be truncated; specified size is %1, but format string expands to at least %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6912" name="warn_format_zero_positional_specifier">
        <segment state="initial">
          <source>position arguments in format strings start counting at 1 (not 0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6913" name="warn_fortify_scanf_overflow">
        <segment state="initial">
          <source>'%0' may overflow; destination buffer in argument %1 has size %2, but the corresponding specifier may require size %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6914" name="warn_fortify_source_overflow">
        <segment state="initial">
          <source>'%0' will always overflow; destination buffer has size %1, but size argument is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6915" name="warn_fortify_source_size_mismatch">
        <segment state="initial">
          <source>'%0' size argument is too large; destination buffer has size %1, but size argument is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6916" name="warn_fortify_strlen_overflow">
        <segment state="initial">
          <source>'%0' will always overflow; destination buffer has size %1, but the source string has length %2 (including NUL byte)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6917" name="warn_forward_class_redefinition">
        <segment state="initial">
          <source>redefinition of forward class %0 of a typedef name of an object type is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6918" name="warn_frame_address">
        <segment state="initial">
          <source>calling '%0' with a nonzero argument is unsafe</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6919" name="warn_free_nonheap_object">
        <segment state="initial">
          <source>attempt to call %0 on non-heap %select{object %2|object: block expression|object: lambda-to-function-pointer conversion}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6920" name="warn_fun_excludes_mutex">
        <segment state="initial">
          <source>cannot call function '%1' while %0 '%2' is held</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6921" name="warn_fun_requires_lock">
        <segment state="initial">
          <source>calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6922" name="warn_fun_requires_lock_precise">
        <segment state="initial">
          <source>calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6923" name="warn_fun_requires_negative_cap">
        <segment state="initial">
          <source>calling function %0 requires negative capability '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6924" name="warn_func_effect_calls_expr_without_effect">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not call non-'%1' expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6925" name="warn_func_effect_calls_func_without_effect">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not call non-'%1' %select{function|constructor|destructor|lambda|block}2 '%3'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6926" name="warn_func_effect_violation">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not %select{allocate or deallocate memory|throw or catch exceptions|have static local variables|use thread-local variables|access ObjC methods or properties}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6927" name="warn_func_template_missing">
        <segment state="initial">
          <source>instantiation of function %q0 required here, but no definition is available</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6928" name="warn_function_attribute_ignored_in_stmt">
        <segment state="initial">
          <source>attribute is ignored on this statement as it only applies to functions; use '%0' on statements</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6929" name="warn_function_def_in_objc_container">
        <segment state="initial">
          <source>function definition inside an Objective-C container is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6930" name="warn_function_stmt_attribute_precedence">
        <segment state="initial">
          <source>statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6931" name="warn_gc_attribute_weak_on_local">
        <segment state="initial">
          <source>Objective-C GC does not allow weak variables on the stack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6932" name="warn_gcc_ignores_type_attr">
        <segment state="initial">
          <source>GCC does not allow the %0 attribute to be written on a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6933" name="warn_gcc_requires_variadic_function">
        <segment state="initial">
          <source>GCC requires a function with the %0 attribute to be variadic</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6934" name="warn_global_constructor">
        <segment state="initial">
          <source>declaration requires a global constructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6935" name="warn_global_destructor">
        <segment state="initial">
          <source>declaration requires a global destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6936" name="warn_gnu_inline_attribute_requires_inline">
        <segment state="initial">
          <source>'gnu_inline' attribute requires function to be marked 'inline', attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6937" name="warn_gnu_inline_cplusplus_without_extern">
        <segment state="initial">
          <source>'gnu_inline' attribute without 'extern' in C++ treated as externally available, this changed in Clang 10</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6938" name="warn_gnu_null_ptr_arith">
        <segment state="initial">
          <source>arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6939" name="warn_guarded_pass_by_reference">
        <segment state="initial">
          <source>passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6940" name="warn_guarded_pass_pointer">
        <segment state="initial">
          <source>passing pointer to variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6941" name="warn_guarded_return_by_reference">
        <segment state="initial">
          <source>returning variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6942" name="warn_guarded_return_pointer">
        <segment state="initial">
          <source>returning pointer to variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6943" name="warn_hip_omp_target_directives">
        <segment state="initial">
          <source>HIP does not support OpenMP target directives; directive has been ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6944" name="warn_hlsl_availability">
        <segment state="initial">
          <source>%0 is only available %select{|in %4 environment }3on %1 %2 or newer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6945" name="warn_hlsl_availability_unavailable">
        <segment state="initial">
          <source>%0 is unavailable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6946" name="warn_hlsl_deprecated_register_type_b">
        <segment state="initial">
          <source>binding type 'b' only applies to constant buffers. The 'bool constant' binding type is no longer supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6947" name="warn_hlsl_deprecated_register_type_i">
        <segment state="initial">
          <source>binding type 'i' ignored. The 'integer constant' binding type is no longer supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6948" name="warn_hlsl_impcast_vector_truncation">
        <segment state="initial">
          <source>implicit conversion truncates vector: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6949" name="warn_hlsl_implicit_binding">
        <segment state="initial">
          <source>resource has implicit register binding</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6950" name="warn_hlsl_packoffset_mix">
        <segment state="initial">
          <source>cannot mix packoffset elements with nonpackoffset elements in a cbuffer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6951" name="warn_hlsl_register_type_c_packoffset">
        <segment state="initial">
          <source>binding type 'c' ignored in buffer declaration. Did you mean 'packoffset'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6952" name="warn_hlsl_user_defined_type_missing_member">
        <segment state="initial">
          <source>binding type '%select{t|u|b|s|c}0' only applies to types containing %select{SRV resources|UAV resources|constant buffer resources|sampler state|numeric types}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6953" name="warn_iboutlet_object_type">
        <segment state="initial">
          <source>%select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6954" name="warn_iboutletcollection_property_assign">
        <segment state="initial">
          <source>IBOutletCollection properties should be copy/strong and not assign</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6955" name="warn_identity_field_assign">
        <segment state="initial">
          <source>assigning %select{field|instance variable}0 to itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6956" name="warn_ignored_ms_inheritance">
        <segment state="initial">
          <source>inheritance model ignored on %select{primary template|partial specialization}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6957" name="warn_ignored_objc_externally_retained">
        <segment state="initial">
          <source>'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6958" name="warn_imp_cast_drops_unaligned">
        <segment state="initial">
          <source>implicit cast from type %0 to type %1 drops __unaligned qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6959" name="warn_impcast_bitfield_precision_constant">
        <segment state="initial">
          <source>implicit truncation from %2 to bit-field changes value from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6960" name="warn_impcast_bool_to_null_pointer">
        <segment state="initial">
          <source>initialization of pointer of type %0 to null from a constant boolean expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6961" name="warn_impcast_complex_scalar">
        <segment state="initial">
          <source>implicit conversion discards imaginary component: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6962" name="warn_impcast_constant_value_to_objc_bool">
        <segment state="initial">
          <source>implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6963" name="warn_impcast_different_enum_types">
        <segment state="initial">
          <source>implicit conversion from enumeration type %0 to different enumeration type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6964" name="warn_impcast_double_promotion">
        <segment state="initial">
          <source>implicit conversion increases floating-point precision: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6965" name="warn_impcast_fixed_point_range">
        <segment state="initial">
          <source>implicit conversion from %0 cannot fit within the range of values for %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6966" name="warn_impcast_float_integer">
        <segment state="initial">
          <source>implicit conversion turns floating-point number into integer: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6967" name="warn_impcast_float_precision">
        <segment state="initial">
          <source>implicit conversion loses floating-point precision: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6968" name="warn_impcast_float_result_precision">
        <segment state="initial">
          <source>implicit conversion when assigning computation result loses floating-point precision: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6969" name="warn_impcast_float_to_integer">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 changes value from %2 to %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6970" name="warn_impcast_float_to_integer_out_of_range">
        <segment state="initial">
          <source>implicit conversion of out of range value from %0 to %1 is undefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6971" name="warn_impcast_float_to_integer_zero">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 changes non-zero value from %2 to %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6972" name="warn_impcast_float_to_objc_signed_char_bool">
        <segment state="initial">
          <source>implicit conversion from floating-point type %0 to 'BOOL'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6973" name="warn_impcast_floating_point_to_bool">
        <segment state="initial">
          <source>implicit conversion turns floating-point number into bool: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6974" name="warn_impcast_high_order_zero_bits">
        <segment state="initial">
          <source>higher order bits are zeroes after implicit conversion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6975" name="warn_impcast_int_to_enum">
        <segment state="initial">
          <source>implicit conversion from %0 to enumeration type %1 is invalid in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6976" name="warn_impcast_int_to_objc_signed_char_bool">
        <segment state="initial">
          <source>implicit conversion from integral type %0 to 'BOOL'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6977" name="warn_impcast_integer_64_32">
        <segment state="initial">
          <source>implicit conversion loses integer precision: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6978" name="warn_impcast_integer_float_precision">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 may lose precision</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6979" name="warn_impcast_integer_float_precision_constant">
        <segment state="initial">
          <source>implicit conversion from %2 to %3 changes value from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6980" name="warn_impcast_integer_precision">
        <segment state="initial">
          <source>implicit conversion loses integer precision: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6981" name="warn_impcast_integer_precision_constant">
        <segment state="initial">
          <source>implicit conversion from %2 to %3 changes value from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6982" name="warn_impcast_integer_sign">
        <segment state="initial">
          <source>implicit conversion changes signedness: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6983" name="warn_impcast_integer_sign_conditional">
        <segment state="initial">
          <source>operand of ? changes signedness: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6984" name="warn_impcast_literal_float_to_integer">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 changes value from %2 to %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6985" name="warn_impcast_literal_float_to_integer_out_of_range">
        <segment state="initial">
          <source>implicit conversion of out of range value from %0 to %1 is undefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6986" name="warn_impcast_nonnegative_result">
        <segment state="initial">
          <source>the resulting value is always non-negative after implicit conversion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6987" name="warn_impcast_null_pointer_to_integer">
        <segment state="initial">
          <source>implicit conversion of %select{NULL|nullptr}0 constant to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6988" name="warn_impcast_objective_c_literal_to_bool">
        <segment state="initial">
          <source>implicit boolean conversion of Objective-C object literal always evaluates to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6989" name="warn_impcast_pointer_to_bool">
        <segment state="initial">
          <source>address of %select{'%1'|function '%1'|array '%1'|lambda function pointer conversion operator}0 will always evaluate to 'true'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6990" name="warn_impcast_single_bit_bitield_precision_constant">
        <segment state="initial">
          <source>implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6991" name="warn_impcast_string_literal_to_bool">
        <segment state="initial">
          <source>implicit conversion turns string literal into bool: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6992" name="warn_impcast_unicode_char_type">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 may change the meaning of the represented code unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6993" name="warn_impcast_unicode_char_type_constant">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 changes the meaning of the %select{code unit|code point}2 '%3'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6994" name="warn_impcast_unicode_precision">
        <segment state="initial">
          <source>implicit conversion from %0 to %1 may lose precision and change the meaning of the represented code unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6995" name="warn_impcast_vector_scalar">
        <segment state="initial">
          <source>implicit conversion turns vector to scalar: %0 to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6996" name="warn_impl_required_for_class_property">
        <segment state="initial">
          <source>class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6997" name="warn_impl_required_in_category_for_class_property">
        <segment state="initial">
          <source>class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6998" name="warn_implements_nscopying">
        <segment state="initial">
          <source>default assign attribute on property %0 which implements NSCopying protocol is not appropriate with -fobjc-gc[-only]</source>
          <target></target>
        </segment>
      </unit>
      <unit id="6999" name="warn_implicit_atomic_property">
        <segment state="initial">
          <source>property is assumed atomic by default</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7000" name="warn_implicit_decl_no_jmp_buf">
        <segment state="initial">
          <source>declaration of built-in function '%0' requires the declaration of the 'jmp_buf' type, commonly provided in the header &lt;setjmp.h&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7001" name="warn_implicit_decl_requires_sysheader">
        <segment state="initial">
          <source>declaration of built-in function '%1' requires inclusion of the header &lt;%0&gt;</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7002" name="warn_implicit_function_decl">
        <segment state="initial">
          <source>implicit declaration of function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7003" name="warn_implicitly_retains_self">
        <segment state="initial">
          <source>block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7004" name="warn_import_implementation_partition_unit_in_interface_unit">
        <segment state="initial">
          <source>importing an implementation partition unit in a module interface is not recommended. Names from %0 may not be reachable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7005" name="warn_import_on_definition">
        <segment state="initial">
          <source>import %select{module|name}0 cannot be applied to a function with a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7006" name="warn_inaccessible_base_class">
        <segment state="initial">
          <source>direct base %0 is inaccessible due to ambiguity:%1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7007" name="warn_incompatible_exception_specs">
        <segment state="initial">
          <source>target exception specification is not superset of source</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7008" name="warn_incompatible_qualified_id">
        <segment state="initial">
          <source>%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7009" name="warn_incompatible_vectors">
        <segment state="initial">
          <source>incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7010" name="warn_incomplete_encoded_type">
        <segment state="initial">
          <source>encoding of %0 type is incomplete because %1 component has unknown encoding</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7011" name="warn_inconsistent_array_form">
        <segment state="initial">
          <source>argument %0 of type %1 with mismatched bound</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7012" name="warn_inconsistent_destructor_marked_not_override_overriding">
        <segment state="initial">
          <source>%0 overrides a destructor but is not marked 'override'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7013" name="warn_inconsistent_function_marked_not_override_overriding">
        <segment state="initial">
          <source>%0 overrides a member function but is not marked 'override'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7014" name="warn_increment_bool">
        <segment state="initial">
          <source>incrementing expression of type bool is deprecated and incompatible with C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7015" name="warn_independentclass_attribute">
        <segment state="initial">
          <source>'objc_independent_class' attribute may be put on a typedef only; attribute is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7016" name="warn_indirection_through_null">
        <segment state="initial">
          <source>indirection of non-volatile null pointer will be deleted, not trap</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7017" name="warn_infinite_recursive_function">
        <segment state="initial">
          <source>all paths through this function will call itself</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7018" name="warn_init_list_constant_narrowing">
        <segment state="initial">
          <source>constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7019" name="warn_init_list_type_narrowing">
        <segment state="initial">
          <source>type %0 cannot be narrowed to %1 in initializer list in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7020" name="warn_init_list_variable_narrowing">
        <segment state="initial">
          <source>non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7021" name="warn_init_priority_reserved">
        <segment state="initial">
          <source>requested 'init_priority' %0 is reserved for internal use</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7022" name="warn_init_ptr_member_to_parameter_addr">
        <segment state="initial">
          <source>initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7023" name="warn_initializer_out_of_order">
        <segment state="initial">
          <source>%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7024" name="warn_initializer_overrides">
        <segment state="initial">
          <source>initializer %select{partially |}0overrides prior initialization of this subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7025" name="warn_initializer_string_for_char_array_too_long_for_cpp">
        <segment state="initial">
          <source>initializer-string for character array is too long for C++, array size is %0 but initializer has size %1 (including the null terminating character)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7026" name="warn_initializer_string_for_char_array_too_long_no_nonstring">
        <segment state="initial">
          <source>initializer-string for character array is too long, array size is %0 but initializer has size %1 (including the null terminating character); did you mean to use the 'nonstring' attribute?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7027" name="warn_inline_namespace_reopened_noninline">
        <segment state="initial">
          <source>inline namespace reopened as a non-inline namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7028" name="warn_inst_method_not_found">
        <segment state="initial">
          <source>instance method %objcinstance0 not found (return type defaults to 'id')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7029" name="warn_instance_method_not_found_with_typo">
        <segment state="initial">
          <source>instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7030" name="warn_instance_method_on_class_found">
        <segment state="initial">
          <source>instance method %0 found instead of class method %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7031" name="warn_int_to_pointer_cast">
        <segment state="initial">
          <source>cast to %1 from smaller integer type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7032" name="warn_int_to_void_pointer_cast">
        <segment state="initial">
          <source>cast to %1 from smaller integer type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7033" name="warn_integer_constants_in_conditional_always_true">
        <segment state="initial">
          <source>converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7034" name="warn_internal_linkage_local_storage">
        <segment state="initial">
          <source>'internal_linkage' attribute on a non-static local variable is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7035" name="warn_interrupt_signal_attribute_invalid">
        <segment state="initial">
          <source>%select{MIPS|MSP430|RISC-V|AVR}0 '%select{interrupt|signal}1' attribute only applies to functions that have %select{no parameters|a 'void' return type}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7036" name="warn_invalid_add_func_effects">
        <segment state="initial">
          <source>attribute '%0' should not be added via type conversion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7037" name="warn_invalid_asm_cast_lvalue">
        <segment state="initial">
          <source>invalid use of a cast in an inline asm context requiring an lvalue</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7038" name="warn_invalid_cpu_supports">
        <segment state="initial">
          <source>invalid cpu feature string for builtin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7039" name="warn_invalid_initializer_from_system_header">
        <segment state="initial">
          <source>invalid constructor from class in system header, should not be explicit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7040" name="warn_invalid_specialization">
        <segment state="initial">
          <source>%0 cannot be specialized%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7041" name="warn_ivar_use_hidden">
        <segment state="initial">
          <source>local declaration of %0 hides instance variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7042" name="warn_ivars_in_interface">
        <segment state="initial">
          <source>declaration of instance variables in the interface is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7043" name="warn_jump_out_of_seh_finally">
        <segment state="initial">
          <source>jump out of __finally block has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7044" name="warn_kern_is_inline">
        <segment state="initial">
          <source>ignored 'inline' attribute on kernel function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7045" name="warn_kern_is_method">
        <segment state="initial">
          <source>kernel function %0 is a member function; this may not be accepted by nvcc</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7046" name="warn_left_shift_always">
        <segment state="initial">
          <source>converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7047" name="warn_left_shift_in_bool_context">
        <segment state="initial">
          <source>converting the result of '&lt;&lt;' to a boolean; did you mean to compare with '0'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7048" name="warn_lock_exclusive_and_shared">
        <segment state="initial">
          <source>%0 '%1' is acquired exclusively and shared in the same scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7049" name="warn_lock_some_predecessors">
        <segment state="initial">
          <source>%0 '%1' is not held on every path through here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7050" name="warn_logical_and_in_logical_or">
        <segment state="initial">
          <source>'&amp;&amp;' within '||'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7051" name="warn_logical_instead_of_bitwise">
        <segment state="initial">
          <source>use of logical '%0' with constant operand</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7052" name="warn_logical_not_on_lhs_of_check">
        <segment state="initial">
          <source>logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7053" name="warn_loop_ctrl_binds_to_inner">
        <segment state="initial">
          <source>'%0' is bound to current loop, GCC binds it to the enclosing loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7054" name="warn_loop_state_mismatch">
        <segment state="initial">
          <source>state of variable '%0' must match at the entry and exit of loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7055" name="warn_main_one_arg">
        <segment state="initial">
          <source>only one parameter on 'main' declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7056" name="warn_main_redefined">
        <segment state="initial">
          <source>variable named 'main' with external linkage has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7057" name="warn_main_returns_bool_literal">
        <segment state="initial">
          <source>bool literal returned from 'main'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7058" name="warn_max_unsigned_zero">
        <segment state="initial">
          <source>taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7059" name="warn_maybe_capture_bad_target_this_ptr">
        <segment state="initial">
          <source>capture host side class data member by this pointer in device or host device lambda function may result in invalid memory access if this pointer is not accessible on device side</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7060" name="warn_maybe_uninit_var">
        <segment state="initial">
          <source>variable %0 may be uninitialized when %select{used here|captured by block}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7061" name="warn_maynot_respond">
        <segment state="initial">
          <source>%0 may not respond to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7062" name="warn_member_extra_qualification">
        <segment state="initial">
          <source>extra qualification on member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7063" name="warn_memsize_comparison">
        <segment state="initial">
          <source>size argument in %0 call is a comparison</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7064" name="warn_messaging_unqualified_id">
        <segment state="initial">
          <source>messaging unqualified id</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7065" name="warn_mig_server_routine_does_not_return_kern_return_t">
        <segment state="initial">
          <source>'mig_server_routine' attribute only applies to routines that return a kern_return_t</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7066" name="warn_mismatched_availability">
        <segment state="initial">
          <source>availability does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7067" name="warn_mismatched_availability_override">
        <segment state="initial">
          <source>%select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7068" name="warn_mismatched_availability_override_unavail">
        <segment state="initial">
          <source>%select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7069" name="warn_mismatched_delete_new">
        <segment state="initial">
          <source>'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7070" name="warn_mismatched_func_effect_override">
        <segment state="initial">
          <source>attribute '%0' on overriding function does not match base declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7071" name="warn_mismatched_func_effect_redeclaration">
        <segment state="initial">
          <source>attribute '%0' on function does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7072" name="warn_mismatched_import">
        <segment state="initial">
          <source>import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7073" name="warn_mismatched_nullability_attr">
        <segment state="initial">
          <source>nullability specifier %0 conflicts with existing specifier %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7074" name="warn_mismatched_section">
        <segment state="initial">
          <source>%select{codeseg|section}0 does not match previous declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7075" name="warn_missing_braces">
        <segment state="initial">
          <source>suggest braces around initialization of subobject</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7076" name="warn_missing_case">
        <segment state="initial">
          <source>%plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7077" name="warn_missing_case_for_condition">
        <segment state="initial">
          <source>no case matching constant switch condition '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7078" name="warn_missing_designated_field_initializers">
        <segment state="initial">
          <source>missing field %0 initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7079" name="warn_missing_explicit_synthesis">
        <segment state="initial">
          <source>auto property synthesis is synthesizing property not explicitly synthesized</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7080" name="warn_missing_field_initializers">
        <segment state="initial">
          <source>missing field %0 initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7081" name="warn_missing_format_string">
        <segment state="initial">
          <source>format string missing</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7082" name="warn_missing_method_return_type">
        <segment state="initial">
          <source>method has no return type specified; defaults to 'id'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7083" name="warn_missing_prototype">
        <segment state="initial">
          <source>no previous prototype for function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7084" name="warn_missing_sdksettings_for_availability_checking">
        <segment state="initial">
          <source>%0 availability is ignored without a valid 'SDKSettings.json' in the SDK</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7085" name="warn_missing_sentinel">
        <segment state="initial">
          <source>missing sentinel in %select{function call|method dispatch|block call}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7086" name="warn_missing_variable_declarations">
        <segment state="initial">
          <source>no previous extern declaration for non-static variable %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7087" name="warn_mixed_decls_code">
        <segment state="initial">
          <source>mixing declarations and code is incompatible with standards before C99</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7088" name="warn_mixed_sign_comparison">
        <segment state="initial">
          <source>comparison of integers of different signs: %0 and %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7089" name="warn_modifying_shadowing_decl">
        <segment state="initial">
          <source>modifying constructor parameter %0 that shadows a field of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7090" name="warn_ms_bitfield_mismatched_storage_packing">
        <segment state="initial">
          <source>bit-field %0 of type %1 has a different storage size than the preceding bit-field (%2 vs %3 bytes) and will not be packed under the Microsoft ABI</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7091" name="warn_ms_inline_non_function">
        <segment state="initial">
          <source>'inline' can only appear on functions%select{| and non-local variables}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7092" name="warn_multiple_method_decl">
        <segment state="initial">
          <source>multiple methods named %0 found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7093" name="warn_multiple_selectors">
        <segment state="initial">
          <source>several methods with selector %0 of mismatched types are found for the @selector expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7094" name="warn_multiversion_duplicate_entries">
        <segment state="initial">
          <source>CPU list contains duplicate entries; attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7095" name="warn_musttail_local_temp_addr_ref">
        <segment state="initial">
          <source>passing %select{address of|reference to}0 local temporary object to musttail function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7096" name="warn_namespace_member_extra_qualification">
        <segment state="initial">
          <source>extra qualification on member %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7097" name="warn_neon_vector_initializer_non_portable">
        <segment state="initial">
          <source>vector initializers are not compatible with NEON intrinsics in big endian mode</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7098" name="warn_new_dangling_initializer_list">
        <segment state="initial">
          <source>array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7099" name="warn_new_dangling_reference">
        <segment state="initial">
          <source>temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7100" name="warn_no_autosynthesis_property">
        <segment state="initial">
          <source>auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7101" name="warn_no_autosynthesis_shared_ivar_property">
        <segment state="initial">
          <source>auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7102" name="warn_no_constructor_for_refconst">
        <segment state="initial">
          <source>%select{struct|interface|union|class|enum}0 %1 does not declare any constructor to initialize its non-modifiable members</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7103" name="warn_no_dynamic_cast_with_rtti_disabled">
        <segment state="initial">
          <source>dynamic_cast will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7104" name="warn_no_typeid_with_rtti_disabled">
        <segment state="initial">
          <source>typeid will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7105" name="warn_no_underlying_type_specified_for_enum_bitfield">
        <segment state="initial">
          <source>enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7106" name="warn_no_unlock">
        <segment state="initial">
          <source>%0 '%1' is still held at the end of function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7107" name="warn_nocf_check_attribute_ignored">
        <segment state="initial">
          <source>'nocf_check' attribute ignored; use -fcf-protection to enable the attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7108" name="warn_noderef_on_non_pointer_or_array">
        <segment state="initial">
          <source>'noderef' can only be used on an array or pointer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7109" name="warn_noderef_to_dereferenceable_pointer">
        <segment state="initial">
          <source>casting to dereferenceable pointer removes 'noderef' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7110" name="warn_non_aligned_allocation_function">
        <segment state="initial">
          <source>under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7111" name="warn_non_contravariant_overriding_param_types">
        <segment state="initial">
          <source>conflicting parameter types in declaration of %0: %1 vs %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7112" name="warn_non_contravariant_param_types">
        <segment state="initial">
          <source>conflicting parameter types in implementation of %0: %1 vs %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7113" name="warn_non_covariant_overriding_ret_types">
        <segment state="initial">
          <source>conflicting return type in declaration of %0: %1 vs %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7114" name="warn_non_covariant_ret_types">
        <segment state="initial">
          <source>conflicting return type in implementation of %0: %1 vs %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7115" name="warn_non_literal_null_pointer">
        <segment state="initial">
          <source>expression which evaluates to zero treated as a null pointer constant of type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7116" name="warn_non_pod_vararg_with_format_string">
        <segment state="initial">
          <source>cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7117" name="warn_non_prototype_changes_behavior">
        <segment state="initial">
          <source>a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C23|and is treated as a zero-parameter prototype in C23, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7118" name="warn_non_virtual_dtor">
        <segment state="initial">
          <source>%0 has virtual functions but non-virtual destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7119" name="warn_nonnull_expr_compare">
        <segment state="initial">
          <source>comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7120" name="warn_noreturn_coroutine">
        <segment state="initial">
          <source>coroutine %0 cannot be declared 'noreturn' as it always returns a coroutine handle</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7121" name="warn_noreturn_function_has_return_expr">
        <segment state="initial">
          <source>function %0 declared 'noreturn' should not return</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7122" name="warn_noreturn_has_return_expr">
        <segment state="initial">
          <source>%select{function|block|lambda|coroutine}0 declared 'noreturn' should not return</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7123" name="warn_not_a_doxygen_trailing_member_comment">
        <segment state="initial">
          <source>not a Doxygen trailing comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7124" name="warn_not_compound_assign">
        <segment state="initial">
          <source>use of unary operator that may be intended as compound assignment (%0=)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7125" name="warn_not_eliding_copy_on_return">
        <segment state="initial">
          <source>not eliding copy on return</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7126" name="warn_not_enough_argument">
        <segment state="initial">
          <source>not enough variable arguments in %0 declaration to fit a sentinel</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7127" name="warn_not_in_enum">
        <segment state="initial">
          <source>case value not in enumerated type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7128" name="warn_not_in_enum_assignment">
        <segment state="initial">
          <source>integer constant not in range of enumerated type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7129" name="warn_not_xl_compatible">
        <segment state="initial">
          <source>alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7130" name="warn_nothrow_attribute_ignored">
        <segment state="initial">
          <source>'nothrow' attribute conflicts with exception specification; attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7131" name="warn_ns_attribute_wrong_parameter_type">
        <segment state="initial">
          <source>%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7132" name="warn_ns_attribute_wrong_return_type">
        <segment state="initial">
          <source>%0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7133" name="warn_nsconsumed_attribute_mismatch">
        <segment state="initial">
          <source>overriding method has mismatched ns_consumed attribute on its parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7134" name="warn_nsdictionary_duplicate_key">
        <segment state="initial">
          <source>duplicate key in dictionary literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7135" name="warn_nsobject_attribute">
        <segment state="initial">
          <source>'NSObject' attribute may be put on a typedef only; attribute is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7136" name="warn_nsreturns_retained_attribute_mismatch">
        <segment state="initial">
          <source>overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7137" name="warn_null_arg">
        <segment state="initial">
          <source>null passed to a callee that requires a non-null argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7138" name="warn_null_in_arithmetic_operation">
        <segment state="initial">
          <source>use of NULL in arithmetic operation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7139" name="warn_null_in_comparison_operation">
        <segment state="initial">
          <source>comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7140" name="warn_null_pointer_compare">
        <segment state="initial">
          <source>comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7141" name="warn_null_resettable_setter">
        <segment state="initial">
          <source>synthesized setter %0 for null_resettable property %1 does not handle nil</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7142" name="warn_null_ret">
        <segment state="initial">
          <source>null returned from %select{function|method}0 that requires a non-null return value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7143" name="warn_nullability_declspec">
        <segment state="initial">
          <source>nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7144" name="warn_nullability_inferred_on_nested_type">
        <segment state="initial">
          <source>inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7145" name="warn_nullability_lost">
        <segment state="initial">
          <source>implicit conversion from nullable pointer %0 to non-nullable pointer type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7146" name="warn_nullability_missing">
        <segment state="initial">
          <source>%select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7147" name="warn_nullability_missing_array">
        <segment state="initial">
          <source>array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7148" name="warn_objc_boxing_invalid_utf8_string">
        <segment state="initial">
          <source>string is ill-formed as UTF-8 and will become a null %0 when boxed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7149" name="warn_objc_cdirective_format_string">
        <segment state="initial">
          <source>using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7150" name="warn_objc_circular_container">
        <segment state="initial">
          <source>adding %0 to %1 might cause circular dependency in container</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7151" name="warn_objc_collection_literal_element">
        <segment state="initial">
          <source>object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7152" name="warn_objc_designated_init_missing_super_call">
        <segment state="initial">
          <source>designated initializer missing a 'super' call to a designated initializer of the super class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7153" name="warn_objc_designated_init_non_designated_init_call">
        <segment state="initial">
          <source>designated initializer invoked a non-designated initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7154" name="warn_objc_designated_init_non_super_designated_init_call">
        <segment state="initial">
          <source>designated initializer should only invoke a designated initializer on 'super'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7155" name="warn_objc_direct_ignored">
        <segment state="initial">
          <source>%0 attribute isn't implemented by this Objective-C runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7156" name="warn_objc_direct_property_ignored">
        <segment state="initial">
          <source>direct attribute on property %0 ignored (not implemented by this Objective-C runtime)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7157" name="warn_objc_implementation_missing_designated_init_override">
        <segment state="initial">
          <source>method override for the designated initializer of the superclass %objcinstance0 not found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7158" name="warn_objc_invalid_bridge">
        <segment state="initial">
          <source>%0 bridges to %1, not %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7159" name="warn_objc_invalid_bridge_to_cf">
        <segment state="initial">
          <source>%0 cannot bridge to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7160" name="warn_objc_isa_assign">
        <segment state="initial">
          <source>assignment to Objective-C's isa is deprecated in favor of object_setClass()</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7161" name="warn_objc_isa_use">
        <segment state="initial">
          <source>direct access to Objective-C's isa is deprecated in favor of object_getClass()</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7162" name="warn_objc_literal_comparison">
        <segment state="initial">
          <source>direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7163" name="warn_objc_missing_super_call">
        <segment state="initial">
          <source>method possibly missing a [super %0] call</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7164" name="warn_objc_pointer_cxx_catch_fragile">
        <segment state="initial">
          <source>cannot catch an exception thrown with @throw in C++ in the non-unified exception model</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7165" name="warn_objc_pointer_masking">
        <segment state="initial">
          <source>bitmasking for introspection of Objective-C object pointers is strongly discouraged</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7166" name="warn_objc_pointer_masking_performSelector">
        <segment state="initial">
          <source>bitmasking for introspection of Objective-C object pointers is strongly discouraged</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7167" name="warn_objc_precise_lifetime_meaningless">
        <segment state="initial">
          <source>objc_precise_lifetime is not meaningful for %select{__unsafe_unretained|__autoreleasing}0 objects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7168" name="warn_objc_property_assign_on_object">
        <segment state="initial">
          <source>'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7169" name="warn_objc_property_copy_missing_on_block">
        <segment state="initial">
          <source>'copy' attribute must be specified for the block property when -fobjc-gc-only is specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7170" name="warn_objc_property_default_assign_on_object">
        <segment state="initial">
          <source>default property attribute 'assign' not appropriate for object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7171" name="warn_objc_property_no_assignment_attribute">
        <segment state="initial">
          <source>no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7172" name="warn_objc_property_retain_of_block">
        <segment state="initial">
          <source>retain'ed block property does not copy the block - use copy attribute instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7173" name="warn_objc_readonly_property_has_setter">
        <segment state="initial">
          <source>setter cannot be specified for a readonly property</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7174" name="warn_objc_redundant_literal_use">
        <segment state="initial">
          <source>using %0 with a literal is redundant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7175" name="warn_objc_redundant_qualified_class_type">
        <segment state="initial">
          <source>parameterized class %0 already conforms to the protocols listed; did you forget a '*'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7176" name="warn_objc_requires_super_protocol">
        <segment state="initial">
          <source>%0 attribute cannot be applied to %select{methods in protocols|dealloc}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7177" name="warn_objc_root_class_missing">
        <segment state="initial">
          <source>class %0 defined without specifying a base class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7178" name="warn_objc_secondary_init_missing_init_call">
        <segment state="initial">
          <source>convenience initializer missing a 'self' call to another initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7179" name="warn_objc_secondary_init_super_init_call">
        <segment state="initial">
          <source>convenience initializer should not invoke an initializer on 'super'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7180" name="warn_objc_string_literal_comparison">
        <segment state="initial">
          <source>direct comparison of a string literal has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7181" name="warn_objc_unsafe_perform_selector">
        <segment state="initial">
          <source>%0 is incompatible with selectors that return a %select{struct|union|vector}1 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7182" name="warn_offload_incompatible_redeclare">
        <segment state="initial">
          <source>target-attribute based function overloads are not supported by NVCC and will be treated as a function redeclaration:new declaration is %select{__device__|__global__|__host__|__host__ __device__}0 function, old declaration is %select{__device__|__global__|__host__|__host__ __device__}1 function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7183" name="warn_old_style_cast">
        <segment state="initial">
          <source>use of old-style cast</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7184" name="warn_omp_alignment_not_power_of_two">
        <segment state="initial">
          <source>aligned clause will be ignored because the requested alignment is not a power of 2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7185" name="warn_omp_allocate_thread_on_task_target_directive">
        <segment state="initial">
          <source>allocator with the 'thread' trait access has unspecified behavior on '%0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7186" name="warn_omp_assume_attribute_string_unknown">
        <segment state="initial">
          <source>unknown assumption string '%0'; attribute is potentially ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7187" name="warn_omp_assume_attribute_string_unknown_suggested">
        <segment state="initial">
          <source>unknown assumption string '%0' may be misspelled; attribute is potentially ignored, did you mean '%1'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7188" name="warn_omp_declare_target_after_first_use">
        <segment state="initial">
          <source>declaration marked as declare target after first use, it may lead to incorrect results</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7189" name="warn_omp_declare_variant_after_emitted">
        <segment state="initial">
          <source>'#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7190" name="warn_omp_declare_variant_after_used">
        <segment state="initial">
          <source>'#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7191" name="warn_omp_declare_variant_marked_as_declare_variant">
        <segment state="initial">
          <source>variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7192" name="warn_omp_declare_variant_score_not_constant">
        <segment state="initial">
          <source>score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7193" name="warn_omp_linear_step_zero">
        <segment state="initial">
          <source>zero linear step (%0 %select{|and other variables in clause }1should probably be const)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7194" name="warn_omp_loop_64_bit_var">
        <segment state="initial">
          <source>OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7195" name="warn_omp_minus_in_reduction_deprecated">
        <segment state="initial">
          <source>minus(-) operator for reductions is deprecated; use + or user defined reduction instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7196" name="warn_omp_nesting_simd">
        <segment state="initial">
          <source>OpenMP only allows an ordered construct with the simd clause nested in a simd construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7197" name="warn_omp_non_trivial_type_mapped">
        <segment state="initial">
          <source>type %0 is not trivially copyable and not guaranteed to be mapped correctly</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7198" name="warn_omp_not_in_target_context">
        <segment state="initial">
          <source>declaration is not declared in any declare target region</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7199" name="warn_omp_section_is_char">
        <segment state="initial">
          <source>array section %select{lower bound|length}0 is of type 'char'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7200" name="warn_omp_unterminated_declare_target">
        <segment state="initial">
          <source>expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7201" name="warn_omp_used_different_allocator">
        <segment state="initial">
          <source>allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7202" name="warn_on_superclass_use">
        <segment state="initial">
          <source>class implementation may not have super class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7203" name="warn_opencl_attr_deprecated_ignored">
        <segment state="initial">
          <source>%0 attribute is deprecated and ignored in %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7204" name="warn_opencl_generic_address_space_arg">
        <segment state="initial">
          <source>passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7205" name="warn_operator_new_returns_null">
        <segment state="initial">
          <source>%0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7206" name="warn_os_log_format_narg">
        <segment state="initial">
          <source>os_log() '%%n' format specifier is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7207" name="warn_out_of_range_compare">
        <segment state="initial">
          <source>result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7208" name="warn_overaligned_type">
        <segment state="initial">
          <source>type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7209" name="warn_overloaded_shift_in_comparison">
        <segment state="initial">
          <source>overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7210" name="warn_overloaded_virtual">
        <segment state="initial">
          <source>%q0 hides overloaded virtual %select{function|functions}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7211" name="warn_overriding_method_missing_noescape">
        <segment state="initial">
          <source>parameter of overriding method should be annotated with __attribute__((noescape))</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7212" name="warn_param_mismatched_alignment">
        <segment state="initial">
          <source>passing %0-byte aligned argument to %1-byte aligned parameter %2%select{| of %4}3 may result in an unaligned pointer access</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7213" name="warn_param_return_typestate_mismatch">
        <segment state="initial">
          <source>parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7214" name="warn_param_typestate_mismatch">
        <segment state="initial">
          <source>argument not in expected state; expected '%0', observed '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7215" name="warn_parameter_size">
        <segment state="initial">
          <source>%0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7216" name="warn_parens_disambiguated_as_function_declaration">
        <segment state="initial">
          <source>parentheses were disambiguated as a function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7217" name="warn_parens_disambiguated_as_variable_declaration">
        <segment state="initial">
          <source>parentheses were disambiguated as redundant parentheses around declaration of variable named %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7218" name="warn_pass_class_arg_to_vararg">
        <segment state="initial">
          <source>passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7219" name="warn_perf_constraint_implies_noexcept">
        <segment state="initial">
          <source>%select{function|constructor|destructor|lambda|block}0 with '%1' attribute should be declared noexcept</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7220" name="warn_pessimizing_move_on_initialization">
        <segment state="initial">
          <source>moving a temporary object prevents copy elision</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7221" name="warn_pessimizing_move_on_return">
        <segment state="initial">
          <source>moving a local object in a return statement prevents copy elision</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7222" name="warn_pointer_abs">
        <segment state="initial">
          <source>taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7223" name="warn_pointer_arith_null_ptr">
        <segment state="initial">
          <source>performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7224" name="warn_pointer_compare">
        <segment state="initial">
          <source>comparing a pointer to a null character constant; did you mean to compare to %select{NULL|(void *)0}0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7225" name="warn_pointer_indirection_from_incompatible_type">
        <segment state="initial">
          <source>dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7226" name="warn_pointer_sub_null_ptr">
        <segment state="initial">
          <source>performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7227" name="warn_pointer_to_enum_cast">
        <segment state="initial">
          <source>cast to smaller integer type %1 from %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7228" name="warn_pointer_to_int_cast">
        <segment state="initial">
          <source>cast to smaller integer type %1 from %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7229" name="warn_possible_object_duplication_init">
        <segment state="initial">
          <source>initialization of %0 may run twice when built into a shared library: it has hidden visibility and external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7230" name="warn_possible_object_duplication_mutable">
        <segment state="initial">
          <source>%0 may be duplicated when built into a shared library: it is mutable, has hidden visibility, and external linkage</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7231" name="warn_potentially_direct_selector_expression">
        <segment state="initial">
          <source>@selector expression formed with potentially direct selector %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7232" name="warn_pragma_align_not_xl_compatible">
        <segment state="initial">
          <source>#pragma align(packed) may not be compatible with objects generated with AIX XL C/C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7233" name="warn_pragma_attribute_unused">
        <segment state="initial">
          <source>unused attribute %0 in '#pragma clang attribute push' region</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7234" name="warn_pragma_options_align_reset_failed">
        <segment state="initial">
          <source>#pragma options align=reset failed: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7235" name="warn_pragma_pack_invalid_alignment">
        <segment state="initial">
          <source>expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7236" name="warn_pragma_pack_modified_after_include">
        <segment state="initial">
          <source>the current #pragma pack alignment value is modified in the included file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7237" name="warn_pragma_pack_no_pop_eof">
        <segment state="initial">
          <source>unterminated '#pragma pack (push, ...)' at end of file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7238" name="warn_pragma_pack_non_default_at_include">
        <segment state="initial">
          <source>non-default #pragma pack value changes the alignment of struct or union members in the included file</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7239" name="warn_pragma_pack_pop_identifier_and_alignment">
        <segment state="initial">
          <source>specifying both a name and alignment to 'pop' is undefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7240" name="warn_pragma_pack_show">
        <segment state="initial">
          <source>value of #pragma pack(show) == %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7241" name="warn_pragma_pop_failed">
        <segment state="initial">
          <source>#pragma %0(pop, ...) failed: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7242" name="warn_pragma_unused_expected_var_arg">
        <segment state="initial">
          <source>only variables can be arguments to '#pragma unused'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7243" name="warn_pragma_unused_undeclared_var">
        <segment state="initial">
          <source>undeclared variable %0 used as an argument for '#pragma unused'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7244" name="warn_precedence_bitwise_conditional">
        <segment state="initial">
          <source>operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7245" name="warn_precedence_bitwise_rel">
        <segment state="initial">
          <source>%0 has lower precedence than %1; %1 will be evaluated first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7246" name="warn_precedence_conditional">
        <segment state="initial">
          <source>operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7247" name="warn_preferred_type_bitfield_too_small_for_enum">
        <segment state="initial">
          <source>bit-field %0 is not wide enough to store all enumerators of preferred type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7248" name="warn_preferred_type_signed_bitfield_enum_conversion">
        <segment state="initial">
          <source>signed bit-field %0 needs an extra bit to represent the largest positive enumerators of preferred type %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7249" name="warn_preferred_type_unsigned_bitfield_assigned_signed_enum">
        <segment state="initial">
          <source>assigning value of preferred signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7250" name="warn_printf_ObjCflags_without_ObjCConversion">
        <segment state="initial">
          <source>object format flags cannot be used with '%0' conversion specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7251" name="warn_printf_asterisk_missing_arg">
        <segment state="initial">
          <source>'%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7252" name="warn_printf_asterisk_wrong_type">
        <segment state="initial">
          <source>field %select{width|precision}0 should have type %1, but argument has type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7253" name="warn_printf_data_arg_not_used">
        <segment state="initial">
          <source>data argument not used by format string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7254" name="warn_printf_empty_objc_flag">
        <segment state="initial">
          <source>missing object format flag</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7255" name="warn_printf_format_string_contains_null_char">
        <segment state="initial">
          <source>format string contains '\0' within the string body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7256" name="warn_printf_format_string_not_null_terminated">
        <segment state="initial">
          <source>format string is not null-terminated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7257" name="warn_printf_ignored_flag">
        <segment state="initial">
          <source>flag '%0' is ignored when flag '%1' is present</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7258" name="warn_printf_incomplete_specifier">
        <segment state="initial">
          <source>incomplete format specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7259" name="warn_printf_insufficient_data_args">
        <segment state="initial">
          <source>more '%%' conversions than data arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7260" name="warn_printf_invalid_objc_flag">
        <segment state="initial">
          <source>'%0' is not a valid object format flag</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7261" name="warn_printf_narg_not_supported">
        <segment state="initial">
          <source>'%%n' specifier not supported on this platform</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7262" name="warn_printf_nonsensical_flag">
        <segment state="initial">
          <source>flag '%0' results in undefined behavior with '%1' conversion specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7263" name="warn_printf_nonsensical_optional_amount">
        <segment state="initial">
          <source>%select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7264" name="warn_printf_positional_arg_exceeds_data_args">
        <segment state="initial">
          <source>data argument position '%0' exceeds the number of data arguments (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7265" name="warn_private_extern">
        <segment state="initial">
          <source>use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7266" name="warn_property_access_suggest">
        <segment state="initial">
          <source>property %0 not found on object of type %1; did you mean to access property %2?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7267" name="warn_property_attr_mismatch">
        <segment state="initial">
          <source>property attribute in class extension does not match the primary class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7268" name="warn_property_attribute">
        <segment state="initial">
          <source>'%1' attribute on property %0 does not match the property inherited from %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7269" name="warn_property_getter_owning_mismatch">
        <segment state="initial">
          <source>property declared as returning non-retained objects; getter returning retained objects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7270" name="warn_property_implicitly_mismatched">
        <segment state="initial">
          <source>primary property declaration is implicitly strong while redeclaration in class extension is weak</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7271" name="warn_property_method_deprecated">
        <segment state="initial">
          <source>property access is using %0 method which is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7272" name="warn_property_redecl_getter_mismatch">
        <segment state="initial">
          <source>getter name mismatch between property redeclaration (%1) and its original declaration (%0)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7273" name="warn_property_types_are_incompatible">
        <segment state="initial">
          <source>property type %0 is incompatible with type %1 inherited from %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7274" name="warn_protocol_property_mismatch">
        <segment state="initial">
          <source>property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7275" name="warn_pt_guarded_pass_by_reference">
        <segment state="initial">
          <source>passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7276" name="warn_pt_guarded_pass_pointer">
        <segment state="initial">
          <source>passing pointer %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7277" name="warn_pt_guarded_return_by_reference">
        <segment state="initial">
          <source>returning the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7278" name="warn_pt_guarded_return_pointer">
        <segment state="initial">
          <source>returning pointer %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7279" name="warn_ptr_arith_exceeds_bounds">
        <segment state="initial">
          <source>the pointer incremented by %0 refers past the end of the array (that has type %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7280" name="warn_ptr_arith_exceeds_max_addressable_bounds">
        <segment state="initial">
          <source>the pointer incremented by %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7281" name="warn_ptr_arith_precedes_bounds">
        <segment state="initial">
          <source>the pointer decremented by %0 refers before the beginning of the array</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7282" name="warn_ptr_independentclass_attribute">
        <segment state="initial">
          <source>'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7283" name="warn_ptrauth_auth_null_pointer">
        <segment state="initial">
          <source>authenticating a null pointer will almost certainly trap</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7284" name="warn_ptrauth_sign_null_pointer">
        <segment state="initial">
          <source>signing a null pointer will yield a non-null pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7285" name="warn_pure_function_returns_void">
        <segment state="initial">
          <source>'%select{pure|const}0' attribute on function returning 'void'; attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7286" name="warn_qual_base_type">
        <segment state="initial">
          <source>'%0' qualifier%s1 on base class type %2 %plural{1:has|:have}1 no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7287" name="warn_qual_return_type">
        <segment state="initial">
          <source>'%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7288" name="warn_readonly_property">
        <segment state="initial">
          <source>attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7289" name="warn_receiver_forward_class">
        <segment state="initial">
          <source>receiver %0 is a forward class and corresponding @interface may not exist</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7290" name="warn_receiver_forward_instance">
        <segment state="initial">
          <source>receiver type %0 for instance message is a forward declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7291" name="warn_redecl_library_builtin">
        <segment state="initial">
          <source>incompatible redeclaration of library function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7292" name="warn_redeclaration_without_attribute_prev_attribute_ignored">
        <segment state="initial">
          <source>%q0 redeclared without %1 attribute: previous %1 ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7293" name="warn_redeclaration_without_import_attribute">
        <segment state="initial">
          <source>%q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7294" name="warn_redefine_extname_not_applied">
        <segment state="initial">
          <source>#pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7295" name="warn_redefinition_in_param_list">
        <segment state="initial">
          <source>redefinition of %0 will not be visible outside of this function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7296" name="warn_redundant_loop_iteration">
        <segment state="initial">
          <source>variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7297" name="warn_redundant_move_on_return">
        <segment state="initial">
          <source>redundant move in return statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7298" name="warn_redundant_parens_around_declarator">
        <segment state="initial">
          <source>redundant parentheses surrounding declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7299" name="warn_reference_field_is_uninit">
        <segment state="initial">
          <source>reference %0 is not yet bound to a value when used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7300" name="warn_register_objc_catch_parm">
        <segment state="initial">
          <source>'register' storage specifier on @catch parameter will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7301" name="warn_reinterpret_different_from_static">
        <segment state="initial">
          <source>'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7302" name="warn_related_result_type_compatibility_class">
        <segment state="initial">
          <source>method is expected to return an instance of its class type %diff{$, but is declared to return $|, but is declared to return different type}0,1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7303" name="warn_related_result_type_compatibility_protocol">
        <segment state="initial">
          <source>protocol method is expected to return an instance of the implementing class, but is declared to return %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7304" name="warn_remainder_division_by_zero">
        <segment state="initial">
          <source>%select{remainder|division}0 by zero is undefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7305" name="warn_require_const_init_added_too_late">
        <segment state="initial">
          <source>'require_constant_initialization' attribute added after initialization of variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7306" name="warn_reserved_extern_symbol">
        <segment state="initial">
          <source>identifier %0 is reserved because %select{&lt;ERROR&gt;|it starts with '_' at global scope|it starts with '_' and has C language linkage|it starts with '__'|it starts with '_' followed by a capital letter|it contains '__'}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7307" name="warn_reserved_module_name">
        <segment state="initial">
          <source>%0 is a reserved name for a module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7308" name="warn_ret_addr_label">
        <segment state="initial">
          <source>returning address of label, which is local</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7309" name="warn_ret_local_temp_addr_ref">
        <segment state="initial">
          <source>returning %select{address of|reference to}0 local temporary object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7310" name="warn_ret_stack_addr_ref">
        <segment state="initial">
          <source>%select{address of|reference to}0 stack memory associated with %select{local variable|parameter|compound literal}2 %1 %select{returned|passed to musttail function}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7311" name="warn_return_missing_expr">
        <segment state="initial">
          <source>non-void %select{function|method}1 %0 should return a value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7312" name="warn_return_typestate_for_unconsumable_type">
        <segment state="initial">
          <source>return state set for an unconsumable type '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7313" name="warn_return_typestate_mismatch">
        <segment state="initial">
          <source>return value not in expected state; expected '%0', observed '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7314" name="warn_return_value_size">
        <segment state="initial">
          <source>return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7315" name="warn_return_value_udt">
        <segment state="initial">
          <source>%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7316" name="warn_return_value_udt_incomplete">
        <segment state="initial">
          <source>%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7317" name="warn_riscv_repeated_interrupt_attribute">
        <segment state="initial">
          <source>repeated RISC-V 'interrupt' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7318" name="warn_root_inst_method_not_found">
        <segment state="initial">
          <source>instance method %0 is being used on 'Class' which is not in the root class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7319" name="warn_sampler_initializer_invalid_bits">
        <segment state="initial">
          <source>sampler initializer has invalid %0 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7320" name="warn_scanf_nonzero_width">
        <segment state="initial">
          <source>zero field width in scanf format string is unused</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7321" name="warn_scanf_scanlist_incomplete">
        <segment state="initial">
          <source>no closing ']' for '%%[' in scanf format string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7322" name="warn_second_arg_of_va_start_not_last_non_variadic_param">
        <segment state="initial">
          <source>second argument to 'va_start' is not the last non-variadic parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7323" name="warn_second_parameter_to_va_arg_array">
        <segment state="initial">
          <source>second argument to 'va_arg' is of array type %0; this va_arg has undefined behavior because arguments will never be compatible with array type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7324" name="warn_second_parameter_to_va_arg_never_compatible">
        <segment state="initial">
          <source>second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7325" name="warn_second_parameter_to_va_arg_not_pod">
        <segment state="initial">
          <source>second argument to 'va_arg' is of non-POD type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7326" name="warn_second_parameter_to_va_arg_ownership_qualified">
        <segment state="initial">
          <source>second argument to 'va_arg' is of ARC ownership-qualified type %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7327" name="warn_section_msvc_compat">
        <segment state="initial">
          <source>`#pragma const_seg` for section %1 will not apply to %0 due to the presence of a %select{mutable field||non-trivial constructor|non-trivial destructor}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7328" name="warn_self_assignment_builtin">
        <segment state="initial">
          <source>explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7329" name="warn_self_assignment_overloaded">
        <segment state="initial">
          <source>explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7330" name="warn_self_move">
        <segment state="initial">
          <source>explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7331" name="warn_setter_getter_impl_required">
        <segment state="initial">
          <source>property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7332" name="warn_setter_getter_impl_required_in_category">
        <segment state="initial">
          <source>property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7333" name="warn_shadow_field">
        <segment state="initial">
          <source>%select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7334" name="warn_shift_bool">
        <segment state="initial">
          <source>right shifting a 'bool' implicitly converts it to 'int'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7335" name="warn_shift_gt_typewidth">
        <segment state="initial">
          <source>shift count &gt;= width of type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7336" name="warn_shift_lhs_negative">
        <segment state="initial">
          <source>shifting a negative signed value is undefined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7337" name="warn_shift_negative">
        <segment state="initial">
          <source>shift count is negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7338" name="warn_shift_result_gt_typewidth">
        <segment state="initial">
          <source>signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7339" name="warn_shift_result_sets_sign_bit">
        <segment state="initial">
          <source>signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7340" name="warn_side_effects_typeid">
        <segment state="initial">
          <source>expression with side effects will be evaluated despite being used as an operand to 'typeid'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7341" name="warn_side_effects_unevaluated_context">
        <segment state="initial">
          <source>expression with side effects has no effect in an unevaluated context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7342" name="warn_signed_bitfield_enum_conversion">
        <segment state="initial">
          <source>signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7343" name="warn_sizeof_array_decay">
        <segment state="initial">
          <source>sizeof on pointer operation will return size of %0 instead of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7344" name="warn_sizeof_array_param">
        <segment state="initial">
          <source>sizeof on array function parameter will return size of %0 instead of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7345" name="warn_sizeof_pointer_expr_memaccess">
        <segment state="initial">
          <source>'%0' call operates on objects of type %1 while the size is based on a different type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7346" name="warn_sizeof_pointer_expr_memaccess_note">
        <segment state="initial">
          <source>did you mean to %select{dereference the argument to 'sizeof' (and multiply it by the number of elements)|remove the addressof in the argument to 'sizeof' (and multiply it by the number of elements)|provide an explicit length}0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7347" name="warn_sizeof_pointer_type_memaccess">
        <segment state="initial">
          <source>argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7348" name="warn_sme_locally_streaming_has_vl_args_returns">
        <segment state="initial">
          <source>%select{returning|passing}0 a VL-dependent argument %select{from|to}0 a locally streaming function is undefined behaviour when the streaming and non-streaming vector lengths are different at runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7349" name="warn_sme_streaming_pass_return_vl_to_non_streaming">
        <segment state="initial">
          <source>%select{returning|passing}0 a VL-dependent argument %select{from|to}0 a function with a different streaming-mode is undefined behaviour when the streaming and non-streaming vector lengths are different at runtime</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7350" name="warn_some_initializers_out_of_order">
        <segment state="initial">
          <source>initializer order does not match the declaration order</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7351" name="warn_sometimes_uninit_var">
        <segment state="initial">
          <source>variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7352" name="warn_splice_in_doxygen_comment">
        <segment state="initial">
          <source>line splicing in Doxygen comments are not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7353" name="warn_standalone_specifier">
        <segment state="initial">
          <source>'%0' ignored on this declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7354" name="warn_static_array_too_small">
        <segment state="initial">
          <source>array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7355" name="warn_static_local_in_extern_inline">
        <segment state="initial">
          <source>non-constant static local variable in inline function may be different in different files</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7356" name="warn_static_main">
        <segment state="initial">
          <source>'main' should not be declared static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7357" name="warn_static_self_reference_in_init">
        <segment state="initial">
          <source>static variable %0 is suspiciously used within its own initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7358" name="warn_strict_multiple_method_decl">
        <segment state="initial">
          <source>multiple methods named %0 found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7359" name="warn_strict_potentially_direct_selector_expression">
        <segment state="initial">
          <source>@selector expression formed with potentially direct selector %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7360" name="warn_strict_prototypes">
        <segment state="initial">
          <source>a %select{function|block}0 declaration without a prototype is deprecated %select{in all versions of C|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7361" name="warn_strict_uses_without_prototype">
        <segment state="initial">
          <source>passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7362" name="warn_string_plus_char">
        <segment state="initial">
          <source>adding %0 to a string pointer does not append to the string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7363" name="warn_string_plus_int">
        <segment state="initial">
          <source>adding %0 to a string does not append to the string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7364" name="warn_stringcompare">
        <segment state="initial">
          <source>result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7365" name="warn_strlcpycat_wrong_size">
        <segment state="initial">
          <source>size argument in %0 call appears to be size of the source; expected the size of the destination</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7366" name="warn_strncat_large_size">
        <segment state="initial">
          <source>the value of the size argument in 'strncat' is too large, might lead to a buffer overflow</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7367" name="warn_strncat_src_size">
        <segment state="initial">
          <source>size argument in 'strncat' call appears to be size of the source</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7368" name="warn_strncat_wrong_size">
        <segment state="initial">
          <source>the value of the size argument to 'strncat' is wrong</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7369" name="warn_struct_class_previous_tag_mismatch">
        <segment state="initial">
          <source>%2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7370" name="warn_struct_class_tag_mismatch">
        <segment state="initial">
          <source>%select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7371" name="warn_sub_ptr_zero_size_types">
        <segment state="initial">
          <source>subtraction of pointers to type %0 of zero size has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7372" name="warn_subscript_is_char">
        <segment state="initial">
          <source>array subscript is of type 'char'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7373" name="warn_suggest_destructor_marked_not_override_overriding">
        <segment state="initial">
          <source>%0 overrides a destructor but is not marked 'override'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7374" name="warn_suggest_function_marked_not_override_overriding">
        <segment state="initial">
          <source>%0 overrides a member function but is not marked 'override'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7375" name="warn_suggest_noreturn_block">
        <segment state="initial">
          <source>block could be declared with attribute 'noreturn'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7376" name="warn_suggest_noreturn_function">
        <segment state="initial">
          <source>%select{function|method}0 %1 could be declared with attribute 'noreturn'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7377" name="warn_superclass_variable_sized_type_not_at_end">
        <segment state="initial">
          <source>field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7378" name="warn_suspicious_bzero_size">
        <segment state="initial">
          <source>'size' argument to bzero is '0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7379" name="warn_suspicious_sizeof_memset">
        <segment state="initial">
          <source>%select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7380" name="warn_switch_default">
        <segment state="initial">
          <source>'switch' missing 'default' label</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7381" name="warn_sycl_entry_point_redundant_declaration">
        <segment state="initial">
          <source>redundant 'sycl_kernel_entry_point' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7382" name="warn_sycl_kernel_invalid_template_param_type">
        <segment state="initial">
          <source>template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7383" name="warn_sycl_kernel_name_not_a_class_type">
        <segment state="initial">
          <source>%0 is not a valid SYCL kernel name type; a non-union class type is required</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7384" name="warn_sycl_kernel_num_of_function_params">
        <segment state="initial">
          <source>function template with 'sycl_kernel' attribute must have a single parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7385" name="warn_sycl_kernel_num_of_template_params">
        <segment state="initial">
          <source>'sycl_kernel' attribute only applies to a function template with at least two template parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7386" name="warn_sycl_kernel_return_type">
        <segment state="initial">
          <source>function template with 'sycl_kernel' attribute must have a 'void' return type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7387" name="warn_sync_fetch_and_nand_semantics_change">
        <segment state="initial">
          <source>the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7388" name="warn_taking_address_of_packed_member">
        <segment state="initial">
          <source>taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7389" name="warn_target_clone_duplicate_options">
        <segment state="initial">
          <source>version list contains duplicate entries</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7390" name="warn_target_clone_mixed_values">
        <segment state="initial">
          <source>mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7391" name="warn_target_clone_no_impact_options">
        <segment state="initial">
          <source>version list contains entries that don't impact code generation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7392" name="warn_tautological_bool_compare">
        <segment state="initial">
          <source>result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7393" name="warn_tautological_compare_objc_bool">
        <segment state="initial">
          <source>result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7394" name="warn_tautological_compare_value_range">
        <segment state="initial">
          <source>result of comparison of %select{%4|%1-bit %select{signed|unsigned}2 value}0 %3 %select{%1-bit %select{signed|unsigned}2 value|%4}0 is always %5</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7395" name="warn_tautological_constant_compare">
        <segment state="initial">
          <source>result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7396" name="warn_tautological_negation_and_compare">
        <segment state="initial">
          <source>'&amp;&amp;' of a value and its negation always evaluates to false</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7397" name="warn_tautological_negation_or_compare">
        <segment state="initial">
          <source>'||' of a value and its negation always evaluates to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7398" name="warn_tautological_overlap_comparison">
        <segment state="initial">
          <source>%select{non-|}0overlapping comparisons always evaluate to %select{false|true}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7399" name="warn_tcb_enforcement_violation">
        <segment state="initial">
          <source>calling %0 is a violation of trusted computing base '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7400" name="warn_template_arg_negative">
        <segment state="initial">
          <source>non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7401" name="warn_template_arg_too_large">
        <segment state="initial">
          <source>non-type template argument value '%0' truncated to '%1' for template parameter of type %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7402" name="warn_template_export_unsupported">
        <segment state="initial">
          <source>exported templates are unsupported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7403" name="warn_template_qualified_friend_ignored">
        <segment state="initial">
          <source>dependent nested name specifier %0 for friend template declaration is not supported; ignoring this friend declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7404" name="warn_template_qualified_friend_unsupported">
        <segment state="initial">
          <source>dependent nested name specifier %0 for friend class declaration is not supported; turning off access control for %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7405" name="warn_tentative_incomplete_array">
        <segment state="initial">
          <source>tentative array definition assumed to have one element</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7406" name="warn_this_bool_conversion">
        <segment state="initial">
          <source>'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7407" name="warn_this_null_compare">
        <segment state="initial">
          <source>'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7408" name="warn_thread_attribute_argument_not_lockable">
        <segment state="initial">
          <source>%0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7409" name="warn_thread_attribute_decl_not_lockable">
        <segment state="initial">
          <source>%0 attribute can only be applied in a context annotated with 'capability' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7410" name="warn_thread_attribute_decl_not_pointer">
        <segment state="initial">
          <source>%0 only applies to pointer types; type here is %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7411" name="warn_thread_attribute_ignored">
        <segment state="initial">
          <source>ignoring %0 attribute because its argument is invalid</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7412" name="warn_thread_attribute_not_on_capability_member">
        <segment state="initial">
          <source>%0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7413" name="warn_thread_attribute_not_on_non_static_member">
        <segment state="initial">
          <source>%0 attribute without capability arguments can only be applied to non-static methods of a class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7414" name="warn_thread_attribute_not_on_scoped_lockable_param">
        <segment state="initial">
          <source>%0 attribute applies to function parameters only if their type is a reference to a 'scoped_lockable'-annotated type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7415" name="warn_thread_safety_beta">
        <segment state="initial">
          <source>thread safety beta warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7416" name="warn_thread_safety_verbose">
        <segment state="initial">
          <source>thread safety verbose warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7417" name="warn_throw_in_noexcept_func">
        <segment state="initial">
          <source>%0 has a non-throwing exception specification but can still throw</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7418" name="warn_throw_underaligned_obj">
        <segment state="initial">
          <source>underaligned exception object thrown</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7419" name="warn_transparent_union_attribute_field_size_align">
        <segment state="initial">
          <source>%select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7420" name="warn_transparent_union_attribute_floating">
        <segment state="initial">
          <source>first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7421" name="warn_transparent_union_attribute_not_definition">
        <segment state="initial">
          <source>transparent_union attribute can only be applied to a union definition; attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7422" name="warn_transparent_union_attribute_zero_fields">
        <segment state="initial">
          <source>transparent union definition must contain at least one field; transparent_union attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7423" name="warn_type_attribute_deprecated_on_decl">
        <segment state="initial">
          <source>applying attribute %0 to a declaration is deprecated; apply it to the type instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7424" name="warn_type_attribute_wrong_type">
        <segment state="initial">
          <source>'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7425" name="warn_type_safety_null_pointer_required">
        <segment state="initial">
          <source>specified %0 type tag requires a null pointer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7426" name="warn_type_safety_type_mismatch">
        <segment state="initial">
          <source>argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7427" name="warn_type_tag_for_datatype_wrong_kind">
        <segment state="initial">
          <source>this type tag was not designed to be used with this function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7428" name="warn_typecheck_convert_incompatible_function_pointer_strict">
        <segment state="initial">
          <source>incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7429" name="warn_typecheck_function_qualifiers_ignored">
        <segment state="initial">
          <source>'%0' qualifier on function type %1 has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7430" name="warn_typecheck_ordered_comparison_of_function_pointers">
        <segment state="initial">
          <source>ordered comparison of function pointers (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7431" name="warn_typecheck_reference_qualifiers">
        <segment state="initial">
          <source>'%0' qualifier on reference type %1 has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7432" name="warn_typecheck_vector_element_sizes_not_equal">
        <segment state="initial">
          <source>vector operands do not have the same elements sizes (%0 and %1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7433" name="warn_unannotated_fallthrough">
        <segment state="initial">
          <source>unannotated fall-through between switch labels</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7434" name="warn_unannotated_fallthrough_per_function">
        <segment state="initial">
          <source>unannotated fall-through between switch labels in partly-annotated function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7435" name="warn_unavailable_def">
        <segment state="initial">
          <source>implementing unavailable method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7436" name="warn_unavailable_fwdclass_message">
        <segment state="initial">
          <source>%0 may be unavailable because the receiver type is unknown</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7437" name="warn_undeclared_selector">
        <segment state="initial">
          <source>undeclared selector %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7438" name="warn_undeclared_selector_with_typo">
        <segment state="initial">
          <source>undeclared selector %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7439" name="warn_undef_interface">
        <segment state="initial">
          <source>cannot find interface declaration for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7440" name="warn_undef_interface_suggest">
        <segment state="initial">
          <source>cannot find interface declaration for %0; did you mean %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7441" name="warn_undef_method_impl">
        <segment state="initial">
          <source>method definition for %0 not found</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7442" name="warn_undef_protocolref">
        <segment state="initial">
          <source>cannot find protocol definition for %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7443" name="warn_undefined_inline">
        <segment state="initial">
          <source>inline function %q0 is not defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7444" name="warn_undefined_internal">
        <segment state="initial">
          <source>%select{function|variable}0 %q1 has internal linkage but is not defined</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7445" name="warn_undefined_reinterpret_cast">
        <segment state="initial">
          <source>reinterpret_cast from %0 to %1 has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7446" name="warn_unguarded_availability">
        <segment state="initial">
          <source>%0 is only available %select{|in %4 environment }3on %1 %2 or newer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7447" name="warn_unguarded_availability_new">
        <segment state="initial">
          <source>%0 is only available %select{|in %4 environment }3on %1 %2 or newer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7448" name="warn_unguarded_availability_unavailable">
        <segment state="initial">
          <source>%0 is unavailable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7449" name="warn_unguarded_availability_unavailable_new">
        <segment state="initial">
          <source>%0 is unavailable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7450" name="warn_unhandled_ms_attribute_ignored">
        <segment state="initial">
          <source>__declspec attribute %0 is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7451" name="warn_unimplemented_protocol_method">
        <segment state="initial">
          <source>method %0 in protocol %1 not implemented</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7452" name="warn_unimplemented_selector">
        <segment state="initial">
          <source>no method with selector %0 is implemented in this translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7453" name="warn_uninit_byref_blockvar_captured_by_block">
        <segment state="initial">
          <source>block pointer variable %0 is %select{uninitialized|null}1 when captured by block</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7454" name="warn_uninit_const_reference">
        <segment state="initial">
          <source>variable %0 is uninitialized when passed as a const reference argument here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7455" name="warn_uninit_self_reference_in_init">
        <segment state="initial">
          <source>variable %0 is uninitialized when used within its own initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7456" name="warn_uninit_self_reference_in_reference_init">
        <segment state="initial">
          <source>reference %0 is not yet bound to a value when used within its own initialization</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7457" name="warn_uninit_var">
        <segment state="initial">
          <source>variable %0 is uninitialized when %select{used here|captured by block}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7458" name="warn_unknown_sanitizer_ignored">
        <segment state="initial">
          <source>unknown sanitizer '%0' ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7459" name="warn_unlock_but_no_lock">
        <segment state="initial">
          <source>releasing %0 '%1' that was not held</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7460" name="warn_unlock_kind_mismatch">
        <segment state="initial">
          <source>releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7461" name="warn_unmatched_underlying_mutexes">
        <segment state="initial">
          <source>%0 managed by '%1' is '%3' instead of '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7462" name="warn_unnecessary_virtual_specifier">
        <segment state="initial">
          <source>virtual method %0 is inside a 'final' class and can never be overridden</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7463" name="warn_unneeded_internal_decl">
        <segment state="initial">
          <source>%select{function|variable}0 %1 is not needed and will not be emitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7464" name="warn_unneeded_member_function">
        <segment state="initial">
          <source>member function %0 is not needed and will not be emitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7465" name="warn_unneeded_static_internal_decl">
        <segment state="initial">
          <source>'static' function %0 declared in header file should be declared 'static inline'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7466" name="warn_unqualified_call_to_std_cast_function">
        <segment state="initial">
          <source>unqualified call to '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7467" name="warn_unreachable">
        <segment state="initial">
          <source>code will never be executed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7468" name="warn_unreachable_association">
        <segment state="initial">
          <source>due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7469" name="warn_unreachable_break">
        <segment state="initial">
          <source>'break' will never be executed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7470" name="warn_unreachable_default">
        <segment state="initial">
          <source>default label in switch which covers all enumeration values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7471" name="warn_unreachable_fallthrough_attr">
        <segment state="initial">
          <source>fallthrough annotation in unreachable code</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7472" name="warn_unreachable_loop_increment">
        <segment state="initial">
          <source>loop will run at most once (loop increment never executed)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7473" name="warn_unreachable_return">
        <segment state="initial">
          <source>'return' will never be executed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7474" name="warn_unsafe_buffer_libc_call">
        <segment state="initial">
          <source>function %0 is unsafe</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7475" name="warn_unsafe_buffer_operation">
        <segment state="initial">
          <source>%select{unsafe pointer operation|unsafe pointer arithmetic|unsafe buffer access|function introduces unsafe buffer manipulation|unsafe invocation of %1|field %1 prone to unsafe buffer manipulation}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7476" name="warn_unsafe_buffer_usage_in_container">
        <segment state="initial">
          <source>the two-parameter std::span construction is unsafe as it can introduce mismatch between buffer size and the bound information</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7477" name="warn_unsafe_buffer_variable">
        <segment state="initial">
          <source>%0 is an %select{unsafe pointer used for buffer access|unsafe buffer that does not perform bounds checks}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7478" name="warn_unsequenced_mod_mod">
        <segment state="initial">
          <source>multiple unsequenced modifications to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7479" name="warn_unsequenced_mod_use">
        <segment state="initial">
          <source>unsequenced modification and access to %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7480" name="warn_unsigned_abs">
        <segment state="initial">
          <source>taking the absolute value of unsigned type %0 has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7481" name="warn_unsigned_always_true_comparison">
        <segment state="initial">
          <source>result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7482" name="warn_unsigned_bitfield_assigned_signed_enum">
        <segment state="initial">
          <source>assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7483" name="warn_unsigned_char_always_true_comparison">
        <segment state="initial">
          <source>result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7484" name="warn_unsigned_enum_always_true_comparison">
        <segment state="initial">
          <source>result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7485" name="warn_unsupported_branch_protection_spec">
        <segment state="initial">
          <source>unsupported branch protection specification '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7486" name="warn_unsupported_target_attribute">
        <segment state="initial">
          <source>%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7487" name="warn_unused_but_set_parameter">
        <segment state="initial">
          <source>parameter %0 set but not used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7488" name="warn_unused_but_set_variable">
        <segment state="initial">
          <source>variable %0 set but not used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7489" name="warn_unused_call">
        <segment state="initial">
          <source>ignoring return value of function declared with %0 attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7490" name="warn_unused_comma_left_operand">
        <segment state="initial">
          <source>left operand of comma operator has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7491" name="warn_unused_comparison">
        <segment state="initial">
          <source>%select{equality|inequality|relational|three-way}0 comparison result unused</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7492" name="warn_unused_const_variable">
        <segment state="initial">
          <source>unused variable %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7493" name="warn_unused_constructor">
        <segment state="initial">
          <source>ignoring temporary created by a constructor declared with %0 attribute%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7494" name="warn_unused_container_subscript_expr">
        <segment state="initial">
          <source>container access result unused - container access should not be used for side effects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7495" name="warn_unused_exception_param">
        <segment state="initial">
          <source>unused exception parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7496" name="warn_unused_expr">
        <segment state="initial">
          <source>expression result unused</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7497" name="warn_unused_function">
        <segment state="initial">
          <source>unused function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7498" name="warn_unused_label">
        <segment state="initial">
          <source>unused label %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7499" name="warn_unused_lambda_capture">
        <segment state="initial">
          <source>lambda capture %0 is not %select{used|required to be captured for this use}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7500" name="warn_unused_local_typedef">
        <segment state="initial">
          <source>unused %select{typedef|type alias}0 %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7501" name="warn_unused_member_function">
        <segment state="initial">
          <source>unused member function %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7502" name="warn_unused_parameter">
        <segment state="initial">
          <source>unused parameter %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7503" name="warn_unused_private_field">
        <segment state="initial">
          <source>private field %0 is not used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7504" name="warn_unused_property_backing_ivar">
        <segment state="initial">
          <source>ivar %0 which backs the property is not referenced in this property's accessor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7505" name="warn_unused_property_expr">
        <segment state="initial">
          <source>property access result unused - getters should not be used for side effects</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7506" name="warn_unused_result">
        <segment state="initial">
          <source>ignoring return value of function declared with %0 attribute%select{|: %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7507" name="warn_unused_result_typedef_unsupported_spelling">
        <segment state="initial">
          <source>'[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7508" name="warn_unused_return_type">
        <segment state="initial">
          <source>ignoring %select{return value|temporary}0 of type %2 declared with %1 attribute%select{|: %4}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7509" name="warn_unused_template">
        <segment state="initial">
          <source>unused %select{function|variable}0 template %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7510" name="warn_unused_variable">
        <segment state="initial">
          <source>unused variable %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7511" name="warn_unused_voidptr">
        <segment state="initial">
          <source>expression result unused; should this cast be to 'void'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7512" name="warn_unused_volatile">
        <segment state="initial">
          <source>expression result unused; assign into a variable to force a volatile load</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7513" name="warn_use_in_invalid_state">
        <segment state="initial">
          <source>invalid invocation of method '%0' on object '%1' while it is in the '%2' state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7514" name="warn_use_of_temp_in_invalid_state">
        <segment state="initial">
          <source>invalid invocation of method '%0' on a temporary object while it is in the '%1' state</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7515" name="warn_used_but_marked_unused">
        <segment state="initial">
          <source>%0 was marked unused but was used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7516" name="warn_user_defined_msg_constexpr">
        <segment state="initial">
          <source>%select{the message|the expression}0 in %select{this static assertion|this asm operand}0 is not a constant expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7517" name="warn_user_literal_reserved">
        <segment state="initial">
          <source>user-defined literal suffixes %select{&lt;ERROR&gt;|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7518" name="warn_using_directive_in_header">
        <segment state="initial">
          <source>using namespace directive in global context in header</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7519" name="warn_va_start_type_is_undefined">
        <segment state="initial">
          <source>passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7520" name="warn_var_decl_not_read_only">
        <segment state="initial">
          <source>object of type %0 cannot be placed in read-only memory</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7521" name="warn_var_deref_requires_any_lock">
        <segment state="initial">
          <source>%select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7522" name="warn_var_deref_requires_lock">
        <segment state="initial">
          <source>%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7523" name="warn_var_deref_requires_lock_precise">
        <segment state="initial">
          <source>%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7524" name="warn_var_template_missing">
        <segment state="initial">
          <source>instantiation of variable %q0 required here, but no definition is available</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7525" name="warn_variable_requires_any_lock">
        <segment state="initial">
          <source>%select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7526" name="warn_variable_requires_lock">
        <segment state="initial">
          <source>%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7527" name="warn_variable_requires_lock_precise">
        <segment state="initial">
          <source>%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7528" name="warn_variable_sized_ivar_visibility">
        <segment state="initial">
          <source>field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7529" name="warn_variables_not_in_loop_body">
        <segment state="initial">
          <source>variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7530" name="warn_vbase_moved_multiple_times">
        <segment state="initial">
          <source>defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7531" name="warn_vector_long_decl_spec_combination">
        <segment state="initial">
          <source>use of 'long' with '__vector' is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7532" name="warn_vector_mode_deprecated">
        <segment state="initial">
          <source>specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7533" name="warn_vla_used">
        <segment state="initial">
          <source>variable length array used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7534" name="warn_void_pointer_to_enum_cast">
        <segment state="initial">
          <source>cast to smaller integer type %1 from %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7535" name="warn_void_pointer_to_int_cast">
        <segment state="initial">
          <source>cast to smaller integer type %1 from %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7536" name="warn_wasm_dynamic_exception_spec_ignored">
        <segment state="initial">
          <source>dynamic exception specifications with types are currently ignored in wasm</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7537" name="warn_weak_identifier_undeclared">
        <segment state="initial">
          <source>weak identifier %0 never declared</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7538" name="warn_weak_import">
        <segment state="initial">
          <source>%0 cannot be declared 'weak_import' because its definition has been provided</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7539" name="warn_weak_template_vtable">
        <segment state="initial">
          <source>this warning is no longer in use and will be removed in the next release</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7540" name="warn_weak_vtable">
        <segment state="initial">
          <source>%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7541" name="warn_wrong_absolute_value_type">
        <segment state="initial">
          <source>using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7542" name="warn_xor_used_as_pow">
        <segment state="initial">
          <source>result of '%0' is %1; did you mean exponentiation?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7543" name="warn_xor_used_as_pow_base">
        <segment state="initial">
          <source>result of '%0' is %1; did you mean '%2'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7544" name="warn_xor_used_as_pow_base_extra">
        <segment state="initial">
          <source>result of '%0' is %1; did you mean '%2' (%3)?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7545" name="warn_zero_as_null_pointer_constant">
        <segment state="initial">
          <source>zero as null pointer constant</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7546" name="warn_zero_size_struct_union_compat">
        <segment state="initial">
          <source>%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="7547" name="warn_zero_size_struct_union_in_extern_c">
        <segment state="initial">
          <source>%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</source>
          <target></target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>