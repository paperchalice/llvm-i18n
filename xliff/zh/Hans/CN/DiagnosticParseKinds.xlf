<?xml version='1.0' encoding='UTF-8'?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1" xsi:schemaLocation="http://docs.oasis-open.org/xliff/xliff-core/v2.1/os/schemas/xliff_core_2.0.xsd" trgLang="zh-Hans-CN">
  <!--This file is automatically generated. Do not update this file directly by hand! Use `update-xliff.py`.-->
  <file id="DiagnosticParse" original="clang/Basic/DiagnosticParseKinds.td">
    <group id="TextSubstitution">
      <unit id="subst_compound_token_kind">
        <segment>
          <source>%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3</source>
          <target></target>
        </segment>
      </unit>
    </group>
    <group id="Diagnostic">
      <unit id="compat_cxx11_enum_fixed_underlying_type">
        <segment>
          <source>enumeration types with a fixed underlying type are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="compat_pre_cxx11_enum_fixed_underlying_type">
        <segment>
          <source>enumeration types with a fixed underlying type are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_expected_reduction_operator">
        <segment>
          <source>missing reduction operator, expected '+', '*', 'max', 'min', '&amp;', '|', '^', '&amp;&amp;', or '||', follwed by a ':'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_incorrect_bind_arg">
        <segment>
          <source>expected identifier or string literal in OpenACC 'bind' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_clause">
        <segment>
          <source>invalid OpenACC clause %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_default_clause_kind">
        <segment>
          <source>invalid value for 'default' clause; expected 'present' or 'none'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_directive">
        <segment>
          <source>invalid OpenACC directive %select{%1|'%1 %2'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_open_paren">
        <segment>
          <source>expected clause-list or newline in OpenACC directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_reduction_operator">
        <segment>
          <source>invalid reduction operator,  expected '+', '*', 'max', 'min', '&amp;', '|', '^', '&amp;&amp;', or '||'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_invalid_tag_kind">
        <segment>
          <source>invalid tag %0 on '%1' %select{directive|clause}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_missing_directive">
        <segment>
          <source>expected OpenACC directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_modifier">
        <segment>
          <source>%enum_select&lt;ACCModifier&gt;{%Unknown{unknown}|%Duplicate{duplicate}}0 modifier %1 in OpenACC modifier-list on '%2' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_acc_unexpected_directive">
        <segment>
          <source>unexpected OpenACC directive %select{|'#pragma acc %1'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_access_specifier_interface">
        <segment>
          <source>interface types cannot specify '%select{private|protected}0' access</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_address_of_label_outside_fn">
        <segment>
          <source>use of address-of-label extension outside of a function body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_alias_declaration_not_identifier">
        <segment>
          <source>name defined in alias declaration must be an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_alias_declaration_pack_expansion">
        <segment>
          <source>alias declaration cannot be a pack expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_alias_declaration_specialization">
        <segment>
          <source>%select{partial specialization|explicit specialization|explicit instantiation}0 of alias templates is not permitted</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_anon_bitfield_member_init">
        <segment>
          <source>anonymous bit-field cannot have a default member initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_anon_type_definition">
        <segment>
          <source>declaration of anonymous %0 must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_anonymous_enum_bitfield">
        <segment>
          <source>ISO C++ only allows ':' in member enumeration declaration to introduce a fixed underlying type, not an anonymous bit-field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_arc_bridge_retain">
        <segment>
          <source>unknown cast annotation __bridge_retain; did you mean __bridge_retained?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_argument_required_after_attribute">
        <segment>
          <source>argument required after attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_asm_duplicate_qual">
        <segment>
          <source>duplicate asm qualifier '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_asm_empty">
        <segment>
          <source>__asm used with no assembly instructions</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_asm_expected_string">
        <segment>
          <source>expected string literal %select{or parenthesized constant expression |}0in 'asm'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_asm_operand_wide_string_literal">
        <segment>
          <source>cannot use %select{unicode|wide}0 string literal in 'asm'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_asm_qualifier_ignored">
        <segment>
          <source>expected 'volatile', 'inline', 'goto', or '('</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_assume_attr_expects_cond_expr">
        <segment>
          <source>use of this expression in an %0 attribute requires parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_at_defs_cxx">
        <segment>
          <source>@defs is not supported in Objective-C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_at_in_class">
        <segment>
          <source>unexpected '@' in member specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_atimport">
        <segment>
          <source>use of '@import' when modules are disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attribute_argument_parm_pack_not_supported">
        <segment>
          <source>attribute %0 does not support argument pack expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attribute_not_import_attr">
        <segment>
          <source>%0 attribute cannot be applied to a module import</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attribute_not_module_attr">
        <segment>
          <source>%0 attribute cannot be applied to a module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attribute_requires_arguments">
        <segment>
          <source>parentheses must be omitted if %0 attribute's argument list is empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attributes_misplaced">
        <segment>
          <source>misplaced attributes; expected attributes here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_attributes_not_allowed">
        <segment>
          <source>an attribute list cannot appear here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_avail_query_expected_platform_name">
        <segment>
          <source>expected a platform name here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_avail_query_unrecognized_platform_name">
        <segment>
          <source>unrecognized platform name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_expected_change">
        <segment>
          <source>expected 'introduced', 'deprecated', or 'obsoleted'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_expected_environment">
        <segment>
          <source>expected an environment name, e.g., 'compute'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_expected_platform">
        <segment>
          <source>expected a platform name, e.g., 'macos'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_query_repeated_platform">
        <segment>
          <source>version for '%0' already specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_query_repeated_star">
        <segment>
          <source>'*' query has already been specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_query_wildcard_required">
        <segment>
          <source>must handle potential future platforms with '*'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_redundant">
        <segment>
          <source>redundant %0 availability change; only the last specified change will be used</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_availability_unknown_change">
        <segment>
          <source>%0 is not an availability stage; use 'introduced', 'deprecated', or 'obsoleted'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_binding_multiple_ellipses">
        <segment>
          <source>multiple packs in structured binding declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_bool_redeclaration">
        <segment>
          <source>redeclaration of C++ built-in type 'bool'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_bracket_depth_exceeded">
        <segment>
          <source>bracket nesting level exceeded maximum of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_brackets_go_after_unqualified_id">
        <segment>
          <source>brackets are not allowed here; to declare an array, place the brackets after the %select{identifier|name}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_c11_noreturn_misplaced">
        <segment>
          <source>'_Noreturn' keyword must precede function declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_capture_default_first">
        <segment>
          <source>capture default must be first</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_class_on_template_template_param">
        <segment>
          <source>template template parameter requires 'class'%select{| or 'typename'}0 after the parameter list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_concept_definition_not_identifier">
        <segment>
          <source>name defined in concept definition must be an identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_concept_legacy_bool_keyword">
        <segment>
          <source>ISO C++ does not permit the 'bool' keyword after 'concept'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_constructor_bad_name">
        <segment>
          <source>missing return type for function %0; did you mean the constructor name %1?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ctor_init_missing_comma">
        <segment>
          <source>missing ',' between base or member initializers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_cxx11_attribute_forbids_arguments">
        <segment>
          <source>attribute %0 cannot have an argument list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_cxx11_attribute_forbids_ellipsis">
        <segment>
          <source>attribute %0 cannot be used as an attribute pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_declaration_does_not_declare_param">
        <segment>
          <source>declaration does not declare a parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_declspec_after_virtspec">
        <segment>
          <source>'%0' qualifier may not appear after the virtual specifier '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_default_arg_unparsed">
        <segment>
          <source>unexpected end of default argument expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_default_delete_in_multiple_declaration">
        <segment>
          <source>'= %select{default|delete}0' is a function definition and must occur in a standalone declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_default_template_template_parameter_not_template">
        <segment>
          <source>default template argument for a template template parameter must be a class template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_destructor_template_id">
        <segment>
          <source>destructor name %0 does not refer to a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_destructor_tilde_identifier">
        <segment>
          <source>expected a class name after '~' to name a destructor</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_destructor_tilde_scope">
        <segment>
          <source>'~' in destructor name should be after nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_dup_virtual">
        <segment>
          <source>duplicate 'virtual' in base specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_duplicate_class_relocation_specifier">
        <segment>
          <source>class already marked '%select{trivially_relocatable_if_eligible|replaceable_if_eligible}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_duplicate_class_virt_specifier">
        <segment>
          <source>class already marked '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_duplicate_default_assoc">
        <segment>
          <source>duplicate default generic association</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_duplicate_virt_specifier">
        <segment>
          <source>class member already marked '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_dynamic_and_noexcept_specification">
        <segment>
          <source>cannot have both throw() and noexcept() clause on the same function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_empty_enum">
        <segment>
          <source>use of empty enum</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_empty_requires_expr">
        <segment>
          <source>a requires expression must contain at least one requirement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_enumerator_list_missing_comma">
        <segment>
          <source>missing ',' between enumerators</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_enumerator_unnamed_no_def">
        <segment>
          <source>unnamed enumeration must be a definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_except_spec_unparsed">
        <segment>
          <source>unexpected end of exception specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_begin_assumes">
        <segment>
          <source>'#pragma omp end assumes' with no matching '#pragma omp begin assumes'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_begin_declare_variant">
        <segment>
          <source>'#pragma omp end declare variant' with no matching '#pragma omp begin declare variant'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_capture">
        <segment>
          <source>expected variable name or 'this' in lambda capture list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_case_before_expression">
        <segment>
          <source>expected 'case' keyword before expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_catch">
        <segment>
          <source>expected catch</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_class_name">
        <segment>
          <source>expected class name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_class_name_not_template">
        <segment>
          <source>'typename' is redundant; base classes are implicitly types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_coloncolon_after_super">
        <segment>
          <source>expected '::' after '__super'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_comma_greater">
        <segment>
          <source>expected ',' or '&gt;' in template-parameter-list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_comma_or_rsquare">
        <segment>
          <source>expected ',' or ']' in lambda capture list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_end_declare_target_or_variant">
        <segment>
          <source>expected '#pragma omp end declare %select{target|variant}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_end_of_enumerator">
        <segment>
          <source>expected '= constant-expression' or end of enumerator definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_equal_designator">
        <segment>
          <source>expected '=' or another designator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_expression">
        <segment>
          <source>expected expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_external_declaration">
        <segment>
          <source>expected external declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_field_designator">
        <segment>
          <source>expected a field designator, such as '.field = 4'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_fn_body">
        <segment>
          <source>expected function body after function declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_fold_operator">
        <segment>
          <source>expected a foldable binary operator in fold expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_init_in_condition">
        <segment>
          <source>variable declaration in condition must have an initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_init_in_condition_lparen">
        <segment>
          <source>variable declaration in condition cannot have a parenthesized initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_lambda_body">
        <segment>
          <source>expected body of lambda expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_lbrace_after_base_specifiers">
        <segment>
          <source>expected '{' after base class list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_lbrace_in_compound_literal">
        <segment>
          <source>expected '{' in compound literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_less_after">
        <segment>
          <source>expected '&lt;' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_lparen_after">
        <segment>
          <source>expected '(' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_lparen_after_type">
        <segment>
          <source>expected '(' for function-style cast or type construction</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_member_name_or_semi">
        <segment>
          <source>expected member name or ';' after declaration specifiers</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_member_name_or_semi_objcxx_keyword">
        <segment>
          <source>expected member name or ';' after declaration specifiers; %0 is a keyword in Objective-C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_member_or_base_name">
        <segment>
          <source>expected class member or base class name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_method_body">
        <segment>
          <source>expected method body</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_minus_or_plus">
        <segment>
          <source>method type specifier must start with '-' or '+'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_objc_container">
        <segment>
          <source>'@end' must appear in an Objective-C context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_parameter_pack">
        <segment>
          <source>expected the name of a parameter pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_parentheses_around_typename">
        <segment>
          <source>expected parentheses around type name in %0 expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_property_name">
        <segment>
          <source>expected property name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_punc">
        <segment>
          <source>expected ')' or ',' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_qualified_after_typename">
        <segment>
          <source>expected a qualified name after 'typename'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_rparen_after">
        <segment>
          <source>expected ')' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_selector_for_method">
        <segment>
          <source>expected selector for Objective-C method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semantic_identifier">
        <segment>
          <source>expected HLSL Semantic identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_attribute_list">
        <segment>
          <source>expected ';' after attribute list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_expr">
        <segment>
          <source>expected ';' after expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_method_proto">
        <segment>
          <source>expected ';' after method prototype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_namespace_name">
        <segment>
          <source>expected ';' after namespace name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_static_assert">
        <segment>
          <source>expected ';' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_after_stmt">
        <segment>
          <source>expected ';' after %0 statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_decl_list">
        <segment>
          <source>expected ';' at end of declaration list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_declaration">
        <segment>
          <source>expected ';' at end of declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_for">
        <segment>
          <source>expected ';' in 'for' statement specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_semi_requirement">
        <segment>
          <source>expected ';' at end of requirement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_sequence_or_directive">
        <segment>
          <source>expected an OpenMP 'directive' or 'sequence' attribute argument</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_star_this_capture">
        <segment>
          <source>expected 'this' following '*' in lambda capture list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_statement">
        <segment>
          <source>expected statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_template">
        <segment>
          <source>expected template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_template_parameter">
        <segment>
          <source>expected template parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_token_instead_of_objcxx_keyword">
        <segment>
          <source>expected %0; %1 is a keyword in Objective-C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_type">
        <segment>
          <source>expected a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_type_name_after_typename">
        <segment>
          <source>expected an identifier or template-id after '::'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_unqualified_id">
        <segment>
          <source>expected %select{identifier|unqualified-id}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_version">
        <segment>
          <source>expected a version of the form 'major[.minor[.subminor]]'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_expected_while">
        <segment>
          <source>expected 'while' in do/while loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_explicit_instantiation_enum">
        <segment>
          <source>enumerations cannot be explicitly instantiated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_explicit_instantiation_with_definition">
        <segment>
          <source>explicit template instantiation cannot have a definition; if this definition is meant to be an explicit specialization, add '&lt;&gt;' after the 'template' keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_explicit_spec_non_template">
        <segment>
          <source>explicit %select{specialization|instantiation}0 of %select{non-|undeclared }3template %1 %2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_export_empty">
        <segment>
          <source>export declaration cannot be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_external_source_symbol_duplicate_clause">
        <segment>
          <source>duplicate %0 clause in an 'external_source_symbol' attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_external_source_symbol_expected_keyword">
        <segment>
          <source>expected 'language', 'defined_in', 'generated_declaration', or 'USR'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_extraneous_closing_brace">
        <segment>
          <source>extraneous closing brace ('}')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_extraneous_rparen_in_condition">
        <segment>
          <source>extraneous ')' after condition, expected a statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_extraneous_token_before_semi">
        <segment>
          <source>extraneous '%0' before ';'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_fold_operator_mismatch">
        <segment>
          <source>operators in fold expression must be the same</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_for_co_await_not_range_for">
        <segment>
          <source>'co_await' modifier can only be applied to range-based for loop</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_for_range_expected_decl">
        <segment>
          <source>for range declaration must declare a variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_for_range_identifier">
        <segment>
          <source>range-based for loop requires type for loop variable</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_friend_concept">
        <segment>
          <source>friend declaration cannot be a concept</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_friend_decl_defines_type">
        <segment>
          <source>cannot define a type in a friend declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_friend_explicit_instantiation">
        <segment>
          <source>friend cannot be declared in an explicit instantiation; if this declaration is meant to be a friend declaration, remove the 'template' keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_friend_invalid_in_context">
        <segment>
          <source>'friend' used outside of class</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_func_def_no_params">
        <segment>
          <source>function definition does not declare parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_function_declared_typedef">
        <segment>
          <source>function definition declared 'typedef'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_function_definition_not_allowed">
        <segment>
          <source>function definition is not allowed here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_function_is_not_record">
        <segment>
          <source>unexpected %0 in function call; perhaps remove the %0?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_function_parameter_limit_exceeded">
        <segment>
          <source>too many function parameters; subsequent parameters will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_function_scope_depth_exceeded">
        <segment>
          <source>function scope depth exceeded maximum of %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_global_asm_qualifier_ignored">
        <segment>
          <source>meaningless '%0' on asm outside function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_global_module_introducer_not_at_start">
        <segment>
          <source>'module;' introducing a global module fragment can appear only at the start of the translation unit</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_gnu_inline_asm_disabled">
        <segment>
          <source>GNU-style inline assembly is disabled</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_number_literal_overflow">
        <segment>
          <source>integer literal is too large to be represented as a 32-bit %select{signed |}0 integer type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_packoffset_invalid_reg">
        <segment>
          <source>invalid resource class specifier '%0' for packoffset, expected 'c'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_rootsig_missing_param">
        <segment>
          <source>did not specify mandatory parameter '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_rootsig_non_zero_flag">
        <segment>
          <source>flag value is neither a literal 0 nor a named value</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_rootsig_repeat_param">
        <segment>
          <source>specified the same parameter '%0' multiple times</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_separate_attr_arg_and_number">
        <segment>
          <source>wrong argument format for hlsl attribute, use %0 instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_unexpected_end_of_params">
        <segment>
          <source>expected %0 to denote end of parameters, or, another valid parameter of %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_unsupported_component">
        <segment>
          <source>invalid component '%0' used; expected 'x', 'y', 'z', or 'w'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_virtual_function">
        <segment>
          <source>virtual functions are unsupported in HLSL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_hlsl_virtual_inheritance">
        <segment>
          <source>virtual inheritance is unsupported in HLSL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_id_after_template_in_nested_name_spec">
        <segment>
          <source>expected template name after 'template' keyword in nested name specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_illegal_decl_reference_to_reference">
        <segment>
          <source>%0 declared as a reference to a reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_illegal_super_cast">
        <segment>
          <source>cannot cast 'super' (it isn't an expression)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_import_in_wrong_fragment">
        <segment>
          <source>module%select{| partition}0 imports cannot be in the %select{global|private}1 module fragment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_import_not_allowed_here">
        <segment>
          <source>imports must immediately follow the module declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_incomplete_array_member_init">
        <segment>
          <source>array bound cannot be deduced from a default member initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_init_list_bin_op">
        <segment>
          <source>initializer list cannot be used on the %select{left|right}0 hand side of operator '%1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_inline_ms_asm_parsing">
        <segment>
          <source>%0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_inline_namespace_alias">
        <segment>
          <source>namespace alias cannot be inline</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_inline_nested_namespace_definition">
        <segment>
          <source>nested namespace definition cannot be 'inline'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_declaration_in_hlsl_buffer">
        <segment>
          <source>invalid declaration inside %select{tbuffer|cbuffer}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_operator_on_type">
        <segment>
          <source>cannot use %select{dot|arrow}0 operator on a type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_reference_qualifier_application">
        <segment>
          <source>'%0' qualifier may not be applied to a reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_token_after_declarator_suggest_equal">
        <segment>
          <source>invalid %0 at end of declaration; did you mean '='?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_invalid_token_after_toplevel_declarator">
        <segment>
          <source>expected ';' after top level declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_keyword_as_parameter">
        <segment>
          <source>invalid parameter name: '%0' is a keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_keyword_misplaced">
        <segment>
          <source>misplaced %0; expected %0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_keyword_not_allowed">
        <segment>
          <source>%0 cannot appear here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_keyword_not_import_attr">
        <segment>
          <source>%0 cannot be applied to a module import</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_keyword_not_module_attr">
        <segment>
          <source>%0 cannot be applied to a module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_l_square_l_square_not_attribute">
        <segment>
          <source>C++11 only allows consecutive left square brackets when introducing an attribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lambda_after_delete">
        <segment>
          <source>'[]' after delete interpreted as 'delete[]'; add parentheses to treat this as a lambda-expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lambda_capture_misplaced_ellipsis">
        <segment>
          <source>ellipsis in pack %select{|init-}0capture must appear %select{after|before}0 the name of the capture</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lambda_capture_multiple_ellipses">
        <segment>
          <source>multiple ellipses in pack capture</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lambda_decl_specifier_repeated">
        <segment>
          <source>%select{'mutable'|'static'|'constexpr'|'consteval'}0 cannot appear multiple times in a lambda declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_lambda_template_parameter_list_empty">
        <segment>
          <source>lambda template parameter list cannot be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_literal_operator_string_not_empty">
        <segment>
          <source>string literal after 'operator' must be '""'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_literal_operator_string_prefix">
        <segment>
          <source>string literal after 'operator' cannot have an encoding prefix</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_misplaced_ellipsis_in_declaration">
        <segment>
          <source>'...' must %select{immediately precede declared identifier|be innermost component of anonymous pack declaration}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_before_module_end">
        <segment>
          <source>expected %0 at end of module</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_catch_finally">
        <segment>
          <source>@try statement without a @catch and @finally clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_comma_before_ellipsis">
        <segment>
          <source>C requires a comma prior to the ellipsis in a variadic function type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_dependent_template_keyword">
        <segment>
          <source>use 'template' keyword to treat '%0' as a dependent template name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_end_of_definition">
        <segment>
          <source>missing '}' at end of definition of %q0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_param">
        <segment>
          <source>expected parameter declarator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_missing_whitespace_digraph">
        <segment>
          <source>found '&lt;::' after a %select{template name|addrspace_cast|const_cast|dynamic_cast|reinterpret_cast|static_cast}0 which forms the digraph '&lt;:' (aka '[') and a ':', did you mean '&lt; ::'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_modifier_expected_colon">
        <segment>
          <source>missing ':' after %0 modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_module_expected_ident">
        <segment>
          <source>expected a module name after '%select{module|import}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_module_expected_semi">
        <segment>
          <source>expected ';' after module name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_module_fragment_exported">
        <segment>
          <source>%select{global|private}0 module fragment cannot be exported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_attributes_not_enabled">
        <segment>
          <source>'__declspec' attributes are not enabled; use '-fdeclspec' or '-fms-extensions' to enable support for __declspec attributes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_declspec_type">
        <segment>
          <source>__declspec attributes must be an identifier or string literal</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_duplicate_accessor">
        <segment>
          <source>property declaration specifies '%0' accessor twice</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_expected_accessor_name">
        <segment>
          <source>expected name of accessor method</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_expected_comma_or_rparen">
        <segment>
          <source>expected ',' or ')' at end of property accessor list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_expected_equal">
        <segment>
          <source>expected '=' after '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_has_set_accessor">
        <segment>
          <source>putter for property must be specified as 'put', not 'set'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_initializer">
        <segment>
          <source>property declaration cannot have a default member initializer</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_missing_accessor_kind">
        <segment>
          <source>missing 'get=' or 'put='</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_no_getter_or_putter">
        <segment>
          <source>property does not specify a getter or a putter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ms_property_unknown_accessor">
        <segment>
          <source>expected 'get' or 'put' in property declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_msasm_unable_to_create_target">
        <segment>
          <source>MS-style inline assembly is not available: %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_msasm_unsupported_arch">
        <segment>
          <source>unsupported architecture '%0' for MS-style inline assembly</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_multiple_template_declarators">
        <segment>
          <source>%select{|a template declaration|an explicit template specialization|an explicit template instantiation}0 can only %select{|declare|declare|instantiate}0 a single entity</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_namespace_nonnamespace_scope">
        <segment>
          <source>namespaces can only be defined in global or namespace scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_no_matching_param">
        <segment>
          <source>parameter named %0 is missing</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_nsnumber_nonliteral_unary">
        <segment>
          <source>@%0 must be followed by a number to form an NSNumber object</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_concat_string">
        <segment>
          <source>unexpected token after Objective-C string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_directive_only_in_protocol">
        <segment>
          <source>directive may only be specified in protocols only</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_expected_equal_for_getter">
        <segment>
          <source>expected '=' for Objective-C getter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_expected_equal_for_setter">
        <segment>
          <source>expected '=' for Objective-C setter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_expected_property_attr">
        <segment>
          <source>unknown property attribute %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_expected_selector_for_getter_setter">
        <segment>
          <source>expected selector for Objective-C %select{setter|getter}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_expected_type_parameter">
        <segment>
          <source>expected type parameter name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_illegal_interface_qual">
        <segment>
          <source>illegal interface qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_illegal_visibility_spec">
        <segment>
          <source>illegal visibility specification</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_missing_end">
        <segment>
          <source>missing '@end'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_parameterized_implementation">
        <segment>
          <source>@implementation cannot have type parameters</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_postfix_attribute">
        <segment>
          <source>postfix attributes are not allowed on Objective-C directives</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_postfix_attribute_hint">
        <segment>
          <source>postfix attributes are not allowed on Objective-C directives, place them in front of '%select{@interface|@protocol}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_property_bitfield">
        <segment>
          <source>property name cannot be a bit-field</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_property_requires_field_name">
        <segment>
          <source>property requires fields to be named</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_type_args_after_protocols">
        <segment>
          <source>protocol qualifiers must precede type arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_unexpected_atend">
        <segment>
          <source>'@end' appears where closing brace '}' is expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_unexpected_attr">
        <segment>
          <source>prefix attribute must be followed by an interface, protocol, or implementation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objc_unknown_at">
        <segment>
          <source>expected an Objective-C directive after '@'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objcbridge_related_expected_related_class">
        <segment>
          <source>expected a related Objective-C class name, e.g., 'NSColor'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_objcbridge_related_selector_name">
        <segment>
          <source>expected a class method selector with single argument, e.g., 'colorWithCGColor:'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_begin_declare_target_unexpected_implicit_to_clause">
        <segment>
          <source>unexpected '(', only 'to', 'link' or 'device_type' clauses expected for 'begin declare target' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_decl_in_declare_simd_variant">
        <segment>
          <source>function declaration is expected after 'declare %select{simd|variant}0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_simd_inbranch_notinbranch">
        <segment>
          <source>unexpected '%0' clause, '%1' is specified already</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_indirect_device_type">
        <segment>
          <source>only 'device_type(any)' clause is allowed with indirect clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_missing_enter_or_link_clause">
        <segment>
          <source>expected at least one %select{'enter' or 'link'|'enter', 'link' or 'indirect'}0 clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_missing_to_or_link_clause">
        <segment>
          <source>expected at least one %select{'to' or 'link'|'to', 'link' or 'indirect'}0 clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_multiple">
        <segment>
          <source>%0 appears multiple times in clauses on the same declare target directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_unexpected_clause">
        <segment>
          <source>unexpected '%0' clause, only %select{'device_type'|'to' or 'link'|'to', 'link' or 'device_type'|'device_type', 'indirect'|'to', 'link', 'device_type' or 'indirect'}1 clauses expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_unexpected_clause_52">
        <segment>
          <source>unexpected '%0' clause, only %select{'device_type'|'enter' or 'link'|'enter', 'link' or 'device_type'|'device_type', 'indirect'|'enter', 'link', 'device_type' or 'indirect'}1 clauses expected</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_unexpected_enter_clause">
        <segment>
          <source>unexpected 'enter' clause, use 'to' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_unexpected_to_clause">
        <segment>
          <source>unexpected 'to' clause, use 'enter' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_wrong_clause_after_implicit_enter">
        <segment>
          <source>unexpected clause after an implicit 'enter' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_target_wrong_clause_after_implicit_to">
        <segment>
          <source>unexpected clause after an implicit 'to' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_variant_duplicate_nested_trait">
        <segment>
          <source>nested OpenMP context selector contains duplicated trait '%0' in selector '%1' and set '%2' with different score</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_variant_nested_user_condition">
        <segment>
          <source>nested user conditions in OpenMP context selector not supported (yet)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_declare_variant_wrong_clause">
        <segment>
          <source>expected %select{'match'|'match', 'adjust_args', or 'append_args'}0 clause on 'omp declare variant' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_deprecate_old_syntax">
        <segment>
          <source>old syntax '%0' on '%1' clause was deprecated, use new syntax '%2'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_duplicate_modifier">
        <segment>
          <source>duplicate modifier '%0' in '%1' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_clause">
        <segment>
          <source>expected at least one clause on '#pragma omp %0' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_clause_argument">
        <segment>
          <source>expected '%0' clause with an argument on '#pragma omp %1' construct</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_colon">
        <segment>
          <source>missing ':' in %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_context_selector">
        <segment>
          <source>expected valid context selector in %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_equal_in_iterator">
        <segment>
          <source>expected '=' in iterator specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_identifier_for_critical">
        <segment>
          <source>expected identifier specifying the name of the 'omp critical' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_interop_type">
        <segment>
          <source>expected interop type: 'target' and/or 'targetsync'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_modifier">
        <segment>
          <source>expected modifier in '%0' clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_punc">
        <segment>
          <source>expected ',' or ')' in '%0' %select{clause|directive}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_punc_after_interop_mod">
        <segment>
          <source>expected ',' after interop modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_punc_after_iterator">
        <segment>
          <source>expected ',' or ')' after iterator specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_expected_reduction_identifier">
        <segment>
          <source>expected identifier or one of the following operators: '+', '-', '*', '&amp;', '|', '^', '&amp;&amp;', or '||'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_immediate_directive">
        <segment>
          <source>'#pragma omp %0' %select{|with '%2' clause }1cannot be an immediate substatement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_invalid_dsa">
        <segment>
          <source>data-sharing attribute '%0' in '%1' clause requires OpenMP version %2 or above</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_map_modifier_specification_list">
        <segment>
          <source>empty modifier-specification-list is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_map_type_missing">
        <segment>
          <source>missing map type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_map_type_modifier_missing">
        <segment>
          <source>missing map type modifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_mapper_expected_declarator">
        <segment>
          <source>expected declarator on 'omp declare mapper' directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_mapper_illegal_identifier">
        <segment>
          <source>illegal OpenMP user-defined mapper identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_missing_comma">
        <segment>
          <source>missing ',' after %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_more_one_map_type">
        <segment>
          <source>map type is already specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_multiple_step_or_linear_modifier">
        <segment>
          <source>multiple %select{'step size'|'linear modifier'}0 found in linear clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_requires_out_inout_depend_type">
        <segment>
          <source>reserved locator 'omp_all_memory' requires 'out' or 'inout' dependency types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_sink_and_source_iteration_not_allowd">
        <segment>
          <source> '%0 %select{sink:|source:}1' must be with '%select{omp_cur_iteration - 1|omp_cur_iteration}1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unexpected_append_op">
        <segment>
          <source>unexpected operation specified in 'append_args' clause, expected 'interop'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unexpected_clause">
        <segment>
          <source>unexpected OpenMP clause '%0' in directive '#pragma omp %1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unexpected_clause_extension_only">
        <segment>
          <source>OpenMP clause '%0' is only available as extension, use '-fopenmp-extensions'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unexpected_directive">
        <segment>
          <source>unexpected OpenMP directive %select{|'#pragma omp %1'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unexpected_execution_modifier">
        <segment>
          <source>unexpected 'execution' modifier in non-executable context</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unknown_adjust_args_op">
        <segment>
          <source>incorrect adjust_args type, expected 'need_device_ptr' or 'nothing'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unknown_directive">
        <segment>
          <source>expected an OpenMP directive</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unknown_map_type">
        <segment>
          <source>incorrect map type, expected one of 'to', 'from', 'tofrom', 'alloc', 'release', or 'delete'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_unknown_map_type_modifier">
        <segment>
          <source>incorrect map type modifier, expected one of: 'always', 'close', 'mapper'%select{|, 'present'|, 'present', 'iterator'}0%select{|, 'ompx_hold'}1%select{|, 'self'}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_omp_variant_ctx_second_match_extension">
        <segment>
          <source>only a single match extension allowed per OpenMP context selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_opencl_taking_function_address_parser">
        <segment>
          <source>taking address of function is not allowed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_openclcxx_virtual_function">
        <segment>
          <source>virtual functions are not supported in C++ for OpenCL</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_out_of_line_constructor_template_id">
        <segment>
          <source>out-of-line constructor for %0 cannot have template arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_override_control_interface">
        <segment>
          <source>'%0' keyword not permitted with interface types</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_paren_sizeof_parameter_pack">
        <segment>
          <source>missing parentheses around the size of parameter pack %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_partition_import_outside_module">
        <segment>
          <source>module partition imports must be within a module purview</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_placeholder_expected_auto_or_decltype_auto">
        <segment>
          <source>expected 'auto' or 'decltype(auto)' after concept name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_postfix_after_unary_requires_parens">
        <segment>
          <source>expression cannot be followed by a postfix %0 operator; add parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_duplicate_subject">
        <segment>
          <source>duplicate attribute subject matcher '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_attribute">
        <segment>
          <source>expected an attribute after '('</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_attribute_name">
        <segment>
          <source>expected identifier that represents an attribute name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_attribute_syntax">
        <segment>
          <source>expected an attribute that is specified using the GNU, C++11 or '__declspec' syntax</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_period">
        <segment>
          <source>expected '.' after pragma attribute namespace %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_push_pop_paren">
        <segment>
          <source>expected 'push', 'pop', or '(' after '#pragma clang attribute'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_subject_identifier">
        <segment>
          <source>expected an identifier that corresponds to an attribute subject rule</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_expected_subject_sub_identifier">
        <segment>
          <source>expected an identifier that corresponds to an attribute subject matcher sub-rule; '%0' matcher %select{does not support sub-rules|supports the following sub-rules: %2|}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_extra_tokens_after_attribute">
        <segment>
          <source>extra tokens after attribute in a '#pragma clang attribute push'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_invalid_argument">
        <segment>
          <source>unexpected argument '%0' to '#pragma clang attribute'; expected 'push' or 'pop'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_invalid_subject_set_specifier">
        <segment>
          <source>expected attribute subject set specifier 'apply_to'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_namespace_on_attribute">
        <segment>
          <source>namespace can only apply to 'push' or 'pop' directives</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_unknown_subject_rule">
        <segment>
          <source>unknown attribute subject rule '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_unknown_subject_sub_rule">
        <segment>
          <source>%select{invalid use of|unknown}2 attribute subject matcher sub-rule '%0'; '%1' matcher %select{does not support sub-rules|supports the following sub-rules: %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_attribute_unsupported_attribute">
        <segment>
          <source>attribute %0 is not supported by '#pragma clang attribute'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_cannot_end_force_cuda_host_device">
        <segment>
          <source>force_cuda_host_device end pragma without matching force_cuda_host_device begin</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_clang_section_expected_equal">
        <segment>
          <source>expected '=' following '#pragma clang section %select{invalid|bss|data|rodata|text|relro}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_comment_malformed">
        <segment>
          <source>pragma comment requires parenthesized identifier and optional string</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_comment_unknown_kind">
        <segment>
          <source>unknown kind of pragma comment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_detect_mismatch_malformed">
        <segment>
          <source>pragma detect_mismatch is malformed; it requires two comma-separated string literals</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_expected_clang_section_name">
        <segment>
          <source>expected one of [bss|data|rodata|text|relro] section kind in '#pragma %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_expected_integer">
        <segment>
          <source>expected an integer argument in '#pragma %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_file_or_compound_scope">
        <segment>
          <source>'#pragma %0' can only appear at file scope or at the start of a compound statement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_float_control_malformed">
        <segment>
          <source>pragma float_control is malformed; use 'float_control({push|pop})' or 'float_control({precise|except}, {on|off} [,push])'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_fp_invalid_argument">
        <segment>
          <source>unexpected argument '%0' to '#pragma clang fp %1'; expected %select{'fast' or 'on' or 'off'|'on' or 'off'|'on' or 'off'|'ignore', 'maytrap' or 'strict'|'source', 'double' or 'extended'}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_fp_invalid_option">
        <segment>
          <source>%select{invalid|missing}0 option%select{ %1|}0; expected 'contract', 'reassociate', 'reciprocal', or 'exceptions'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_invalid_keyword">
        <segment>
          <source>invalid argument; expected 'enable'%select{|, 'full'}0%select{|, 'assume_safety'}1 or 'disable'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_loop_invalid_option">
        <segment>
          <source>%select{invalid|missing}0 option%select{ %1|}0; expected vectorize, vectorize_width, interleave, interleave_count, unroll, unroll_count, pipeline, pipeline_initiation_interval, vectorize_predicate, or distribute</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_loop_invalid_vectorize_option">
        <segment>
          <source>vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_loop_missing_argument">
        <segment>
          <source>missing argument; expected %select{an integer value|'enable'%select{|, 'full'}1%select{|, 'assume_safety'}2 or 'disable'}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_misplaced_in_decl">
        <segment>
          <source>this pragma cannot appear in %0 declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_missing_argument">
        <segment>
          <source>missing argument to '#pragma %0'%select{|; expected %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_optimize_extra_argument">
        <segment>
          <source>unexpected extra argument '%0' to '#pragma clang optimize'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_optimize_invalid_argument">
        <segment>
          <source>unexpected argument '%0' to '#pragma clang optimize'; expected 'on' or 'off'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_pipeline_invalid_keyword">
        <segment>
          <source>invalid argument; expected 'disable'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_pragma_pointers_to_members_unknown_kind">
        <segment>
          <source>unexpected %0, expected to see one of %select{|'best_case', 'full_generality', }1'single_inheritance', 'multiple_inheritance', or 'virtual_inheritance'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_private_module_fragment_expected_semi">
        <segment>
          <source>expected ';' after private module fragment declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_ptrauth_qualifier_bad_arg_count">
        <segment>
          <source>'__ptrauth' qualifier must take between 1 and 3 arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_clause_inside_parens">
        <segment>
          <source>trailing requires clause should be placed outside parentheses</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_clause_must_appear_after_trailing_return">
        <segment>
          <source>trailing return type must appear before trailing requires clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_clause_on_declarator_not_declaring_a_function">
        <segment>
          <source>trailing requires clause can only be used when declaring a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_expected_type_constraint">
        <segment>
          <source>expected concept name with optional arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_explicit_object_parameter">
        <segment>
          <source>a requires expression cannot have an explicit object parameter</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_in_simple_requirement">
        <segment>
          <source>requires expression in requirement body; did you intend to place it in a nested requirement? (add another 'requires' before the expression)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_missing_arrow">
        <segment>
          <source>expected '-&gt;' before expression type requirement</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_parameter_list_ellipsis">
        <segment>
          <source>varargs not allowed in requires expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_requires_expr_simple_requirement_noexcept">
        <segment>
          <source>'noexcept' can only be used in a compound requirement (with '{' '}' around the expression)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_right_angle_bracket_equal_needs_space">
        <segment>
          <source>a space is required between a right angle bracket and an equals sign (use '&gt; =')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_scoped_enum_missing_identifier">
        <segment>
          <source>scoped enumeration requires a name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_single_decl_assign_in_for_range">
        <segment>
          <source>range-based 'for' statement uses ':', not '='</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_sizeof_parameter_pack">
        <segment>
          <source>expected parenthesized parameter pack name in 'sizeof...' expression</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_static_lambda">
        <segment>
          <source>static lambdas are a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_static_lambda_captures">
        <segment>
          <source>a static lambda cannot have any captures</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_static_mutable_lambda">
        <segment>
          <source>lambda cannot be both mutable and static</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_stmtexpr_file_scope">
        <segment>
          <source>statement expression not allowed at file scope</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_super_in_using_declaration">
        <segment>
          <source>'__super' cannot be used with a using declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_synthesized_property_name">
        <segment>
          <source>expected a property name in @synthesize</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_template_defn_explicit_instantiation">
        <segment>
          <source>%select{function|class|variable}0 cannot be defined in an explicit instantiation; if this declaration is meant to be a %select{function|class|variable}0 definition, remove the 'template' keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_template_spec_syntax_non_template">
        <segment>
          <source>identifier followed by '&lt;' indicates a class template specialization but %0 %select{does not refer to a template|refers to a function template|&lt;unused&gt;|refers to a variable template|&lt;unused&gt;|&lt;unused&gt;|refers to a concept}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_templated_invalid_declaration">
        <segment>
          <source>a static_assert declaration cannot be a template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_templated_using_directive_declaration">
        <segment>
          <source>cannot template a using %select{directive|declaration}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_this_captured_by_reference">
        <segment>
          <source>'this' cannot be captured by reference</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_two_right_angle_brackets_need_space">
        <segment>
          <source>a space is required between consecutive right angle brackets (use '&gt; &gt;')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_type_safety_unknown_flag">
        <segment>
          <source>invalid comparison flag %0; use 'layout_compatible' or 'must_be_null'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_type_trait_arity">
        <segment>
          <source>type trait requires %0%select{| or more}1 argument%select{|s}2; have %3 argument%s3</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_type_unparsed">
        <segment>
          <source>unparsed tokens following type</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_identifiers_only">
        <segment>
          <source>typename is allowed for identifiers only</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_invalid_constexpr">
        <segment>
          <source>type name does not allow %sub{select_constexpr_spec_kind}0 specifier to be specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_invalid_functionspec">
        <segment>
          <source>type name does not allow function specifier to be specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_invalid_storageclass">
        <segment>
          <source>type name does not allow storage class to be specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_refers_to_non_type_template">
        <segment>
          <source>typename specifier refers to a non-type template</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_typename_requires_specqual">
        <segment>
          <source>type name requires a specifier or qualifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_at">
        <segment>
          <source>unexpected '@' in program</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_colon_in_nested_name_spec">
        <segment>
          <source>unexpected ':' in nested name specifier; did you mean '::'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_module_decl">
        <segment>
          <source>module declaration can only appear at the top level</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_namespace_attributes_alias">
        <segment>
          <source>attributes cannot be specified on namespace alias</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_nested_namespace_attribute">
        <segment>
          <source>attributes cannot be specified on a nested namespace definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_protocol_qualifier">
        <segment>
          <source>@implementation declaration cannot be protocol qualified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_qualified_namespace_alias">
        <segment>
          <source>namespace alias must be a single identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_scope_on_base_decltype">
        <segment>
          <source>unexpected namespace scope prior to decltype</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_semi">
        <segment>
          <source>unexpected ';' before %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_template_after_using">
        <segment>
          <source>'template' keyword not permitted after 'using' keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_template_in_destructor_name">
        <segment>
          <source>'template' keyword not permitted in destructor name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_template_in_unqualified_id">
        <segment>
          <source>'template' keyword not permitted here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_token_in_nested_name_spec">
        <segment>
          <source>'%0' cannot be a part of nested name specifier; did you mean ':'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_typedef_ident">
        <segment>
          <source>unexpected type name %0: expected identifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unexpected_unqualified_id">
        <segment>
          <source>type-id cannot have a name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unknown_hlsl_semantic">
        <segment>
          <source>unknown HLSL semantic %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unknown_template_name">
        <segment>
          <source>unknown template name %0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unparenthesized_non_primary_expr_in_requires_clause">
        <segment>
          <source>parentheses are required around this expression in a requires clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unspecified_size_with_static">
        <segment>
          <source>'static' may not be used without an array size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unspecified_vla_size_with_static">
        <segment>
          <source>'static' may not be used with an unspecified variable length array size</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_unsupported_module_partition">
        <segment>
          <source>module partitions are only supported for C++20 onwards</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_using_attribute_ns_conflict">
        <segment>
          <source>attribute with scope specifier cannot follow default scope specifier</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_using_enum_expect_identifier">
        <segment>
          <source>using enum %select{requires an enum or typedef name|does not permit an elaborated enum specifier}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_using_namespace_in_class">
        <segment>
          <source>'using namespace' is not allowed in classes</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_virt_specifier_outside_class">
        <segment>
          <source>'%0' specifier is not allowed outside a class definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_while_loop_outside_of_a_function">
        <segment>
          <source>while loop outside of a function</source>
          <target></target>
        </segment>
      </unit>
      <unit id="err_zero_version">
        <segment>
          <source>version number must have non-zero major, minor, or sub-minor version</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_abstract_pack_declarator_parens">
        <segment>
          <source>ISO C++11 requires a parenthesized pack declaration to have a name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_alias_declaration">
        <segment>
          <source>alias declarations are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_alias_in_init_statement">
        <segment>
          <source>alias declaration in this context is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_alignof_expr">
        <segment>
          <source>%0 applied to an expression is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_auto_storage_class">
        <segment>
          <source>'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_auto_type">
        <segment>
          <source>'__auto_type' is a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_bit_int">
        <segment>
          <source>'_BitInt' in %select{C17 and earlier|C++}0 is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_bitfield_member_init">
        <segment>
          <source>default member initializer for bit-field is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c2y_case_range">
        <segment>
          <source>case ranges are a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c2y_feature">
        <segment>
          <source>'%0' is a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c2y_generic_with_type_arg">
        <segment>
          <source>passing a type argument as the first operand to '_Generic' is a C2y extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c11_feature">
        <segment>
          <source>'%0' is a C11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c23_enum_fixed_underlying_type">
        <segment>
          <source>enumeration types with a fixed underlying type are a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c99_compound_literal">
        <segment>
          <source>compound literals are a C99-specific feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c99_feature">
        <segment>
          <source>'%0' is a C99 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c99_variable_decl_in_for_loop">
        <segment>
          <source>variable declaration in for loop is a C99-specific feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c_label_end_of_compound_statement">
        <segment>
          <source>label at end of compound statement is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c_label_followed_by_declaration">
        <segment>
          <source>label followed by a declaration is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c_nullptr">
        <segment>
          <source>'nullptr' is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_c_static_assert_no_message">
        <segment>
          <source>'_Static_assert' with no message is a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_consteval_if">
        <segment>
          <source>consteval if is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_constexpr_if">
        <segment>
          <source>constexpr if is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_constexpr_on_lambda_cxx17">
        <segment>
          <source>'constexpr' on lambda expressions is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx11_attr_placement">
        <segment>
          <source>ISO C++ does not allow %select{an attribute list|%0}1 to appear here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx_binding_pack">
        <segment>
          <source>structured binding packs are a C++2c extension </source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx_label_end_of_compound_statement">
        <segment>
          <source>label at end of compound statement is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx_static_assert_no_message">
        <segment>
          <source>'static_assert' with no message is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_cxx_static_assert_user_generated_message">
        <segment>
          <source>'static_assert' with a user-generated message is a C++26 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_decl_attrs_on_binding">
        <segment>
          <source>an attribute specifier sequence attached to a structured binding declaration is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_decl_attrs_on_lambda">
        <segment>
          <source>%select{an attribute specifier sequence|%0}1 in this position is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_decltype_auto_type_specifier">
        <segment>
          <source>'decltype(auto)' type specifier is a C++14 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_decomp_decl_empty">
        <segment>
          <source>ISO C++17 does not allow a decomposition group to be empty</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_defaulted_deleted_function">
        <segment>
          <source>%select{defaulted|deleted}0 function definitions are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_delete_with_message">
        <segment>
          <source>'= delete' with a message is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_dynamic_exception_spec">
        <segment>
          <source>ISO C++17 does not allow dynamic exception specifications</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_elaborated_enum_class">
        <segment>
          <source>reference to enumeration must use 'enum' not 'enum %select{struct|class}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ellipsis_exception_spec">
        <segment>
          <source>exception specification of '...' is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_empty_translation_unit">
        <segment>
          <source>ISO C requires a translation unit to contain at least one declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_enum_base_in_type_specifier">
        <segment>
          <source>non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration%select{|; missing list of enumerators?}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_enumerator_list_comma_c">
        <segment>
          <source>commas at the end of enumerator lists are a C99-specific feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_enumerator_list_comma_cxx">
        <segment>
          <source>commas at the end of enumerator lists are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_expected_semi_decl_list">
        <segment>
          <source>expected ';' at end of declaration list</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_explicit_bool">
        <segment>
          <source>explicit(bool) is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_extern_template">
        <segment>
          <source>extern templates are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_extra_semi">
        <segment>
          <source>extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_extra_semi_cxx11">
        <segment>
          <source>extra ';' outside of a function is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_fold_expression">
        <segment>
          <source>pack fold expression is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_for_range">
        <segment>
          <source>range-based for loop is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_for_range_init_stmt">
        <segment>
          <source>range-based for loop initialization statements are a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_generalized_initializer_lists">
        <segment>
          <source>generalized initializer lists are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_address_of_label">
        <segment>
          <source>use of GNU address-of-label extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_array_range">
        <segment>
          <source>use of GNU array range extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_case_range">
        <segment>
          <source>case ranges are a GNU extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_conditional_expr">
        <segment>
          <source>use of GNU ?: conditional expression extension, omitting middle operand</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_indirect_goto">
        <segment>
          <source>use of GNU indirect-goto extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_missing_equal_designator">
        <segment>
          <source>use of GNU 'missing =' extension in designator</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_old_style_field_designator">
        <segment>
          <source>use of GNU old-style field designator extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_statement_expr">
        <segment>
          <source>use of GNU statement expression extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_gnu_statement_expr_macro">
        <segment>
          <source>use of GNU statement expression extension from macro expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_hlsl_access_specifiers">
        <segment>
          <source>access specifiers are a clang HLSL extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_hlsl_lambda">
        <segment>
          <source>lambdas are a %select{C++11|clang HLSL}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ident_list_in_param">
        <segment>
          <source>type-less parameter names in function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_init_statement">
        <segment>
          <source>'%select{if|switch}0' initialization statements are a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_inline_namespace">
        <segment>
          <source>inline namespaces are a C++11 feature</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_inline_nested_namespace_definition">
        <segment>
          <source>inline nested namespace definition is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_keyword_as_ident">
        <segment>
          <source>keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_lambda">
        <segment>
          <source>lambdas are a %select{C++11|clang HLSL}0 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_lambda_missing_parens">
        <segment>
          <source>lambda without a parameter clause is a C++23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_lambda_template_parameter_list">
        <segment>
          <source>explicit template parameter list for lambdas is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ms_abstract_keyword">
        <segment>
          <source>'abstract' keyword is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ms_c_enum_fixed_underlying_type">
        <segment>
          <source>enumeration types with a fixed underlying type are a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ms_sealed_keyword">
        <segment>
          <source>'sealed' keyword is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ms_static_assert">
        <segment>
          <source>use of 'static_assert' without inclusion of &lt;assert.h&gt; is a Microsoft extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_multi_using_declaration">
        <segment>
          <source>use of multiple declarators in a single using declaration is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_nested_namespace_definition">
        <segment>
          <source>nested namespace definition is a C++17 extension; define each namespace separately</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_nonstatic_member_init">
        <segment>
          <source>default member initializer for non-static data member is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ns_enum_attribute">
        <segment>
          <source>attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_nullability">
        <segment>
          <source>type nullability specifier %0 is a Clang extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_omp_attributes">
        <segment>
          <source>specifying OpenMP directives with [[]] is an OpenMP 5.1 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_override_control_keyword">
        <segment>
          <source>'%0' keyword is a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_ref_qualifier">
        <segment>
          <source>reference qualifiers on functions are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_relocatable_keyword">
        <segment>
          <source>'%select{trivially_relocatable_if_eligible|replaceable_if_eligible}0' keyword is a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_rvalue_reference">
        <segment>
          <source>rvalue references are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_scoped_enum">
        <segment>
          <source>scoped enumerations are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_stdc_pragma_ignored">
        <segment>
          <source>unknown pragma in STDC namespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_template_template_param_typename">
        <segment>
          <source>template template parameter using 'typename' is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_thread_before">
        <segment>
          <source>'__thread' before '%0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_using_attribute_ns">
        <segment>
          <source>default scope specifier for attributes is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_using_declaration_pack">
        <segment>
          <source>pack expansion of using declaration is a C++17 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_using_enum_declaration">
        <segment>
          <source>using enum declaration is a C++20 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_variadic_friends">
        <segment>
          <source>variadic 'friend' declarations are a C++2c extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="ext_warn_gnu_final">
        <segment>
          <source>__final is a GNU extension, consider using C++11 final</source>
          <target></target>
        </segment>
      </unit>
      <unit id="missing_template_arg_list_after_template_kw">
        <segment>
          <source>a template argument list is expected after a name prefixed by the template keyword</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_bracket_depth">
        <segment>
          <source>use -fbracket-depth=N to increase maximum nesting level</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_compound_token_split_second_token_here">
        <segment>
          <source>%select{|second }0%1 token is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_exception_spec_deprecated">
        <segment>
          <source>use '%0' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_extra_comma_message_arg">
        <segment>
          <source>comma separating Objective-C messaging arguments</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_force_empty_selector_name">
        <segment>
          <source>or insert whitespace before ':' to use %0 as parameter name and have an empty entry in the selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_max_tokens_total_override">
        <segment>
          <source>total token limit set here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_meant_to_use_typename">
        <segment>
          <source>did you mean to use 'typename'?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_misplaced_ellipsis_vararg_add_comma">
        <segment>
          <source>insert ',' before '...' to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_misplaced_ellipsis_vararg_add_ellipsis">
        <segment>
          <source>place '...' %select{immediately before declared identifier|here}0 to declare a function parameter pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_misplaced_ellipsis_vararg_existing_ellipsis">
        <segment>
          <source>preceding '...' declares a function parameter pack</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_missing_end_of_definition_before">
        <segment>
          <source>still within definition of %q0 here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_missing_selector_name">
        <segment>
          <source>introduce a parameter name to make %0 part of the selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_objc_container_start">
        <segment>
          <source>%select{class|protocol|category|class extension|implementation|category implementation}0 started here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_assumption_clause_continue_here">
        <segment>
          <source>the ignored tokens spans until here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_ctx_compatible_set_and_selector_for_property">
        <segment>
          <source>the context property '%0' can be nested in the context selector '%1' which is nested in the context set '%2'; try 'match(%2={%1(%0)})'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_ctx_compatible_set_for_selector">
        <segment>
          <source>the context selector '%0' can be nested in the context set '%1'; try 'match(%1={%0%select{|(property)}2})'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_declare_variant_ctx_continue_here">
        <segment>
          <source>the ignored %select{set|selector|property}0 spans until here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_declare_variant_ctx_is_a">
        <segment>
          <source>'%0' is a context %select{set|selector|property}1 not a context %select{set|selector|property}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_declare_variant_ctx_options">
        <segment>
          <source>context %select{set|selector|property}0 options are: %1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_declare_variant_ctx_try">
        <segment>
          <source>try 'match(%0={%1%2})'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_omp_declare_variant_ctx_used_here">
        <segment>
          <source>the previous context %select{set|selector|property}0 '%1' used here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_ompx_bare_clause">
        <segment>
          <source>OpenMP extension clause '%0' only allowed with '#pragma omp %1'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pragma_attribute_namespace_on_attribute">
        <segment>
          <source>omit the namespace to add attributes to the most-recently pushed attribute group</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pragma_attribute_use_attribute_kw">
        <segment>
          <source>use the GNU '__attribute__' syntax</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_pragma_loop_invalid_vectorize_option">
        <segment>
          <source>vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_previous_default_assoc">
        <segment>
          <source>previous default generic association is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_previous_ellipsis">
        <segment>
          <source>previous binding pack specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_previous_map_type_specified_here">
        <segment>
          <source>map type '%0' is previous specified here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_previous_statement">
        <segment>
          <source>previous statement is here</source>
          <target></target>
        </segment>
      </unit>
      <unit id="note_unparenthesized_non_primary_expr_in_requires_clause">
        <segment>
          <source>parentheses are required around this expression in a requires clause</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_arc_bridge_cast_nonarc">
        <segment>
          <source>'%0' casts have no effect when not using ARC</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_atimport_in_framework_header">
        <segment>
          <source>use of '@import' in framework header is discouraged, including this header requires -fmodules</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_attribute_no_decl">
        <segment>
          <source>attribute %0 ignored, because it is not attached to a declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_attribute_on_function_definition">
        <segment>
          <source>GCC does not allow %0 attribute in this position on a function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_availability_and_unavailable">
        <segment>
          <source>'unavailable' availability overrides all other availability information</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c2y_compat_generic_with_type_arg">
        <segment>
          <source>passing a type argument as the first operand to '_Generic' is incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c2y_compat_keyword">
        <segment>
          <source>'%0' is incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c11_compat_keyword">
        <segment>
          <source>'%0' is incompatible with C standards before C11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c17_compat_enum_fixed_underlying_type">
        <segment>
          <source>enumeration types with a fixed underlying type are incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c17_compat_static_assert_no_message">
        <segment>
          <source>'_Static_assert' with no message is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_case_range">
        <segment>
          <source>case ranges are incompatible with C standards before C2y</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_keyword">
        <segment>
          <source>'%0' is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_label_end_of_compound_statement">
        <segment>
          <source>label at end of compound statement is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_c23_compat_label_followed_by_declaration">
        <segment>
          <source>label followed by a declaration is incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_clause_expected_string">
        <segment>
          <source>expected string literal in 'clause %0' - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_compound_token_split_by_macro">
        <segment>
          <source>%sub{subst_compound_token_kind}0,1,2,3 appear in different macro expansion contexts</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_compound_token_split_by_whitespace">
        <segment>
          <source>%sub{subst_compound_token_kind}0,1,2,3 are separated by whitespace</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cstyle_param">
        <segment>
          <source>use of C-style parameters in Objective-C method declarations is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cuda_attr_lambda_position">
        <segment>
          <source>nvcc does not allow '__%0__' to appear after the parameter list in lambdas</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_compat_decltype_auto_type_specifier">
        <segment>
          <source>'decltype(auto)' type specifier is incompatible with C++ standards before C++14</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx11_right_shift_in_template_arg">
        <segment>
          <source>use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_constexpr_if">
        <segment>
          <source>constexpr if is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_constexpr_on_lambda">
        <segment>
          <source>constexpr on lambda expressions is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_fold_expression">
        <segment>
          <source>pack fold expression is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_init_statement">
        <segment>
          <source>%select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_nested_namespace_definition">
        <segment>
          <source>nested namespace definition is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_ns_enum_attribute">
        <segment>
          <source>attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_static_assert_no_message">
        <segment>
          <source>'static_assert' with no message is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_template_template_param_typename">
        <segment>
          <source>template template parameter using 'typename' is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx14_compat_using_attribute_ns">
        <segment>
          <source>default scope specifier for attributes is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_bitfield_member_init">
        <segment>
          <source>default member initializer for bit-field is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_explicit_bool">
        <segment>
          <source>explicit(bool) is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_for_range_init_stmt">
        <segment>
          <source>range-based for loop initialization statements are incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_inline_nested_namespace_definition">
        <segment>
          <source>inline nested namespace definition is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_lambda_template_parameter_list">
        <segment>
          <source>explicit template parameter list for lambdas is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_multi_using_declaration">
        <segment>
          <source>use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_using_declaration_pack">
        <segment>
          <source>pack expansion using declaration is incompatible with C++ standards before C++17</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx17_compat_using_enum_declaration">
        <segment>
          <source>using enum declaration is incompatible with C++ standards before C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_alias_in_init_statement">
        <segment>
          <source>alias declaration in this context is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_consteval_if">
        <segment>
          <source>consteval if is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_decl_attrs_on_lambda">
        <segment>
          <source>%select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_explicit_bool">
        <segment>
          <source>this expression will be parsed as explicit(bool) in C++20</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_label_end_of_compound_statement">
        <segment>
          <source>label at end of compound statement is incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_static_assert_user_generated_message">
        <segment>
          <source>'static_assert' with a user-generated message is incompatible with C++ standards before C++26</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx20_compat_static_lambda">
        <segment>
          <source>static lambdas are incompatible with C++ standards before C++23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_compat_binding_pack">
        <segment>
          <source>structured binding packs are incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_compat_decl_attrs_on_binding">
        <segment>
          <source>an attribute specifier sequence attached to a structured binding declaration is incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_delete_with_message">
        <segment>
          <source>'= delete' with a message is incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx23_variadic_friends">
        <segment>
          <source>variadic 'friend' declarations are incompatible with C++ standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_alias_declaration">
        <segment>
          <source>alias declarations are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_alignas">
        <segment>
          <source>'alignas' is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_alignof">
        <segment>
          <source>alignof expressions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_attribute">
        <segment>
          <source>[[]] attributes are incompatible with C++ standards before C++11</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_decltype">
        <segment>
          <source>'decltype' type specifier is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_defaulted_deleted_function">
        <segment>
          <source>%select{defaulted|deleted}0 function definitions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_enumerator_list_comma">
        <segment>
          <source>commas at the end of enumerator lists are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_extern_template">
        <segment>
          <source>extern templates are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_for_range">
        <segment>
          <source>range-based for loop is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_generalized_initializer_lists">
        <segment>
          <source>generalized initializer lists are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_inline_namespace">
        <segment>
          <source>inline namespaces are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_lambda">
        <segment>
          <source>lambda expressions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_literal_operator">
        <segment>
          <source>literal operators are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_noexcept_decl">
        <segment>
          <source>noexcept specifications are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_noexcept_expr">
        <segment>
          <source>noexcept expressions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_nonstatic_member_init">
        <segment>
          <source>default member initializer for non-static data members is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_nullptr">
        <segment>
          <source>'nullptr' is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_override_control_keyword">
        <segment>
          <source>'%0' keyword is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_ref_qualifier">
        <segment>
          <source>reference qualifiers on functions are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_rvalue_reference">
        <segment>
          <source>rvalue references are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_scoped_enum">
        <segment>
          <source>scoped enumerations are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_static_assert">
        <segment>
          <source>'static_assert' declarations are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_top_level_semi">
        <segment>
          <source>extra ';' outside of a function is incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_trailing_return_type">
        <segment>
          <source>trailing return types are incompatible with C++98</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_cxx98_compat_two_right_angle_brackets">
        <segment>
          <source>consecutive right angle brackets are incompatible with C++98 (use '&gt; &gt;')</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_dangling_else">
        <segment>
          <source>add explicit braces to avoid dangling else</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_deprecated_for_co_await">
        <segment>
          <source>'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_deprecated_missing_comma_before_ellipsis">
        <segment>
          <source>declaration of a variadic function without a comma before '...' is deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_empty_init_statement">
        <segment>
          <source>empty initialization statement of '%select{if|switch|range-based for}0' has no effect</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_exception_spec_deprecated">
        <segment>
          <source>dynamic exception specifications are deprecated</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_expected_consistent_version_separator">
        <segment>
          <source>use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_expected_qualified_after_typename">
        <segment>
          <source>expected a qualified name after 'typename'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ext_c23_attributes">
        <segment>
          <source>[[]] attributes are a C23 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ext_cxx11_attributes">
        <segment>
          <source>[[]] attributes are a C++11 extension</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_ext_int_deprecated">
        <segment>
          <source>'_ExtInt' is deprecated; use '_BitInt' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_extra_semi_after_mem_fn_def">
        <segment>
          <source>extra ';' after member function definition</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_gcc_attribute_location">
        <segment>
          <source>GCC does not allow an attribute in this position on a function declaration</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_gcc_variable_decl_in_for_loop">
        <segment>
          <source>GCC does not allow variable declarations in for loop initializers before C99</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_max_tokens">
        <segment>
          <source>the number of preprocessor source tokens (%0) exceeds this token limit (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_max_tokens_total">
        <segment>
          <source>the total number of preprocessor source tokens (%0) exceeds the token limit (%1)</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_microsoft_dependent_exists">
        <segment>
          <source>dependent %select{__if_not_exists|__if_exists}0 declarations are ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_microsoft_qualifiers_ignored">
        <segment>
          <source>qualifiers after comma in declarator list are ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_misleading_indentation">
        <segment>
          <source>misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_misplaced_ellipsis_vararg">
        <segment>
          <source>'...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_missing_dependent_template_keyword">
        <segment>
          <source>use 'template' keyword to treat '%0' as a dependent template name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_missing_selector_name">
        <segment>
          <source>%0 used as the name of the previous parameter rather than as part of the selector</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_no_support_for_eval_method_source_on_m32">
        <segment>
          <source>setting the floating point evaluation method to `source` on a target without SSE is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_null_statement">
        <segment>
          <source>empty expression statement has no effect; remove unnecessary ';' to silence this warning</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_objc_protocol_qualifier_missing_id">
        <segment>
          <source>protocol has no object type specified; defaults to qualified 'id'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp51_compat_attributes">
        <segment>
          <source>specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_ctx_incompatible_property_for_selector">
        <segment>
          <source>the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_ctx_incompatible_score_for_property">
        <segment>
          <source>the context selector '%0' in the context set '%1' cannot have a score (%quoted2); score ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_ctx_incompatible_selector_for_set">
        <segment>
          <source>the context selector '%0' is not valid for the context set '%1'; selector ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_ctx_selector_without_properties">
        <segment>
          <source>the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_ctx_mutiple_use">
        <segment>
          <source>the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_ctx_not_a_property">
        <segment>
          <source>'%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_ctx_not_a_selector">
        <segment>
          <source>'%0' is not a valid context selector for the context set '%1'; selector ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_ctx_not_a_set">
        <segment>
          <source>'%0' is not a valid context set in a `declare variant`; set ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_expected">
        <segment>
          <source>expected '%0' after the %1; '%0' assumed</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_declare_variant_string_literal_or_identifier">
        <segment>
          <source>expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_default_deprecated">
        <segment>
          <source>'default' clause for 'metadirective' is deprecated; use 'otherwise' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_depend_in_ordered_deprecated">
        <segment>
          <source>'depend' clause for 'ordered' is deprecated; use 'doacross' instead</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_extra_tokens_at_eol">
        <segment>
          <source>extra tokens at the end of '#pragma omp %0' are ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_invalid_attribute_for_ompx_attributes">
        <segment>
          <source>'ompx_attribute' clause only allows 'amdgpu_flat_work_group_size', 'amdgpu_waves_per_eu', and 'launch_bounds'; %0 is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_more_one_device_type_clause">
        <segment>
          <source>more than one 'device_type' clause is specified</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_more_one_interop_type">
        <segment>
          <source>interop type '%0' cannot be specified more than once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_more_one_omp_all_memory">
        <segment>
          <source>reserved locator 'omp_all_memory' cannot be specified more than once</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_unknown_assumption_clause_missing_id">
        <segment>
          <source>valid %0 clauses start with %1; %select{token|tokens}2 will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_omp_unknown_assumption_clause_without_args">
        <segment>
          <source>%0 clause should not be followed by arguments; tokens will be ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_acc_ignored">
        <segment>
          <source>unexpected '#pragma acc ...' in program</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_align_expected_equal">
        <segment>
          <source>expected '=' following '#pragma %select{align|options align}0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_align_invalid_option">
        <segment>
          <source>invalid alignment option in '#pragma %select{align|options align}0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_comment_ignored">
        <segment>
          <source>'#pragma comment %0' ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_debug_dependent_argument">
        <segment>
          <source>%select{value|type}0-dependent expression passed as an argument to debug command</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_action_or_r_paren">
        <segment>
          <source>expected action or ')' in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_colon">
        <segment>
          <source>missing ':' after %0 - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_colon_r_paren">
        <segment>
          <source>missing ':' or ')' after %0 - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_comma">
        <segment>
          <source>expected ',' in '#pragma %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_identifier">
        <segment>
          <source>expected identifier in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_init_seg">
        <segment>
          <source>expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_integer">
        <segment>
          <source>expected integer between %0 and %1 inclusive in '#pragma %2' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_lparen">
        <segment>
          <source>missing '(' after '#pragma %0' - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_non_wide_string">
        <segment>
          <source>expected non-wide string literal in '#pragma %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_predicate">
        <segment>
          <source>expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_punc">
        <segment>
          <source>expected ')' or ',' in '#pragma %0'</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_rparen">
        <segment>
          <source>missing ')' after '#pragma %0' - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_section_label_or_name">
        <segment>
          <source>expected a stack label or a string literal for the section name in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_section_name">
        <segment>
          <source>expected a string literal for the section name in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_section_push_pop_or_name">
        <segment>
          <source>expected push, pop or a string literal for the section name in '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_expected_string">
        <segment>
          <source>expected string literal in '#pragma %0' - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_extension_is_core">
        <segment>
          <source>OpenCL extension %0 is core feature or supported optional core feature - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_extra_tokens_at_eol">
        <segment>
          <source>extra tokens at end of '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_force_cuda_host_device_bad_arg">
        <segment>
          <source>incorrect use of #pragma clang force_cuda_host_device begin|end</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_fp_ignored">
        <segment>
          <source>'#pragma %0' is not supported on this target - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_init_seg_unsupported_target">
        <segment>
          <source>'#pragma init_seg' is only supported when targeting a Microsoft environment</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_intrinsic_builtin">
        <segment>
          <source>%0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_invalid_action">
        <segment>
          <source>unknown action for '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_invalid_argument">
        <segment>
          <source>unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_invalid_specific_action">
        <segment>
          <source>unknown action '%1' for '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_missing_argument">
        <segment>
          <source>missing argument to '#pragma %0'%select{|; expected %2}1</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_ms_fenv_access">
        <segment>
          <source>incorrect use of '#pragma fenv_access (on|off)' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_ms_struct">
        <segment>
          <source>incorrect use of '#pragma ms_struct on|off' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_omp_ignored">
        <segment>
          <source>unexpected '#pragma omp ...' in program</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_options_expected_align">
        <segment>
          <source>expected 'align' following '#pragma options' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_pack_malformed">
        <segment>
          <source>expected integer or identifier in '#pragma pack' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_unknown_extension">
        <segment>
          <source>OpenCL extension %0 unknown or does not require pragma - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_unroll_cuda_value_in_parens">
        <segment>
          <source>argument to '#pragma unroll' should not be in parentheses in CUDA C/C++</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_unsupported_action">
        <segment>
          <source>known but unsupported action '%1' for '#pragma %0' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_unsupported_extension">
        <segment>
          <source>unsupported OpenCL extension %0 - ignoring</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pragma_unused_expected_var">
        <segment>
          <source>expected '#pragma unused' argument to be a variable name</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pre_c23_compat_attributes">
        <segment>
          <source>[[]] attributes are incompatible with C standards before C23</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_pre_cxx26_ambiguous_pack_indexing_type">
        <segment>
          <source>%0 is no longer a pack expansion but a pack indexing type; add a name to specify a pack expansion</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_relocatable_keyword">
        <segment>
          <source>'%select{trivially_relocatable|replaceable}0_if_eligible' keyword is incompatible with standards before C++2c</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_semicolon_before_method_body">
        <segment>
          <source>semicolon before method body is ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_static_inline_explicit_inst_ignored">
        <segment>
          <source>ignoring '%select{static|inline}0' keyword on explicit template instantiation</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_stdc_fenv_round_not_supported">
        <segment>
          <source>pragma STDC FENV_ROUND is not supported</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_stdc_unknown_rounding_mode">
        <segment>
          <source>invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_unknown_declare_variant_isa_trait">
        <segment>
          <source>isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_wrong_clang_attr_namespace">
        <segment>
          <source>'__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?</source>
          <target></target>
        </segment>
      </unit>
      <unit id="warn_zero_size_struct_union_in_extern_c">
        <segment>
          <source>%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</source>
          <target></target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>