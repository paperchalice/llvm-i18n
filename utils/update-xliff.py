#! /usr/bin/env python3

import argparse
from pathlib import Path
import os
import time
import xml.etree.ElementTree as ET
import pathlib
from common import *
import copy

parser = argparse.ArgumentParser(description="Example argparse script.")
parser.add_argument(
    "--trg-lang", required=True, type=str, nargs="+", help="target language"
)
parser.add_argument(
    "--inreplace", "-i", action="store_true", help="Inreplace mode, without backup."
)
args = parser.parse_args()


class Updater:
    def __init__(self, trg_lang: str):
        self.trg_lang = trg_lang

    def _update_for_component(self, template_path):
        ns = {"": "urn:oasis:names:tc:xliff:document:2.0"}
        template_xlf = ET.parse(template_path)
        xliff_dir = PROJECT_ROOT / "xliff" / self.trg_lang.replace("-", "/")
        target_xlf = ET.parse(xliff_dir / template_path.name)
        final_xlf = copy.deepcopy(target_xlf)
        for g in final_xlf.findall("./file/group", ns):
            final_xlf.find("file", ns).remove(g)
        # Handle TextSubstitution
        group_ids = ["TextSubstitution", "Diagnostic"]
        for group_id in group_ids:
            template_group = template_xlf.find(f'./file/group[@id="{group_id}"]', ns)
            target_group = target_xlf.find(f'./file/group[@id="{group_id}"]', ns)
            final_group = copy.deepcopy(target_group)
            final_group.clear()
            final_group.attrib = target_group.attrib
            for unit in template_group.findall("unit", ns):
                unit_id = unit.get("id")
                target_unit = target_group.find(f'./unit[@id="{unit_id}"]', ns)
                if target_unit is None:
                    final_group.append(unit)
                    continue

                if (
                    target_unit.find("segment/source", ns).text
                    != unit.find("segment/source", ns).text
                ):
                    target_unit.find("segment/source", ns).text = unit.find(
                        "segment/source", ns
                    ).text
                    target_unit.attrib.pop("state", "")
                final_group.append(target_unit)
            final_xlf.find("./file", ns).append(final_group)
        final_xlf.getroot().insert(
            0,
            ET.Comment(
                "This file is automatically generated. Do not update this file directly by hand! Use `update-xliff.py`."
            ),
        )
        file_name = template_path.name
        out_file = xliff_dir / file_name
        if not args.inreplace:
            os.rename(
                xliff_dir / file_name,
                f"{xliff_dir/template_path.stem}-{int(time.time())}.bak",
            )
        with open(out_file, "wb") as xml_file:
            ET.indent(final_xlf)
            final_xlf.write(
                xml_file,
                encoding="UTF-8",
                xml_declaration=True,
                short_empty_elements=False,
            )
            print(f"update done for xlf {file_name}")

    def update(self):
        for c in TEMPLATE_XLIFF_LIST:
            self._update_for_component(c)


def main():
    if args.trg_lang[0].upper() == "ALL":
        all_langs = BCP47_LOCALES
    else:
        all_langs = map(get_bcp47_locale, args.trg_lang)

    for l in all_langs:
        print(f"update for language {l}")
        updater = Updater(l)
        updater.update()


if __name__ == "__main__":
    main()
